package gl
import "core:c"
import "core:builtin"
import "core:fmt"
import "core:runtime"

GL_DEBUG :: #config(GL_DEBUG, ODIN_DEBUG)

Enum :: builtin.u32
boolean :: bool
bitfield :: builtin.u32
byte :: builtin.i8
ubyte :: builtin.u8
short :: builtin.i16
ushort :: builtin.u16
int :: builtin.i32
uint :: builtin.u32
clampx :: builtin.i32
sizei :: builtin.i32
float :: builtin.f32
clampf :: builtin.f32
double :: builtin.f64
clampd :: builtin.f64
eglClientBufferEXT :: rawptr
eglImageOES :: rawptr
char :: builtin.i8
charARB :: builtin.i8
handleARB :: builtin.u32 when ODIN_OS != .Darwin else rawptr
half :: builtin.u16
halfARB :: builtin.u16
fixed :: builtin.i32
intptr :: builtin.int
intptrARB :: builtin.int
sizeiptr :: builtin.int
sizeiptrARB :: builtin.int
int64 :: builtin.i64
int64EXT :: builtin.i64
uint64 :: builtin.u64
uint64EXT :: builtin.u64
sync :: rawptr
DEBUGPROC :: #type proc "c" (source, type: Enum, id: uint, category: Enum, severity: Enum, length: sizei, message: cstring, userParam: rawptr)
DEBUGPROCARB :: #type proc "c" (source, type: Enum, id: uint, category: Enum, severity: Enum, length: sizei, message: cstring, userParam: rawptr)
DEBUGPROCKHR :: #type proc "c" (source, type: Enum, id: uint, category: Enum, severity: Enum, length: sizei, message: cstring, userParam: rawptr)
DEBUGPROCAMD :: #type proc "c" (id: uint, category: Enum, severity: Enum, length: sizei, message: cstring, userParam: rawptr)
halfNV :: builtin.u16
vdpauSurfaceNV :: intptr
VULKANPROCNV :: #type proc() // undefined

// GL_VERSION_1_0
DEPTH_BUFFER_BIT :: 0x00000100
STENCIL_BUFFER_BIT :: 0x00000400
COLOR_BUFFER_BIT :: 0x00004000
FALSE :: false
TRUE :: true
POINTS :: 0x0000
LINES :: 0x0001
LINE_LOOP :: 0x0002
LINE_STRIP :: 0x0003
TRIANGLES :: 0x0004
TRIANGLE_STRIP :: 0x0005
TRIANGLE_FAN :: 0x0006
NEVER :: 0x0200
LESS :: 0x0201
EQUAL :: 0x0202
LEQUAL :: 0x0203
GREATER :: 0x0204
NOTEQUAL :: 0x0205
GEQUAL :: 0x0206
ALWAYS :: 0x0207
ZERO :: 0
ONE :: 1
SRC_COLOR :: 0x0300
ONE_MINUS_SRC_COLOR :: 0x0301
SRC_ALPHA :: 0x0302
ONE_MINUS_SRC_ALPHA :: 0x0303
DST_ALPHA :: 0x0304
ONE_MINUS_DST_ALPHA :: 0x0305
DST_COLOR :: 0x0306
ONE_MINUS_DST_COLOR :: 0x0307
SRC_ALPHA_SATURATE :: 0x0308
NONE :: 0
FRONT_LEFT :: 0x0400
FRONT_RIGHT :: 0x0401
BACK_LEFT :: 0x0402
BACK_RIGHT :: 0x0403
FRONT :: 0x0404
BACK :: 0x0405
LEFT :: 0x0406
RIGHT :: 0x0407
FRONT_AND_BACK :: 0x0408
NO_ERROR :: 0
INVALID_ENUM :: 0x0500
INVALID_VALUE :: 0x0501
INVALID_OPERATION :: 0x0502
OUT_OF_MEMORY :: 0x0505
CW :: 0x0900
CCW :: 0x0901
POINT_SIZE :: 0x0B11
POINT_SIZE_RANGE :: 0x0B12
POINT_SIZE_GRANULARITY :: 0x0B13
LINE_SMOOTH :: 0x0B20
LINE_WIDTH :: 0x0B21
LINE_WIDTH_RANGE :: 0x0B22
LINE_WIDTH_GRANULARITY :: 0x0B23
POLYGON_MODE :: 0x0B40
POLYGON_SMOOTH :: 0x0B41
CULL_FACE :: 0x0B44
CULL_FACE_MODE :: 0x0B45
FRONT_FACE :: 0x0B46
DEPTH_RANGE :: 0x0B70
DEPTH_TEST :: 0x0B71
DEPTH_WRITEMASK :: 0x0B72
DEPTH_CLEAR_VALUE :: 0x0B73
DEPTH_FUNC :: 0x0B74
STENCIL_TEST :: 0x0B90
STENCIL_CLEAR_VALUE :: 0x0B91
STENCIL_FUNC :: 0x0B92
STENCIL_VALUE_MASK :: 0x0B93
STENCIL_FAIL :: 0x0B94
STENCIL_PASS_DEPTH_FAIL :: 0x0B95
STENCIL_PASS_DEPTH_PASS :: 0x0B96
STENCIL_REF :: 0x0B97
STENCIL_WRITEMASK :: 0x0B98
VIEWPORT :: 0x0BA2
DITHER :: 0x0BD0
BLEND_DST :: 0x0BE0
BLEND_SRC :: 0x0BE1
BLEND :: 0x0BE2
LOGIC_OP_MODE :: 0x0BF0
DRAW_BUFFER :: 0x0C01
READ_BUFFER :: 0x0C02
SCISSOR_BOX :: 0x0C10
SCISSOR_TEST :: 0x0C11
COLOR_CLEAR_VALUE :: 0x0C22
COLOR_WRITEMASK :: 0x0C23
DOUBLEBUFFER :: 0x0C32
STEREO :: 0x0C33
LINE_SMOOTH_HINT :: 0x0C52
POLYGON_SMOOTH_HINT :: 0x0C53
UNPACK_SWAP_BYTES :: 0x0CF0
UNPACK_LSB_FIRST :: 0x0CF1
UNPACK_ROW_LENGTH :: 0x0CF2
UNPACK_SKIP_ROWS :: 0x0CF3
UNPACK_SKIP_PIXELS :: 0x0CF4
UNPACK_ALIGNMENT :: 0x0CF5
PACK_SWAP_BYTES :: 0x0D00
PACK_LSB_FIRST :: 0x0D01
PACK_ROW_LENGTH :: 0x0D02
PACK_SKIP_ROWS :: 0x0D03
PACK_SKIP_PIXELS :: 0x0D04
PACK_ALIGNMENT :: 0x0D05
MAX_TEXTURE_SIZE :: 0x0D33
MAX_VIEWPORT_DIMS :: 0x0D3A
SUBPIXEL_BITS :: 0x0D50
TEXTURE_1D :: 0x0DE0
TEXTURE_2D :: 0x0DE1
TEXTURE_WIDTH :: 0x1000
TEXTURE_HEIGHT :: 0x1001
TEXTURE_BORDER_COLOR :: 0x1004
DONT_CARE :: 0x1100
FASTEST :: 0x1101
NICEST :: 0x1102
BYTE :: 0x1400
UNSIGNED_BYTE :: 0x1401
SHORT :: 0x1402
UNSIGNED_SHORT :: 0x1403
INT :: 0x1404
UNSIGNED_INT :: 0x1405
FLOAT :: 0x1406
CLEAR :: 0x1500
AND :: 0x1501
AND_REVERSE :: 0x1502
COPY :: 0x1503
AND_INVERTED :: 0x1504
NOOP :: 0x1505
XOR :: 0x1506
OR :: 0x1507
NOR :: 0x1508
EQUIV :: 0x1509
INVERT :: 0x150A
OR_REVERSE :: 0x150B
COPY_INVERTED :: 0x150C
OR_INVERTED :: 0x150D
NAND :: 0x150E
SET :: 0x150F
TEXTURE :: 0x1702
COLOR :: 0x1800
DEPTH :: 0x1801
STENCIL :: 0x1802
STENCIL_INDEX :: 0x1901
DEPTH_COMPONENT :: 0x1902
RED :: 0x1903
GREEN :: 0x1904
BLUE :: 0x1905
ALPHA :: 0x1906
RGB :: 0x1907
RGBA :: 0x1908
POINT :: 0x1B00
LINE :: 0x1B01
FILL :: 0x1B02
KEEP :: 0x1E00
REPLACE :: 0x1E01
INCR :: 0x1E02
DECR :: 0x1E03
VENDOR :: 0x1F00
RENDERER :: 0x1F01
VERSION :: 0x1F02
EXTENSIONS :: 0x1F03
NEAREST :: 0x2600
LINEAR :: 0x2601
NEAREST_MIPMAP_NEAREST :: 0x2700
LINEAR_MIPMAP_NEAREST :: 0x2701
NEAREST_MIPMAP_LINEAR :: 0x2702
LINEAR_MIPMAP_LINEAR :: 0x2703
TEXTURE_MAG_FILTER :: 0x2800
TEXTURE_MIN_FILTER :: 0x2801
TEXTURE_WRAP_S :: 0x2802
TEXTURE_WRAP_T :: 0x2803
REPEAT :: 0x2901
// GL_VERSION_1_1
COLOR_LOGIC_OP :: 0x0BF2
POLYGON_OFFSET_UNITS :: 0x2A00
POLYGON_OFFSET_POINT :: 0x2A01
POLYGON_OFFSET_LINE :: 0x2A02
POLYGON_OFFSET_FILL :: 0x8037
POLYGON_OFFSET_FACTOR :: 0x8038
TEXTURE_BINDING_1D :: 0x8068
TEXTURE_BINDING_2D :: 0x8069
TEXTURE_INTERNAL_FORMAT :: 0x1003
TEXTURE_RED_SIZE :: 0x805C
TEXTURE_GREEN_SIZE :: 0x805D
TEXTURE_BLUE_SIZE :: 0x805E
TEXTURE_ALPHA_SIZE :: 0x805F
DOUBLE :: 0x140A
PROXY_TEXTURE_1D :: 0x8063
PROXY_TEXTURE_2D :: 0x8064
R3_G3_B2 :: 0x2A10
RGB4 :: 0x804F
RGB5 :: 0x8050
RGB8 :: 0x8051
RGB10 :: 0x8052
RGB12 :: 0x8053
RGB16 :: 0x8054
RGBA2 :: 0x8055
RGBA4 :: 0x8056
RGB5_A1 :: 0x8057
RGBA8 :: 0x8058
RGB10_A2 :: 0x8059
RGBA12 :: 0x805A
RGBA16 :: 0x805B
// GL_VERSION_1_2
UNSIGNED_BYTE_3_3_2 :: 0x8032
UNSIGNED_SHORT_4_4_4_4 :: 0x8033
UNSIGNED_SHORT_5_5_5_1 :: 0x8034
UNSIGNED_INT_8_8_8_8 :: 0x8035
UNSIGNED_INT_10_10_10_2 :: 0x8036
TEXTURE_BINDING_3D :: 0x806A
PACK_SKIP_IMAGES :: 0x806B
PACK_IMAGE_HEIGHT :: 0x806C
UNPACK_SKIP_IMAGES :: 0x806D
UNPACK_IMAGE_HEIGHT :: 0x806E
TEXTURE_3D :: 0x806F
PROXY_TEXTURE_3D :: 0x8070
TEXTURE_DEPTH :: 0x8071
TEXTURE_WRAP_R :: 0x8072
MAX_3D_TEXTURE_SIZE :: 0x8073
UNSIGNED_BYTE_2_3_3_REV :: 0x8362
UNSIGNED_SHORT_5_6_5 :: 0x8363
UNSIGNED_SHORT_5_6_5_REV :: 0x8364
UNSIGNED_SHORT_4_4_4_4_REV :: 0x8365
UNSIGNED_SHORT_1_5_5_5_REV :: 0x8366
UNSIGNED_INT_8_8_8_8_REV :: 0x8367
UNSIGNED_INT_2_10_10_10_REV :: 0x8368
BGR :: 0x80E0
BGRA :: 0x80E1
MAX_ELEMENTS_VERTICES :: 0x80E8
MAX_ELEMENTS_INDICES :: 0x80E9
CLAMP_TO_EDGE :: 0x812F
TEXTURE_MIN_LOD :: 0x813A
TEXTURE_MAX_LOD :: 0x813B
TEXTURE_BASE_LEVEL :: 0x813C
TEXTURE_MAX_LEVEL :: 0x813D
SMOOTH_POINT_SIZE_RANGE :: 0x0B12
SMOOTH_POINT_SIZE_GRANULARITY :: 0x0B13
SMOOTH_LINE_WIDTH_RANGE :: 0x0B22
SMOOTH_LINE_WIDTH_GRANULARITY :: 0x0B23
ALIASED_LINE_WIDTH_RANGE :: 0x846E
// GL_VERSION_1_3
TEXTURE0 :: 0x84C0
TEXTURE1 :: 0x84C1
TEXTURE2 :: 0x84C2
TEXTURE3 :: 0x84C3
TEXTURE4 :: 0x84C4
TEXTURE5 :: 0x84C5
TEXTURE6 :: 0x84C6
TEXTURE7 :: 0x84C7
TEXTURE8 :: 0x84C8
TEXTURE9 :: 0x84C9
TEXTURE10 :: 0x84CA
TEXTURE11 :: 0x84CB
TEXTURE12 :: 0x84CC
TEXTURE13 :: 0x84CD
TEXTURE14 :: 0x84CE
TEXTURE15 :: 0x84CF
TEXTURE16 :: 0x84D0
TEXTURE17 :: 0x84D1
TEXTURE18 :: 0x84D2
TEXTURE19 :: 0x84D3
TEXTURE20 :: 0x84D4
TEXTURE21 :: 0x84D5
TEXTURE22 :: 0x84D6
TEXTURE23 :: 0x84D7
TEXTURE24 :: 0x84D8
TEXTURE25 :: 0x84D9
TEXTURE26 :: 0x84DA
TEXTURE27 :: 0x84DB
TEXTURE28 :: 0x84DC
TEXTURE29 :: 0x84DD
TEXTURE30 :: 0x84DE
TEXTURE31 :: 0x84DF
ACTIVE_TEXTURE :: 0x84E0
MULTISAMPLE :: 0x809D
SAMPLE_ALPHA_TO_COVERAGE :: 0x809E
SAMPLE_ALPHA_TO_ONE :: 0x809F
SAMPLE_COVERAGE :: 0x80A0
SAMPLE_BUFFERS :: 0x80A8
SAMPLES :: 0x80A9
SAMPLE_COVERAGE_VALUE :: 0x80AA
SAMPLE_COVERAGE_INVERT :: 0x80AB
TEXTURE_CUBE_MAP :: 0x8513
TEXTURE_BINDING_CUBE_MAP :: 0x8514
TEXTURE_CUBE_MAP_POSITIVE_X :: 0x8515
TEXTURE_CUBE_MAP_NEGATIVE_X :: 0x8516
TEXTURE_CUBE_MAP_POSITIVE_Y :: 0x8517
TEXTURE_CUBE_MAP_NEGATIVE_Y :: 0x8518
TEXTURE_CUBE_MAP_POSITIVE_Z :: 0x8519
TEXTURE_CUBE_MAP_NEGATIVE_Z :: 0x851A
PROXY_TEXTURE_CUBE_MAP :: 0x851B
MAX_CUBE_MAP_TEXTURE_SIZE :: 0x851C
COMPRESSED_RGB :: 0x84ED
COMPRESSED_RGBA :: 0x84EE
TEXTURE_COMPRESSION_HINT :: 0x84EF
TEXTURE_COMPRESSED_IMAGE_SIZE :: 0x86A0
TEXTURE_COMPRESSED :: 0x86A1
NUM_COMPRESSED_TEXTURE_FORMATS :: 0x86A2
COMPRESSED_TEXTURE_FORMATS :: 0x86A3
CLAMP_TO_BORDER :: 0x812D
// GL_VERSION_1_4
BLEND_DST_RGB :: 0x80C8
BLEND_SRC_RGB :: 0x80C9
BLEND_DST_ALPHA :: 0x80CA
BLEND_SRC_ALPHA :: 0x80CB
POINT_FADE_THRESHOLD_SIZE :: 0x8128
DEPTH_COMPONENT16 :: 0x81A5
DEPTH_COMPONENT24 :: 0x81A6
DEPTH_COMPONENT32 :: 0x81A7
MIRRORED_REPEAT :: 0x8370
MAX_TEXTURE_LOD_BIAS :: 0x84FD
TEXTURE_LOD_BIAS :: 0x8501
INCR_WRAP :: 0x8507
DECR_WRAP :: 0x8508
TEXTURE_DEPTH_SIZE :: 0x884A
TEXTURE_COMPARE_MODE :: 0x884C
TEXTURE_COMPARE_FUNC :: 0x884D
BLEND_COLOR :: 0x8005
BLEND_EQUATION :: 0x8009
CONSTANT_COLOR :: 0x8001
ONE_MINUS_CONSTANT_COLOR :: 0x8002
CONSTANT_ALPHA :: 0x8003
ONE_MINUS_CONSTANT_ALPHA :: 0x8004
FUNC_ADD :: 0x8006
FUNC_REVERSE_SUBTRACT :: 0x800B
FUNC_SUBTRACT :: 0x800A
MIN :: 0x8007
MAX :: 0x8008
// GL_VERSION_1_5
BUFFER_SIZE :: 0x8764
BUFFER_USAGE :: 0x8765
QUERY_COUNTER_BITS :: 0x8864
CURRENT_QUERY :: 0x8865
QUERY_RESULT :: 0x8866
QUERY_RESULT_AVAILABLE :: 0x8867
ARRAY_BUFFER :: 0x8892
ELEMENT_ARRAY_BUFFER :: 0x8893
ARRAY_BUFFER_BINDING :: 0x8894
ELEMENT_ARRAY_BUFFER_BINDING :: 0x8895
VERTEX_ATTRIB_ARRAY_BUFFER_BINDING :: 0x889F
READ_ONLY :: 0x88B8
WRITE_ONLY :: 0x88B9
READ_WRITE :: 0x88BA
BUFFER_ACCESS :: 0x88BB
BUFFER_MAPPED :: 0x88BC
BUFFER_MAP_POINTER :: 0x88BD
STREAM_DRAW :: 0x88E0
STREAM_READ :: 0x88E1
STREAM_COPY :: 0x88E2
STATIC_DRAW :: 0x88E4
STATIC_READ :: 0x88E5
STATIC_COPY :: 0x88E6
DYNAMIC_DRAW :: 0x88E8
DYNAMIC_READ :: 0x88E9
DYNAMIC_COPY :: 0x88EA
SAMPLES_PASSED :: 0x8914
SRC1_ALPHA :: 0x8589
// GL_VERSION_2_0
BLEND_EQUATION_RGB :: 0x8009
VERTEX_ATTRIB_ARRAY_ENABLED :: 0x8622
VERTEX_ATTRIB_ARRAY_SIZE :: 0x8623
VERTEX_ATTRIB_ARRAY_STRIDE :: 0x8624
VERTEX_ATTRIB_ARRAY_TYPE :: 0x8625
CURRENT_VERTEX_ATTRIB :: 0x8626
VERTEX_PROGRAM_POINT_SIZE :: 0x8642
VERTEX_ATTRIB_ARRAY_POINTER :: 0x8645
STENCIL_BACK_FUNC :: 0x8800
STENCIL_BACK_FAIL :: 0x8801
STENCIL_BACK_PASS_DEPTH_FAIL :: 0x8802
STENCIL_BACK_PASS_DEPTH_PASS :: 0x8803
MAX_DRAW_BUFFERS :: 0x8824
DRAW_BUFFER0 :: 0x8825
DRAW_BUFFER1 :: 0x8826
DRAW_BUFFER2 :: 0x8827
DRAW_BUFFER3 :: 0x8828
DRAW_BUFFER4 :: 0x8829
DRAW_BUFFER5 :: 0x882A
DRAW_BUFFER6 :: 0x882B
DRAW_BUFFER7 :: 0x882C
DRAW_BUFFER8 :: 0x882D
DRAW_BUFFER9 :: 0x882E
DRAW_BUFFER10 :: 0x882F
DRAW_BUFFER11 :: 0x8830
DRAW_BUFFER12 :: 0x8831
DRAW_BUFFER13 :: 0x8832
DRAW_BUFFER14 :: 0x8833
DRAW_BUFFER15 :: 0x8834
BLEND_EQUATION_ALPHA :: 0x883D
MAX_VERTEX_ATTRIBS :: 0x8869
VERTEX_ATTRIB_ARRAY_NORMALIZED :: 0x886A
MAX_TEXTURE_IMAGE_UNITS :: 0x8872
FRAGMENT_SHADER :: 0x8B30
VERTEX_SHADER :: 0x8B31
MAX_FRAGMENT_UNIFORM_COMPONENTS :: 0x8B49
MAX_VERTEX_UNIFORM_COMPONENTS :: 0x8B4A
MAX_VARYING_FLOATS :: 0x8B4B
MAX_VERTEX_TEXTURE_IMAGE_UNITS :: 0x8B4C
MAX_COMBINED_TEXTURE_IMAGE_UNITS :: 0x8B4D
SHADER_TYPE :: 0x8B4F
FLOAT_VEC2 :: 0x8B50
FLOAT_VEC3 :: 0x8B51
FLOAT_VEC4 :: 0x8B52
INT_VEC2 :: 0x8B53
INT_VEC3 :: 0x8B54
INT_VEC4 :: 0x8B55
BOOL :: 0x8B56
BOOL_VEC2 :: 0x8B57
BOOL_VEC3 :: 0x8B58
BOOL_VEC4 :: 0x8B59
FLOAT_MAT2 :: 0x8B5A
FLOAT_MAT3 :: 0x8B5B
FLOAT_MAT4 :: 0x8B5C
SAMPLER_1D :: 0x8B5D
SAMPLER_2D :: 0x8B5E
SAMPLER_3D :: 0x8B5F
SAMPLER_CUBE :: 0x8B60
SAMPLER_1D_SHADOW :: 0x8B61
SAMPLER_2D_SHADOW :: 0x8B62
DELETE_STATUS :: 0x8B80
COMPILE_STATUS :: 0x8B81
LINK_STATUS :: 0x8B82
VALIDATE_STATUS :: 0x8B83
INFO_LOG_LENGTH :: 0x8B84
ATTACHED_SHADERS :: 0x8B85
ACTIVE_UNIFORMS :: 0x8B86
ACTIVE_UNIFORM_MAX_LENGTH :: 0x8B87
SHADER_SOURCE_LENGTH :: 0x8B88
ACTIVE_ATTRIBUTES :: 0x8B89
ACTIVE_ATTRIBUTE_MAX_LENGTH :: 0x8B8A
FRAGMENT_SHADER_DERIVATIVE_HINT :: 0x8B8B
SHADING_LANGUAGE_VERSION :: 0x8B8C
CURRENT_PROGRAM :: 0x8B8D
POINT_SPRITE_COORD_ORIGIN :: 0x8CA0
LOWER_LEFT :: 0x8CA1
UPPER_LEFT :: 0x8CA2
STENCIL_BACK_REF :: 0x8CA3
STENCIL_BACK_VALUE_MASK :: 0x8CA4
STENCIL_BACK_WRITEMASK :: 0x8CA5
// GL_VERSION_2_1
PIXEL_PACK_BUFFER :: 0x88EB
PIXEL_UNPACK_BUFFER :: 0x88EC
PIXEL_PACK_BUFFER_BINDING :: 0x88ED
PIXEL_UNPACK_BUFFER_BINDING :: 0x88EF
FLOAT_MAT2x3 :: 0x8B65
FLOAT_MAT2x4 :: 0x8B66
FLOAT_MAT3x2 :: 0x8B67
FLOAT_MAT3x4 :: 0x8B68
FLOAT_MAT4x2 :: 0x8B69
FLOAT_MAT4x3 :: 0x8B6A
SRGB :: 0x8C40
SRGB8 :: 0x8C41
SRGB_ALPHA :: 0x8C42
SRGB8_ALPHA8 :: 0x8C43
COMPRESSED_SRGB :: 0x8C48
COMPRESSED_SRGB_ALPHA :: 0x8C49
// GL_VERSION_3_0
COMPARE_REF_TO_TEXTURE :: 0x884E
CLIP_DISTANCE0 :: 0x3000
CLIP_DISTANCE1 :: 0x3001
CLIP_DISTANCE2 :: 0x3002
CLIP_DISTANCE3 :: 0x3003
CLIP_DISTANCE4 :: 0x3004
CLIP_DISTANCE5 :: 0x3005
CLIP_DISTANCE6 :: 0x3006
CLIP_DISTANCE7 :: 0x3007
MAX_CLIP_DISTANCES :: 0x0D32
MAJOR_VERSION :: 0x821B
MINOR_VERSION :: 0x821C
NUM_EXTENSIONS :: 0x821D
CONTEXT_FLAGS :: 0x821E
COMPRESSED_RED :: 0x8225
COMPRESSED_RG :: 0x8226
CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT :: 0x00000001
RGBA32F :: 0x8814
RGB32F :: 0x8815
RGBA16F :: 0x881A
RGB16F :: 0x881B
VERTEX_ATTRIB_ARRAY_INTEGER :: 0x88FD
MAX_ARRAY_TEXTURE_LAYERS :: 0x88FF
MIN_PROGRAM_TEXEL_OFFSET :: 0x8904
MAX_PROGRAM_TEXEL_OFFSET :: 0x8905
CLAMP_READ_COLOR :: 0x891C
FIXED_ONLY :: 0x891D
MAX_VARYING_COMPONENTS :: 0x8B4B
TEXTURE_1D_ARRAY :: 0x8C18
PROXY_TEXTURE_1D_ARRAY :: 0x8C19
TEXTURE_2D_ARRAY :: 0x8C1A
PROXY_TEXTURE_2D_ARRAY :: 0x8C1B
TEXTURE_BINDING_1D_ARRAY :: 0x8C1C
TEXTURE_BINDING_2D_ARRAY :: 0x8C1D
R11F_G11F_B10F :: 0x8C3A
UNSIGNED_INT_10F_11F_11F_REV :: 0x8C3B
RGB9_E5 :: 0x8C3D
UNSIGNED_INT_5_9_9_9_REV :: 0x8C3E
TEXTURE_SHARED_SIZE :: 0x8C3F
TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH :: 0x8C76
TRANSFORM_FEEDBACK_BUFFER_MODE :: 0x8C7F
MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS :: 0x8C80
TRANSFORM_FEEDBACK_VARYINGS :: 0x8C83
TRANSFORM_FEEDBACK_BUFFER_START :: 0x8C84
TRANSFORM_FEEDBACK_BUFFER_SIZE :: 0x8C85
PRIMITIVES_GENERATED :: 0x8C87
TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN :: 0x8C88
RASTERIZER_DISCARD :: 0x8C89
MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS :: 0x8C8A
MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS :: 0x8C8B
INTERLEAVED_ATTRIBS :: 0x8C8C
SEPARATE_ATTRIBS :: 0x8C8D
TRANSFORM_FEEDBACK_BUFFER :: 0x8C8E
TRANSFORM_FEEDBACK_BUFFER_BINDING :: 0x8C8F
RGBA32UI :: 0x8D70
RGB32UI :: 0x8D71
RGBA16UI :: 0x8D76
RGB16UI :: 0x8D77
RGBA8UI :: 0x8D7C
RGB8UI :: 0x8D7D
RGBA32I :: 0x8D82
RGB32I :: 0x8D83
RGBA16I :: 0x8D88
RGB16I :: 0x8D89
RGBA8I :: 0x8D8E
RGB8I :: 0x8D8F
RED_INTEGER :: 0x8D94
GREEN_INTEGER :: 0x8D95
BLUE_INTEGER :: 0x8D96
RGB_INTEGER :: 0x8D98
RGBA_INTEGER :: 0x8D99
BGR_INTEGER :: 0x8D9A
BGRA_INTEGER :: 0x8D9B
SAMPLER_1D_ARRAY :: 0x8DC0
SAMPLER_2D_ARRAY :: 0x8DC1
SAMPLER_1D_ARRAY_SHADOW :: 0x8DC3
SAMPLER_2D_ARRAY_SHADOW :: 0x8DC4
SAMPLER_CUBE_SHADOW :: 0x8DC5
UNSIGNED_INT_VEC2 :: 0x8DC6
UNSIGNED_INT_VEC3 :: 0x8DC7
UNSIGNED_INT_VEC4 :: 0x8DC8
INT_SAMPLER_1D :: 0x8DC9
INT_SAMPLER_2D :: 0x8DCA
INT_SAMPLER_3D :: 0x8DCB
INT_SAMPLER_CUBE :: 0x8DCC
INT_SAMPLER_1D_ARRAY :: 0x8DCE
INT_SAMPLER_2D_ARRAY :: 0x8DCF
UNSIGNED_INT_SAMPLER_1D :: 0x8DD1
UNSIGNED_INT_SAMPLER_2D :: 0x8DD2
UNSIGNED_INT_SAMPLER_3D :: 0x8DD3
UNSIGNED_INT_SAMPLER_CUBE :: 0x8DD4
UNSIGNED_INT_SAMPLER_1D_ARRAY :: 0x8DD6
UNSIGNED_INT_SAMPLER_2D_ARRAY :: 0x8DD7
QUERY_WAIT :: 0x8E13
QUERY_NO_WAIT :: 0x8E14
QUERY_BY_REGION_WAIT :: 0x8E15
QUERY_BY_REGION_NO_WAIT :: 0x8E16
BUFFER_ACCESS_FLAGS :: 0x911F
BUFFER_MAP_LENGTH :: 0x9120
BUFFER_MAP_OFFSET :: 0x9121
DEPTH_COMPONENT32F :: 0x8CAC
DEPTH32F_STENCIL8 :: 0x8CAD
FLOAT_32_UNSIGNED_INT_24_8_REV :: 0x8DAD
INVALID_FRAMEBUFFER_OPERATION :: 0x0506
FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING :: 0x8210
FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE :: 0x8211
FRAMEBUFFER_ATTACHMENT_RED_SIZE :: 0x8212
FRAMEBUFFER_ATTACHMENT_GREEN_SIZE :: 0x8213
FRAMEBUFFER_ATTACHMENT_BLUE_SIZE :: 0x8214
FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE :: 0x8215
FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE :: 0x8216
FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE :: 0x8217
FRAMEBUFFER_DEFAULT :: 0x8218
FRAMEBUFFER_UNDEFINED :: 0x8219
DEPTH_STENCIL_ATTACHMENT :: 0x821A
MAX_RENDERBUFFER_SIZE :: 0x84E8
DEPTH_STENCIL :: 0x84F9
UNSIGNED_INT_24_8 :: 0x84FA
DEPTH24_STENCIL8 :: 0x88F0
TEXTURE_STENCIL_SIZE :: 0x88F1
TEXTURE_RED_TYPE :: 0x8C10
TEXTURE_GREEN_TYPE :: 0x8C11
TEXTURE_BLUE_TYPE :: 0x8C12
TEXTURE_ALPHA_TYPE :: 0x8C13
TEXTURE_DEPTH_TYPE :: 0x8C16
UNSIGNED_NORMALIZED :: 0x8C17
FRAMEBUFFER_BINDING :: 0x8CA6
DRAW_FRAMEBUFFER_BINDING :: 0x8CA6
RENDERBUFFER_BINDING :: 0x8CA7
READ_FRAMEBUFFER :: 0x8CA8
DRAW_FRAMEBUFFER :: 0x8CA9
READ_FRAMEBUFFER_BINDING :: 0x8CAA
RENDERBUFFER_SAMPLES :: 0x8CAB
FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE :: 0x8CD0
FRAMEBUFFER_ATTACHMENT_OBJECT_NAME :: 0x8CD1
FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL :: 0x8CD2
FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE :: 0x8CD3
FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER :: 0x8CD4
FRAMEBUFFER_COMPLETE :: 0x8CD5
FRAMEBUFFER_INCOMPLETE_ATTACHMENT :: 0x8CD6
FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT :: 0x8CD7
FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER :: 0x8CDB
FRAMEBUFFER_INCOMPLETE_READ_BUFFER :: 0x8CDC
FRAMEBUFFER_UNSUPPORTED :: 0x8CDD
MAX_COLOR_ATTACHMENTS :: 0x8CDF
COLOR_ATTACHMENT0 :: 0x8CE0
COLOR_ATTACHMENT1 :: 0x8CE1
COLOR_ATTACHMENT2 :: 0x8CE2
COLOR_ATTACHMENT3 :: 0x8CE3
COLOR_ATTACHMENT4 :: 0x8CE4
COLOR_ATTACHMENT5 :: 0x8CE5
COLOR_ATTACHMENT6 :: 0x8CE6
COLOR_ATTACHMENT7 :: 0x8CE7
COLOR_ATTACHMENT8 :: 0x8CE8
COLOR_ATTACHMENT9 :: 0x8CE9
COLOR_ATTACHMENT10 :: 0x8CEA
COLOR_ATTACHMENT11 :: 0x8CEB
COLOR_ATTACHMENT12 :: 0x8CEC
COLOR_ATTACHMENT13 :: 0x8CED
COLOR_ATTACHMENT14 :: 0x8CEE
COLOR_ATTACHMENT15 :: 0x8CEF
COLOR_ATTACHMENT16 :: 0x8CF0
COLOR_ATTACHMENT17 :: 0x8CF1
COLOR_ATTACHMENT18 :: 0x8CF2
COLOR_ATTACHMENT19 :: 0x8CF3
COLOR_ATTACHMENT20 :: 0x8CF4
COLOR_ATTACHMENT21 :: 0x8CF5
COLOR_ATTACHMENT22 :: 0x8CF6
COLOR_ATTACHMENT23 :: 0x8CF7
COLOR_ATTACHMENT24 :: 0x8CF8
COLOR_ATTACHMENT25 :: 0x8CF9
COLOR_ATTACHMENT26 :: 0x8CFA
COLOR_ATTACHMENT27 :: 0x8CFB
COLOR_ATTACHMENT28 :: 0x8CFC
COLOR_ATTACHMENT29 :: 0x8CFD
COLOR_ATTACHMENT30 :: 0x8CFE
COLOR_ATTACHMENT31 :: 0x8CFF
DEPTH_ATTACHMENT :: 0x8D00
STENCIL_ATTACHMENT :: 0x8D20
FRAMEBUFFER :: 0x8D40
RENDERBUFFER :: 0x8D41
RENDERBUFFER_WIDTH :: 0x8D42
RENDERBUFFER_HEIGHT :: 0x8D43
RENDERBUFFER_INTERNAL_FORMAT :: 0x8D44
STENCIL_INDEX1 :: 0x8D46
STENCIL_INDEX4 :: 0x8D47
STENCIL_INDEX8 :: 0x8D48
STENCIL_INDEX16 :: 0x8D49
RENDERBUFFER_RED_SIZE :: 0x8D50
RENDERBUFFER_GREEN_SIZE :: 0x8D51
RENDERBUFFER_BLUE_SIZE :: 0x8D52
RENDERBUFFER_ALPHA_SIZE :: 0x8D53
RENDERBUFFER_DEPTH_SIZE :: 0x8D54
RENDERBUFFER_STENCIL_SIZE :: 0x8D55
FRAMEBUFFER_INCOMPLETE_MULTISAMPLE :: 0x8D56
MAX_SAMPLES :: 0x8D57
FRAMEBUFFER_SRGB :: 0x8DB9
HALF_FLOAT :: 0x140B
MAP_READ_BIT :: 0x0001
MAP_WRITE_BIT :: 0x0002
MAP_INVALIDATE_RANGE_BIT :: 0x0004
MAP_INVALIDATE_BUFFER_BIT :: 0x0008
MAP_FLUSH_EXPLICIT_BIT :: 0x0010
MAP_UNSYNCHRONIZED_BIT :: 0x0020
COMPRESSED_RED_RGTC1 :: 0x8DBB
COMPRESSED_SIGNED_RED_RGTC1 :: 0x8DBC
COMPRESSED_RG_RGTC2 :: 0x8DBD
COMPRESSED_SIGNED_RG_RGTC2 :: 0x8DBE
RG :: 0x8227
RG_INTEGER :: 0x8228
R8 :: 0x8229
R16 :: 0x822A
RG8 :: 0x822B
RG16 :: 0x822C
R16F :: 0x822D
R32F :: 0x822E
RG16F :: 0x822F
RG32F :: 0x8230
R8I :: 0x8231
R8UI :: 0x8232
R16I :: 0x8233
R16UI :: 0x8234
R32I :: 0x8235
R32UI :: 0x8236
RG8I :: 0x8237
RG8UI :: 0x8238
RG16I :: 0x8239
RG16UI :: 0x823A
RG32I :: 0x823B
RG32UI :: 0x823C
VERTEX_ARRAY_BINDING :: 0x85B5
// GL_VERSION_3_1
SAMPLER_2D_RECT :: 0x8B63
SAMPLER_2D_RECT_SHADOW :: 0x8B64
SAMPLER_BUFFER :: 0x8DC2
INT_SAMPLER_2D_RECT :: 0x8DCD
INT_SAMPLER_BUFFER :: 0x8DD0
UNSIGNED_INT_SAMPLER_2D_RECT :: 0x8DD5
UNSIGNED_INT_SAMPLER_BUFFER :: 0x8DD8
TEXTURE_BUFFER :: 0x8C2A
MAX_TEXTURE_BUFFER_SIZE :: 0x8C2B
TEXTURE_BINDING_BUFFER :: 0x8C2C
TEXTURE_BUFFER_DATA_STORE_BINDING :: 0x8C2D
TEXTURE_RECTANGLE :: 0x84F5
TEXTURE_BINDING_RECTANGLE :: 0x84F6
PROXY_TEXTURE_RECTANGLE :: 0x84F7
MAX_RECTANGLE_TEXTURE_SIZE :: 0x84F8
R8_SNORM :: 0x8F94
RG8_SNORM :: 0x8F95
RGB8_SNORM :: 0x8F96
RGBA8_SNORM :: 0x8F97
R16_SNORM :: 0x8F98
RG16_SNORM :: 0x8F99
RGB16_SNORM :: 0x8F9A
RGBA16_SNORM :: 0x8F9B
SIGNED_NORMALIZED :: 0x8F9C
PRIMITIVE_RESTART :: 0x8F9D
PRIMITIVE_RESTART_INDEX :: 0x8F9E
COPY_READ_BUFFER :: 0x8F36
COPY_WRITE_BUFFER :: 0x8F37
UNIFORM_BUFFER :: 0x8A11
UNIFORM_BUFFER_BINDING :: 0x8A28
UNIFORM_BUFFER_START :: 0x8A29
UNIFORM_BUFFER_SIZE :: 0x8A2A
MAX_VERTEX_UNIFORM_BLOCKS :: 0x8A2B
MAX_GEOMETRY_UNIFORM_BLOCKS :: 0x8A2C
MAX_FRAGMENT_UNIFORM_BLOCKS :: 0x8A2D
MAX_COMBINED_UNIFORM_BLOCKS :: 0x8A2E
MAX_UNIFORM_BUFFER_BINDINGS :: 0x8A2F
MAX_UNIFORM_BLOCK_SIZE :: 0x8A30
MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS :: 0x8A31
MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS :: 0x8A32
MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS :: 0x8A33
UNIFORM_BUFFER_OFFSET_ALIGNMENT :: 0x8A34
ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH :: 0x8A35
ACTIVE_UNIFORM_BLOCKS :: 0x8A36
UNIFORM_TYPE :: 0x8A37
UNIFORM_SIZE :: 0x8A38
UNIFORM_NAME_LENGTH :: 0x8A39
UNIFORM_BLOCK_INDEX :: 0x8A3A
UNIFORM_OFFSET :: 0x8A3B
UNIFORM_ARRAY_STRIDE :: 0x8A3C
UNIFORM_MATRIX_STRIDE :: 0x8A3D
UNIFORM_IS_ROW_MAJOR :: 0x8A3E
UNIFORM_BLOCK_BINDING :: 0x8A3F
UNIFORM_BLOCK_DATA_SIZE :: 0x8A40
UNIFORM_BLOCK_NAME_LENGTH :: 0x8A41
UNIFORM_BLOCK_ACTIVE_UNIFORMS :: 0x8A42
UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES :: 0x8A43
UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER :: 0x8A44
UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER :: 0x8A45
UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER :: 0x8A46
INVALID_INDEX :: 0xFFFFFFFF
// GL_VERSION_3_2
CONTEXT_CORE_PROFILE_BIT :: 0x00000001
CONTEXT_COMPATIBILITY_PROFILE_BIT :: 0x00000002
LINES_ADJACENCY :: 0x000A
LINE_STRIP_ADJACENCY :: 0x000B
TRIANGLES_ADJACENCY :: 0x000C
TRIANGLE_STRIP_ADJACENCY :: 0x000D
PROGRAM_POINT_SIZE :: 0x8642
MAX_GEOMETRY_TEXTURE_IMAGE_UNITS :: 0x8C29
FRAMEBUFFER_ATTACHMENT_LAYERED :: 0x8DA7
FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS :: 0x8DA8
GEOMETRY_SHADER :: 0x8DD9
GEOMETRY_VERTICES_OUT :: 0x8916
GEOMETRY_INPUT_TYPE :: 0x8917
GEOMETRY_OUTPUT_TYPE :: 0x8918
MAX_GEOMETRY_UNIFORM_COMPONENTS :: 0x8DDF
MAX_GEOMETRY_OUTPUT_VERTICES :: 0x8DE0
MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS :: 0x8DE1
MAX_VERTEX_OUTPUT_COMPONENTS :: 0x9122
MAX_GEOMETRY_INPUT_COMPONENTS :: 0x9123
MAX_GEOMETRY_OUTPUT_COMPONENTS :: 0x9124
MAX_FRAGMENT_INPUT_COMPONENTS :: 0x9125
CONTEXT_PROFILE_MASK :: 0x9126
DEPTH_CLAMP :: 0x864F
QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION :: 0x8E4C
FIRST_VERTEX_CONVENTION :: 0x8E4D
LAST_VERTEX_CONVENTION :: 0x8E4E
PROVOKING_VERTEX :: 0x8E4F
TEXTURE_CUBE_MAP_SEAMLESS :: 0x884F
MAX_SERVER_WAIT_TIMEOUT :: 0x9111
OBJECT_TYPE :: 0x9112
SYNC_CONDITION :: 0x9113
SYNC_STATUS :: 0x9114
SYNC_FLAGS :: 0x9115
SYNC_FENCE :: 0x9116
SYNC_GPU_COMMANDS_COMPLETE :: 0x9117
UNSIGNALED :: 0x9118
SIGNALED :: 0x9119
ALREADY_SIGNALED :: 0x911A
TIMEOUT_EXPIRED :: 0x911B
CONDITION_SATISFIED :: 0x911C
WAIT_FAILED :: 0x911D
TIMEOUT_IGNORED :: 0xFFFFFFFFFFFFFFFF
SYNC_FLUSH_COMMANDS_BIT :: 0x00000001
SAMPLE_POSITION :: 0x8E50
SAMPLE_MASK :: 0x8E51
SAMPLE_MASK_VALUE :: 0x8E52
MAX_SAMPLE_MASK_WORDS :: 0x8E59
TEXTURE_2D_MULTISAMPLE :: 0x9100
PROXY_TEXTURE_2D_MULTISAMPLE :: 0x9101
TEXTURE_2D_MULTISAMPLE_ARRAY :: 0x9102
PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY :: 0x9103
TEXTURE_BINDING_2D_MULTISAMPLE :: 0x9104
TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY :: 0x9105
TEXTURE_SAMPLES :: 0x9106
TEXTURE_FIXED_SAMPLE_LOCATIONS :: 0x9107
SAMPLER_2D_MULTISAMPLE :: 0x9108
INT_SAMPLER_2D_MULTISAMPLE :: 0x9109
UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE :: 0x910A
SAMPLER_2D_MULTISAMPLE_ARRAY :: 0x910B
INT_SAMPLER_2D_MULTISAMPLE_ARRAY :: 0x910C
UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY :: 0x910D
MAX_COLOR_TEXTURE_SAMPLES :: 0x910E
MAX_DEPTH_TEXTURE_SAMPLES :: 0x910F
MAX_INTEGER_SAMPLES :: 0x9110
// GL_VERSION_3_3
VERTEX_ATTRIB_ARRAY_DIVISOR :: 0x88FE
SRC1_COLOR :: 0x88F9
ONE_MINUS_SRC1_COLOR :: 0x88FA
ONE_MINUS_SRC1_ALPHA :: 0x88FB
MAX_DUAL_SOURCE_DRAW_BUFFERS :: 0x88FC
ANY_SAMPLES_PASSED :: 0x8C2F
SAMPLER_BINDING :: 0x8919
RGB10_A2UI :: 0x906F
TEXTURE_SWIZZLE_R :: 0x8E42
TEXTURE_SWIZZLE_G :: 0x8E43
TEXTURE_SWIZZLE_B :: 0x8E44
TEXTURE_SWIZZLE_A :: 0x8E45
TEXTURE_SWIZZLE_RGBA :: 0x8E46
TIME_ELAPSED :: 0x88BF
TIMESTAMP :: 0x8E28
INT_2_10_10_10_REV :: 0x8D9F
// GL_VERSION_4_0
SAMPLE_SHADING :: 0x8C36
MIN_SAMPLE_SHADING_VALUE :: 0x8C37
MIN_PROGRAM_TEXTURE_GATHER_OFFSET :: 0x8E5E
MAX_PROGRAM_TEXTURE_GATHER_OFFSET :: 0x8E5F
TEXTURE_CUBE_MAP_ARRAY :: 0x9009
TEXTURE_BINDING_CUBE_MAP_ARRAY :: 0x900A
PROXY_TEXTURE_CUBE_MAP_ARRAY :: 0x900B
SAMPLER_CUBE_MAP_ARRAY :: 0x900C
SAMPLER_CUBE_MAP_ARRAY_SHADOW :: 0x900D
INT_SAMPLER_CUBE_MAP_ARRAY :: 0x900E
UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY :: 0x900F
DRAW_INDIRECT_BUFFER :: 0x8F3F
DRAW_INDIRECT_BUFFER_BINDING :: 0x8F43
GEOMETRY_SHADER_INVOCATIONS :: 0x887F
MAX_GEOMETRY_SHADER_INVOCATIONS :: 0x8E5A
MIN_FRAGMENT_INTERPOLATION_OFFSET :: 0x8E5B
MAX_FRAGMENT_INTERPOLATION_OFFSET :: 0x8E5C
FRAGMENT_INTERPOLATION_OFFSET_BITS :: 0x8E5D
MAX_VERTEX_STREAMS :: 0x8E71
DOUBLE_VEC2 :: 0x8FFC
DOUBLE_VEC3 :: 0x8FFD
DOUBLE_VEC4 :: 0x8FFE
DOUBLE_MAT2 :: 0x8F46
DOUBLE_MAT3 :: 0x8F47
DOUBLE_MAT4 :: 0x8F48
DOUBLE_MAT2x3 :: 0x8F49
DOUBLE_MAT2x4 :: 0x8F4A
DOUBLE_MAT3x2 :: 0x8F4B
DOUBLE_MAT3x4 :: 0x8F4C
DOUBLE_MAT4x2 :: 0x8F4D
DOUBLE_MAT4x3 :: 0x8F4E
ACTIVE_SUBROUTINES :: 0x8DE5
ACTIVE_SUBROUTINE_UNIFORMS :: 0x8DE6
ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS :: 0x8E47
ACTIVE_SUBROUTINE_MAX_LENGTH :: 0x8E48
ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH :: 0x8E49
MAX_SUBROUTINES :: 0x8DE7
MAX_SUBROUTINE_UNIFORM_LOCATIONS :: 0x8DE8
NUM_COMPATIBLE_SUBROUTINES :: 0x8E4A
COMPATIBLE_SUBROUTINES :: 0x8E4B
PATCHES :: 0x000E
PATCH_VERTICES :: 0x8E72
PATCH_DEFAULT_INNER_LEVEL :: 0x8E73
PATCH_DEFAULT_OUTER_LEVEL :: 0x8E74
TESS_CONTROL_OUTPUT_VERTICES :: 0x8E75
TESS_GEN_MODE :: 0x8E76
TESS_GEN_SPACING :: 0x8E77
TESS_GEN_VERTEX_ORDER :: 0x8E78
TESS_GEN_POINT_MODE :: 0x8E79
ISOLINES :: 0x8E7A
QUADS :: 0x0007
FRACTIONAL_ODD :: 0x8E7B
FRACTIONAL_EVEN :: 0x8E7C
MAX_PATCH_VERTICES :: 0x8E7D
MAX_TESS_GEN_LEVEL :: 0x8E7E
MAX_TESS_CONTROL_UNIFORM_COMPONENTS :: 0x8E7F
MAX_TESS_EVALUATION_UNIFORM_COMPONENTS :: 0x8E80
MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS :: 0x8E81
MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS :: 0x8E82
MAX_TESS_CONTROL_OUTPUT_COMPONENTS :: 0x8E83
MAX_TESS_PATCH_COMPONENTS :: 0x8E84
MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS :: 0x8E85
MAX_TESS_EVALUATION_OUTPUT_COMPONENTS :: 0x8E86
MAX_TESS_CONTROL_UNIFORM_BLOCKS :: 0x8E89
MAX_TESS_EVALUATION_UNIFORM_BLOCKS :: 0x8E8A
MAX_TESS_CONTROL_INPUT_COMPONENTS :: 0x886C
MAX_TESS_EVALUATION_INPUT_COMPONENTS :: 0x886D
MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS :: 0x8E1E
MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS :: 0x8E1F
UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER :: 0x84F0
UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER :: 0x84F1
TESS_EVALUATION_SHADER :: 0x8E87
TESS_CONTROL_SHADER :: 0x8E88
TRANSFORM_FEEDBACK :: 0x8E22
TRANSFORM_FEEDBACK_BUFFER_PAUSED :: 0x8E23
TRANSFORM_FEEDBACK_BUFFER_ACTIVE :: 0x8E24
TRANSFORM_FEEDBACK_BINDING :: 0x8E25
MAX_TRANSFORM_FEEDBACK_BUFFERS :: 0x8E70
// GL_VERSION_4_1
FIXED :: 0x140C
IMPLEMENTATION_COLOR_READ_TYPE :: 0x8B9A
IMPLEMENTATION_COLOR_READ_FORMAT :: 0x8B9B
LOW_FLOAT :: 0x8DF0
MEDIUM_FLOAT :: 0x8DF1
HIGH_FLOAT :: 0x8DF2
LOW_INT :: 0x8DF3
MEDIUM_INT :: 0x8DF4
HIGH_INT :: 0x8DF5
SHADER_COMPILER :: 0x8DFA
SHADER_BINARY_FORMATS :: 0x8DF8
NUM_SHADER_BINARY_FORMATS :: 0x8DF9
MAX_VERTEX_UNIFORM_VECTORS :: 0x8DFB
MAX_VARYING_VECTORS :: 0x8DFC
MAX_FRAGMENT_UNIFORM_VECTORS :: 0x8DFD
RGB565 :: 0x8D62
PROGRAM_BINARY_RETRIEVABLE_HINT :: 0x8257
PROGRAM_BINARY_LENGTH :: 0x8741
NUM_PROGRAM_BINARY_FORMATS :: 0x87FE
PROGRAM_BINARY_FORMATS :: 0x87FF
VERTEX_SHADER_BIT :: 0x00000001
FRAGMENT_SHADER_BIT :: 0x00000002
GEOMETRY_SHADER_BIT :: 0x00000004
TESS_CONTROL_SHADER_BIT :: 0x00000008
TESS_EVALUATION_SHADER_BIT :: 0x00000010
ALL_SHADER_BITS :: 0xFFFFFFFF
PROGRAM_SEPARABLE :: 0x8258
ACTIVE_PROGRAM :: 0x8259
PROGRAM_PIPELINE_BINDING :: 0x825A
MAX_VIEWPORTS :: 0x825B
VIEWPORT_SUBPIXEL_BITS :: 0x825C
VIEWPORT_BOUNDS_RANGE :: 0x825D
LAYER_PROVOKING_VERTEX :: 0x825E
VIEWPORT_INDEX_PROVOKING_VERTEX :: 0x825F
UNDEFINED_VERTEX :: 0x8260
// GL_VERSION_4_2
COPY_READ_BUFFER_BINDING :: 0x8F36
COPY_WRITE_BUFFER_BINDING :: 0x8F37
TRANSFORM_FEEDBACK_ACTIVE :: 0x8E24
TRANSFORM_FEEDBACK_PAUSED :: 0x8E23
UNPACK_COMPRESSED_BLOCK_WIDTH :: 0x9127
UNPACK_COMPRESSED_BLOCK_HEIGHT :: 0x9128
UNPACK_COMPRESSED_BLOCK_DEPTH :: 0x9129
UNPACK_COMPRESSED_BLOCK_SIZE :: 0x912A
PACK_COMPRESSED_BLOCK_WIDTH :: 0x912B
PACK_COMPRESSED_BLOCK_HEIGHT :: 0x912C
PACK_COMPRESSED_BLOCK_DEPTH :: 0x912D
PACK_COMPRESSED_BLOCK_SIZE :: 0x912E
NUM_SAMPLE_COUNTS :: 0x9380
MIN_MAP_BUFFER_ALIGNMENT :: 0x90BC
ATOMIC_COUNTER_BUFFER :: 0x92C0
ATOMIC_COUNTER_BUFFER_BINDING :: 0x92C1
ATOMIC_COUNTER_BUFFER_START :: 0x92C2
ATOMIC_COUNTER_BUFFER_SIZE :: 0x92C3
ATOMIC_COUNTER_BUFFER_DATA_SIZE :: 0x92C4
ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS :: 0x92C5
ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES :: 0x92C6
ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER :: 0x92C7
ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER :: 0x92C8
ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER :: 0x92C9
ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER :: 0x92CA
ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER :: 0x92CB
MAX_VERTEX_ATOMIC_COUNTER_BUFFERS :: 0x92CC
MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS :: 0x92CD
MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS :: 0x92CE
MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS :: 0x92CF
MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS :: 0x92D0
MAX_COMBINED_ATOMIC_COUNTER_BUFFERS :: 0x92D1
MAX_VERTEX_ATOMIC_COUNTERS :: 0x92D2
MAX_TESS_CONTROL_ATOMIC_COUNTERS :: 0x92D3
MAX_TESS_EVALUATION_ATOMIC_COUNTERS :: 0x92D4
MAX_GEOMETRY_ATOMIC_COUNTERS :: 0x92D5
MAX_FRAGMENT_ATOMIC_COUNTERS :: 0x92D6
MAX_COMBINED_ATOMIC_COUNTERS :: 0x92D7
MAX_ATOMIC_COUNTER_BUFFER_SIZE :: 0x92D8
MAX_ATOMIC_COUNTER_BUFFER_BINDINGS :: 0x92DC
ACTIVE_ATOMIC_COUNTER_BUFFERS :: 0x92D9
UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX :: 0x92DA
UNSIGNED_INT_ATOMIC_COUNTER :: 0x92DB
VERTEX_ATTRIB_ARRAY_BARRIER_BIT :: 0x00000001
ELEMENT_ARRAY_BARRIER_BIT :: 0x00000002
UNIFORM_BARRIER_BIT :: 0x00000004
TEXTURE_FETCH_BARRIER_BIT :: 0x00000008
SHADER_IMAGE_ACCESS_BARRIER_BIT :: 0x00000020
COMMAND_BARRIER_BIT :: 0x00000040
PIXEL_BUFFER_BARRIER_BIT :: 0x00000080
TEXTURE_UPDATE_BARRIER_BIT :: 0x00000100
BUFFER_UPDATE_BARRIER_BIT :: 0x00000200
FRAMEBUFFER_BARRIER_BIT :: 0x00000400
TRANSFORM_FEEDBACK_BARRIER_BIT :: 0x00000800
ATOMIC_COUNTER_BARRIER_BIT :: 0x00001000
ALL_BARRIER_BITS :: 0xFFFFFFFF
MAX_IMAGE_UNITS :: 0x8F38
MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS :: 0x8F39
IMAGE_BINDING_NAME :: 0x8F3A
IMAGE_BINDING_LEVEL :: 0x8F3B
IMAGE_BINDING_LAYERED :: 0x8F3C
IMAGE_BINDING_LAYER :: 0x8F3D
IMAGE_BINDING_ACCESS :: 0x8F3E
IMAGE_1D :: 0x904C
IMAGE_2D :: 0x904D
IMAGE_3D :: 0x904E
IMAGE_2D_RECT :: 0x904F
IMAGE_CUBE :: 0x9050
IMAGE_BUFFER :: 0x9051
IMAGE_1D_ARRAY :: 0x9052
IMAGE_2D_ARRAY :: 0x9053
IMAGE_CUBE_MAP_ARRAY :: 0x9054
IMAGE_2D_MULTISAMPLE :: 0x9055
IMAGE_2D_MULTISAMPLE_ARRAY :: 0x9056
INT_IMAGE_1D :: 0x9057
INT_IMAGE_2D :: 0x9058
INT_IMAGE_3D :: 0x9059
INT_IMAGE_2D_RECT :: 0x905A
INT_IMAGE_CUBE :: 0x905B
INT_IMAGE_BUFFER :: 0x905C
INT_IMAGE_1D_ARRAY :: 0x905D
INT_IMAGE_2D_ARRAY :: 0x905E
INT_IMAGE_CUBE_MAP_ARRAY :: 0x905F
INT_IMAGE_2D_MULTISAMPLE :: 0x9060
INT_IMAGE_2D_MULTISAMPLE_ARRAY :: 0x9061
UNSIGNED_INT_IMAGE_1D :: 0x9062
UNSIGNED_INT_IMAGE_2D :: 0x9063
UNSIGNED_INT_IMAGE_3D :: 0x9064
UNSIGNED_INT_IMAGE_2D_RECT :: 0x9065
UNSIGNED_INT_IMAGE_CUBE :: 0x9066
UNSIGNED_INT_IMAGE_BUFFER :: 0x9067
UNSIGNED_INT_IMAGE_1D_ARRAY :: 0x9068
UNSIGNED_INT_IMAGE_2D_ARRAY :: 0x9069
UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY :: 0x906A
UNSIGNED_INT_IMAGE_2D_MULTISAMPLE :: 0x906B
UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY :: 0x906C
MAX_IMAGE_SAMPLES :: 0x906D
IMAGE_BINDING_FORMAT :: 0x906E
IMAGE_FORMAT_COMPATIBILITY_TYPE :: 0x90C7
IMAGE_FORMAT_COMPATIBILITY_BY_SIZE :: 0x90C8
IMAGE_FORMAT_COMPATIBILITY_BY_CLASS :: 0x90C9
MAX_VERTEX_IMAGE_UNIFORMS :: 0x90CA
MAX_TESS_CONTROL_IMAGE_UNIFORMS :: 0x90CB
MAX_TESS_EVALUATION_IMAGE_UNIFORMS :: 0x90CC
MAX_GEOMETRY_IMAGE_UNIFORMS :: 0x90CD
MAX_FRAGMENT_IMAGE_UNIFORMS :: 0x90CE
MAX_COMBINED_IMAGE_UNIFORMS :: 0x90CF
COMPRESSED_RGBA_BPTC_UNORM :: 0x8E8C
COMPRESSED_SRGB_ALPHA_BPTC_UNORM :: 0x8E8D
COMPRESSED_RGB_BPTC_SIGNED_FLOAT :: 0x8E8E
COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT :: 0x8E8F
TEXTURE_IMMUTABLE_FORMAT :: 0x912F
// GL_VERSION_4_3
NUM_SHADING_LANGUAGE_VERSIONS :: 0x82E9
VERTEX_ATTRIB_ARRAY_LONG :: 0x874E
COMPRESSED_RGB8_ETC2 :: 0x9274
COMPRESSED_SRGB8_ETC2 :: 0x9275
COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 :: 0x9276
COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 :: 0x9277
COMPRESSED_RGBA8_ETC2_EAC :: 0x9278
COMPRESSED_SRGB8_ALPHA8_ETC2_EAC :: 0x9279
COMPRESSED_R11_EAC :: 0x9270
COMPRESSED_SIGNED_R11_EAC :: 0x9271
COMPRESSED_RG11_EAC :: 0x9272
COMPRESSED_SIGNED_RG11_EAC :: 0x9273
PRIMITIVE_RESTART_FIXED_INDEX :: 0x8D69
ANY_SAMPLES_PASSED_CONSERVATIVE :: 0x8D6A
MAX_ELEMENT_INDEX :: 0x8D6B
COMPUTE_SHADER :: 0x91B9
MAX_COMPUTE_UNIFORM_BLOCKS :: 0x91BB
MAX_COMPUTE_TEXTURE_IMAGE_UNITS :: 0x91BC
MAX_COMPUTE_IMAGE_UNIFORMS :: 0x91BD
MAX_COMPUTE_SHARED_MEMORY_SIZE :: 0x8262
MAX_COMPUTE_UNIFORM_COMPONENTS :: 0x8263
MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS :: 0x8264
MAX_COMPUTE_ATOMIC_COUNTERS :: 0x8265
MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS :: 0x8266
MAX_COMPUTE_WORK_GROUP_INVOCATIONS :: 0x90EB
MAX_COMPUTE_WORK_GROUP_COUNT :: 0x91BE
MAX_COMPUTE_WORK_GROUP_SIZE :: 0x91BF
COMPUTE_WORK_GROUP_SIZE :: 0x8267
UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER :: 0x90EC
ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER :: 0x90ED
DISPATCH_INDIRECT_BUFFER :: 0x90EE
DISPATCH_INDIRECT_BUFFER_BINDING :: 0x90EF
COMPUTE_SHADER_BIT :: 0x00000020
DEBUG_OUTPUT_SYNCHRONOUS :: 0x8242
DEBUG_NEXT_LOGGED_MESSAGE_LENGTH :: 0x8243
DEBUG_CALLBACK_FUNCTION :: 0x8244
DEBUG_CALLBACK_USER_PARAM :: 0x8245
DEBUG_SOURCE_API :: 0x8246
DEBUG_SOURCE_WINDOW_SYSTEM :: 0x8247
DEBUG_SOURCE_SHADER_COMPILER :: 0x8248
DEBUG_SOURCE_THIRD_PARTY :: 0x8249
DEBUG_SOURCE_APPLICATION :: 0x824A
DEBUG_SOURCE_OTHER :: 0x824B
DEBUG_TYPE_ERROR :: 0x824C
DEBUG_TYPE_DEPRECATED_BEHAVIOR :: 0x824D
DEBUG_TYPE_UNDEFINED_BEHAVIOR :: 0x824E
DEBUG_TYPE_PORTABILITY :: 0x824F
DEBUG_TYPE_PERFORMANCE :: 0x8250
DEBUG_TYPE_OTHER :: 0x8251
MAX_DEBUG_MESSAGE_LENGTH :: 0x9143
MAX_DEBUG_LOGGED_MESSAGES :: 0x9144
DEBUG_LOGGED_MESSAGES :: 0x9145
DEBUG_SEVERITY_HIGH :: 0x9146
DEBUG_SEVERITY_MEDIUM :: 0x9147
DEBUG_SEVERITY_LOW :: 0x9148
DEBUG_TYPE_MARKER :: 0x8268
DEBUG_TYPE_PUSH_GROUP :: 0x8269
DEBUG_TYPE_POP_GROUP :: 0x826A
DEBUG_SEVERITY_NOTIFICATION :: 0x826B
MAX_DEBUG_GROUP_STACK_DEPTH :: 0x826C
DEBUG_GROUP_STACK_DEPTH :: 0x826D
BUFFER :: 0x82E0
SHADER :: 0x82E1
PROGRAM :: 0x82E2
VERTEX_ARRAY :: 0x8074
QUERY :: 0x82E3
PROGRAM_PIPELINE :: 0x82E4
SAMPLER :: 0x82E6
MAX_LABEL_LENGTH :: 0x82E8
DEBUG_OUTPUT :: 0x92E0
CONTEXT_FLAG_DEBUG_BIT :: 0x00000002
MAX_UNIFORM_LOCATIONS :: 0x826E
FRAMEBUFFER_DEFAULT_WIDTH :: 0x9310
FRAMEBUFFER_DEFAULT_HEIGHT :: 0x9311
FRAMEBUFFER_DEFAULT_LAYERS :: 0x9312
FRAMEBUFFER_DEFAULT_SAMPLES :: 0x9313
FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS :: 0x9314
MAX_FRAMEBUFFER_WIDTH :: 0x9315
MAX_FRAMEBUFFER_HEIGHT :: 0x9316
MAX_FRAMEBUFFER_LAYERS :: 0x9317
MAX_FRAMEBUFFER_SAMPLES :: 0x9318
INTERNALFORMAT_SUPPORTED :: 0x826F
INTERNALFORMAT_PREFERRED :: 0x8270
INTERNALFORMAT_RED_SIZE :: 0x8271
INTERNALFORMAT_GREEN_SIZE :: 0x8272
INTERNALFORMAT_BLUE_SIZE :: 0x8273
INTERNALFORMAT_ALPHA_SIZE :: 0x8274
INTERNALFORMAT_DEPTH_SIZE :: 0x8275
INTERNALFORMAT_STENCIL_SIZE :: 0x8276
INTERNALFORMAT_SHARED_SIZE :: 0x8277
INTERNALFORMAT_RED_TYPE :: 0x8278
INTERNALFORMAT_GREEN_TYPE :: 0x8279
INTERNALFORMAT_BLUE_TYPE :: 0x827A
INTERNALFORMAT_ALPHA_TYPE :: 0x827B
INTERNALFORMAT_DEPTH_TYPE :: 0x827C
INTERNALFORMAT_STENCIL_TYPE :: 0x827D
MAX_WIDTH :: 0x827E
MAX_HEIGHT :: 0x827F
MAX_DEPTH :: 0x8280
MAX_LAYERS :: 0x8281
MAX_COMBINED_DIMENSIONS :: 0x8282
COLOR_COMPONENTS :: 0x8283
DEPTH_COMPONENTS :: 0x8284
STENCIL_COMPONENTS :: 0x8285
COLOR_RENDERABLE :: 0x8286
DEPTH_RENDERABLE :: 0x8287
STENCIL_RENDERABLE :: 0x8288
FRAMEBUFFER_RENDERABLE :: 0x8289
FRAMEBUFFER_RENDERABLE_LAYERED :: 0x828A
FRAMEBUFFER_BLEND :: 0x828B
READ_PIXELS :: 0x828C
READ_PIXELS_FORMAT :: 0x828D
READ_PIXELS_TYPE :: 0x828E
TEXTURE_IMAGE_FORMAT :: 0x828F
TEXTURE_IMAGE_TYPE :: 0x8290
GET_TEXTURE_IMAGE_FORMAT :: 0x8291
GET_TEXTURE_IMAGE_TYPE :: 0x8292
MIPMAP :: 0x8293
MANUAL_GENERATE_MIPMAP :: 0x8294
AUTO_GENERATE_MIPMAP :: 0x8295
COLOR_ENCODING :: 0x8296
SRGB_READ :: 0x8297
SRGB_WRITE :: 0x8298
FILTER :: 0x829A
VERTEX_TEXTURE :: 0x829B
TESS_CONTROL_TEXTURE :: 0x829C
TESS_EVALUATION_TEXTURE :: 0x829D
GEOMETRY_TEXTURE :: 0x829E
FRAGMENT_TEXTURE :: 0x829F
COMPUTE_TEXTURE :: 0x82A0
TEXTURE_SHADOW :: 0x82A1
TEXTURE_GATHER :: 0x82A2
TEXTURE_GATHER_SHADOW :: 0x82A3
SHADER_IMAGE_LOAD :: 0x82A4
SHADER_IMAGE_STORE :: 0x82A5
SHADER_IMAGE_ATOMIC :: 0x82A6
IMAGE_TEXEL_SIZE :: 0x82A7
IMAGE_COMPATIBILITY_CLASS :: 0x82A8
IMAGE_PIXEL_FORMAT :: 0x82A9
IMAGE_PIXEL_TYPE :: 0x82AA
SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST :: 0x82AC
SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST :: 0x82AD
SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE :: 0x82AE
SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE :: 0x82AF
TEXTURE_COMPRESSED_BLOCK_WIDTH :: 0x82B1
TEXTURE_COMPRESSED_BLOCK_HEIGHT :: 0x82B2
TEXTURE_COMPRESSED_BLOCK_SIZE :: 0x82B3
CLEAR_BUFFER :: 0x82B4
TEXTURE_VIEW :: 0x82B5
VIEW_COMPATIBILITY_CLASS :: 0x82B6
FULL_SUPPORT :: 0x82B7
CAVEAT_SUPPORT :: 0x82B8
IMAGE_CLASS_4_X_32 :: 0x82B9
IMAGE_CLASS_2_X_32 :: 0x82BA
IMAGE_CLASS_1_X_32 :: 0x82BB
IMAGE_CLASS_4_X_16 :: 0x82BC
IMAGE_CLASS_2_X_16 :: 0x82BD
IMAGE_CLASS_1_X_16 :: 0x82BE
IMAGE_CLASS_4_X_8 :: 0x82BF
IMAGE_CLASS_2_X_8 :: 0x82C0
IMAGE_CLASS_1_X_8 :: 0x82C1
IMAGE_CLASS_11_11_10 :: 0x82C2
IMAGE_CLASS_10_10_10_2 :: 0x82C3
VIEW_CLASS_128_BITS :: 0x82C4
VIEW_CLASS_96_BITS :: 0x82C5
VIEW_CLASS_64_BITS :: 0x82C6
VIEW_CLASS_48_BITS :: 0x82C7
VIEW_CLASS_32_BITS :: 0x82C8
VIEW_CLASS_24_BITS :: 0x82C9
VIEW_CLASS_16_BITS :: 0x82CA
VIEW_CLASS_8_BITS :: 0x82CB
VIEW_CLASS_S3TC_DXT1_RGB :: 0x82CC
VIEW_CLASS_S3TC_DXT1_RGBA :: 0x82CD
VIEW_CLASS_S3TC_DXT3_RGBA :: 0x82CE
VIEW_CLASS_S3TC_DXT5_RGBA :: 0x82CF
VIEW_CLASS_RGTC1_RED :: 0x82D0
VIEW_CLASS_RGTC2_RG :: 0x82D1
VIEW_CLASS_BPTC_UNORM :: 0x82D2
VIEW_CLASS_BPTC_FLOAT :: 0x82D3
UNIFORM :: 0x92E1
UNIFORM_BLOCK :: 0x92E2
PROGRAM_INPUT :: 0x92E3
PROGRAM_OUTPUT :: 0x92E4
BUFFER_VARIABLE :: 0x92E5
SHADER_STORAGE_BLOCK :: 0x92E6
VERTEX_SUBROUTINE :: 0x92E8
TESS_CONTROL_SUBROUTINE :: 0x92E9
TESS_EVALUATION_SUBROUTINE :: 0x92EA
GEOMETRY_SUBROUTINE :: 0x92EB
FRAGMENT_SUBROUTINE :: 0x92EC
COMPUTE_SUBROUTINE :: 0x92ED
VERTEX_SUBROUTINE_UNIFORM :: 0x92EE
TESS_CONTROL_SUBROUTINE_UNIFORM :: 0x92EF
TESS_EVALUATION_SUBROUTINE_UNIFORM :: 0x92F0
GEOMETRY_SUBROUTINE_UNIFORM :: 0x92F1
FRAGMENT_SUBROUTINE_UNIFORM :: 0x92F2
COMPUTE_SUBROUTINE_UNIFORM :: 0x92F3
TRANSFORM_FEEDBACK_VARYING :: 0x92F4
ACTIVE_RESOURCES :: 0x92F5
MAX_NAME_LENGTH :: 0x92F6
MAX_NUM_ACTIVE_VARIABLES :: 0x92F7
MAX_NUM_COMPATIBLE_SUBROUTINES :: 0x92F8
NAME_LENGTH :: 0x92F9
TYPE :: 0x92FA
ARRAY_SIZE :: 0x92FB
OFFSET :: 0x92FC
BLOCK_INDEX :: 0x92FD
ARRAY_STRIDE :: 0x92FE
MATRIX_STRIDE :: 0x92FF
IS_ROW_MAJOR :: 0x9300
ATOMIC_COUNTER_BUFFER_INDEX :: 0x9301
BUFFER_BINDING :: 0x9302
BUFFER_DATA_SIZE :: 0x9303
NUM_ACTIVE_VARIABLES :: 0x9304
ACTIVE_VARIABLES :: 0x9305
REFERENCED_BY_VERTEX_SHADER :: 0x9306
REFERENCED_BY_TESS_CONTROL_SHADER :: 0x9307
REFERENCED_BY_TESS_EVALUATION_SHADER :: 0x9308
REFERENCED_BY_GEOMETRY_SHADER :: 0x9309
REFERENCED_BY_FRAGMENT_SHADER :: 0x930A
REFERENCED_BY_COMPUTE_SHADER :: 0x930B
TOP_LEVEL_ARRAY_SIZE :: 0x930C
TOP_LEVEL_ARRAY_STRIDE :: 0x930D
LOCATION :: 0x930E
LOCATION_INDEX :: 0x930F
IS_PER_PATCH :: 0x92E7
SHADER_STORAGE_BUFFER :: 0x90D2
SHADER_STORAGE_BUFFER_BINDING :: 0x90D3
SHADER_STORAGE_BUFFER_START :: 0x90D4
SHADER_STORAGE_BUFFER_SIZE :: 0x90D5
MAX_VERTEX_SHADER_STORAGE_BLOCKS :: 0x90D6
MAX_GEOMETRY_SHADER_STORAGE_BLOCKS :: 0x90D7
MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS :: 0x90D8
MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS :: 0x90D9
MAX_FRAGMENT_SHADER_STORAGE_BLOCKS :: 0x90DA
MAX_COMPUTE_SHADER_STORAGE_BLOCKS :: 0x90DB
MAX_COMBINED_SHADER_STORAGE_BLOCKS :: 0x90DC
MAX_SHADER_STORAGE_BUFFER_BINDINGS :: 0x90DD
MAX_SHADER_STORAGE_BLOCK_SIZE :: 0x90DE
SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT :: 0x90DF
SHADER_STORAGE_BARRIER_BIT :: 0x00002000
MAX_COMBINED_SHADER_OUTPUT_RESOURCES :: 0x8F39
DEPTH_STENCIL_TEXTURE_MODE :: 0x90EA
TEXTURE_BUFFER_OFFSET :: 0x919D
TEXTURE_BUFFER_SIZE :: 0x919E
TEXTURE_BUFFER_OFFSET_ALIGNMENT :: 0x919F
TEXTURE_VIEW_MIN_LEVEL :: 0x82DB
TEXTURE_VIEW_NUM_LEVELS :: 0x82DC
TEXTURE_VIEW_MIN_LAYER :: 0x82DD
TEXTURE_VIEW_NUM_LAYERS :: 0x82DE
TEXTURE_IMMUTABLE_LEVELS :: 0x82DF
VERTEX_ATTRIB_BINDING :: 0x82D4
VERTEX_ATTRIB_RELATIVE_OFFSET :: 0x82D5
VERTEX_BINDING_DIVISOR :: 0x82D6
VERTEX_BINDING_OFFSET :: 0x82D7
VERTEX_BINDING_STRIDE :: 0x82D8
MAX_VERTEX_ATTRIB_RELATIVE_OFFSET :: 0x82D9
MAX_VERTEX_ATTRIB_BINDINGS :: 0x82DA
VERTEX_BINDING_BUFFER :: 0x8F4F
STACK_UNDERFLOW :: 0x0504
STACK_OVERFLOW :: 0x0503
// GL_VERSION_4_4
MAX_VERTEX_ATTRIB_STRIDE :: 0x82E5
PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED :: 0x8221
TEXTURE_BUFFER_BINDING :: 0x8C2A
MAP_PERSISTENT_BIT :: 0x0040
MAP_COHERENT_BIT :: 0x0080
DYNAMIC_STORAGE_BIT :: 0x0100
CLIENT_STORAGE_BIT :: 0x0200
CLIENT_MAPPED_BUFFER_BARRIER_BIT :: 0x00004000
BUFFER_IMMUTABLE_STORAGE :: 0x821F
BUFFER_STORAGE_FLAGS :: 0x8220
CLEAR_TEXTURE :: 0x9365
LOCATION_COMPONENT :: 0x934A
TRANSFORM_FEEDBACK_BUFFER_INDEX :: 0x934B
TRANSFORM_FEEDBACK_BUFFER_STRIDE :: 0x934C
QUERY_BUFFER :: 0x9192
QUERY_BUFFER_BARRIER_BIT :: 0x00008000
QUERY_BUFFER_BINDING :: 0x9193
QUERY_RESULT_NO_WAIT :: 0x9194
MIRROR_CLAMP_TO_EDGE :: 0x8743
// GL_VERSION_4_5
CONTEXT_LOST :: 0x0507
NEGATIVE_ONE_TO_ONE :: 0x935E
ZERO_TO_ONE :: 0x935F
CLIP_ORIGIN :: 0x935C
CLIP_DEPTH_MODE :: 0x935D
QUERY_WAIT_INVERTED :: 0x8E17
QUERY_NO_WAIT_INVERTED :: 0x8E18
QUERY_BY_REGION_WAIT_INVERTED :: 0x8E19
QUERY_BY_REGION_NO_WAIT_INVERTED :: 0x8E1A
MAX_CULL_DISTANCES :: 0x82F9
MAX_COMBINED_CLIP_AND_CULL_DISTANCES :: 0x82FA
TEXTURE_TARGET :: 0x1006
QUERY_TARGET :: 0x82EA
GUILTY_CONTEXT_RESET :: 0x8253
INNOCENT_CONTEXT_RESET :: 0x8254
UNKNOWN_CONTEXT_RESET :: 0x8255
RESET_NOTIFICATION_STRATEGY :: 0x8256
LOSE_CONTEXT_ON_RESET :: 0x8252
NO_RESET_NOTIFICATION :: 0x8261
CONTEXT_FLAG_ROBUST_ACCESS_BIT :: 0x00000004
CONTEXT_RELEASE_BEHAVIOR :: 0x82FB
CONTEXT_RELEASE_BEHAVIOR_FLUSH :: 0x82FC
// GL_VERSION_4_6
SHADER_BINARY_FORMAT_SPIR_V :: 0x9551
SPIR_V_BINARY :: 0x9552
PARAMETER_BUFFER :: 0x80EE
PARAMETER_BUFFER_BINDING :: 0x80EF
CONTEXT_FLAG_NO_ERROR_BIT :: 0x00000008
VERTICES_SUBMITTED :: 0x82EE
PRIMITIVES_SUBMITTED :: 0x82EF
VERTEX_SHADER_INVOCATIONS :: 0x82F0
TESS_CONTROL_SHADER_PATCHES :: 0x82F1
TESS_EVALUATION_SHADER_INVOCATIONS :: 0x82F2
GEOMETRY_SHADER_PRIMITIVES_EMITTED :: 0x82F3
FRAGMENT_SHADER_INVOCATIONS :: 0x82F4
COMPUTE_SHADER_INVOCATIONS :: 0x82F5
CLIPPING_INPUT_PRIMITIVES :: 0x82F6
CLIPPING_OUTPUT_PRIMITIVES :: 0x82F7
POLYGON_OFFSET_CLAMP :: 0x8E1B
SPIR_V_EXTENSIONS :: 0x9553
NUM_SPIR_V_EXTENSIONS :: 0x9554
TEXTURE_MAX_ANISOTROPY :: 0x84FE
MAX_TEXTURE_MAX_ANISOTROPY :: 0x84FF
TRANSFORM_FEEDBACK_OVERFLOW :: 0x82EC
TRANSFORM_FEEDBACK_STREAM_OVERFLOW :: 0x82ED

// GL_VERSION_1_0
impl_CullFace: proc "c" (mode: Enum)
impl_FrontFace: proc "c" (mode: Enum)
impl_Hint: proc "c" (target: Enum, mode: Enum)
impl_LineWidth: proc "c" (width: float)
impl_PointSize: proc "c" (size: float)
impl_PolygonMode: proc "c" (face: Enum, mode: Enum)
impl_Scissor: proc "c" (x: int, y: int, width: sizei, height: sizei)
impl_TexParameterf: proc "c" (target: Enum, pname: Enum, param: float)
impl_TexParameterfv: proc "c" (target: Enum, pname: Enum, params: [^]float)
impl_TexParameteri: proc "c" (target: Enum, pname: Enum, param: int)
impl_TexParameteriv: proc "c" (target: Enum, pname: Enum, params: [^]int)
impl_TexImage1D: proc "c" (target: Enum, level: int, internalformat: int, width: sizei, border: int, format: Enum, type: Enum, pixels: rawptr)
impl_TexImage2D: proc "c" (target: Enum, level: int, internalformat: int, width: sizei, height: sizei, border: int, format: Enum, type: Enum, pixels: rawptr)
impl_DrawBuffer: proc "c" (buf: Enum)
impl_Clear: proc "c" (mask: bitfield)
impl_ClearColor: proc "c" (red: float, green: float, blue: float, alpha: float)
impl_ClearStencil: proc "c" (s: int)
impl_ClearDepth: proc "c" (depth: double)
impl_StencilMask: proc "c" (mask: uint)
impl_ColorMask: proc "c" (red: boolean, green: boolean, blue: boolean, alpha: boolean)
impl_DepthMask: proc "c" (flag: boolean)
impl_Disable: proc "c" (cap: Enum)
impl_Enable: proc "c" (cap: Enum)
impl_Finish: proc "c" ()
impl_Flush: proc "c" ()
impl_BlendFunc: proc "c" (sfactor: Enum, dfactor: Enum)
impl_LogicOp: proc "c" (opcode: Enum)
impl_StencilFunc: proc "c" (func: Enum, ref: int, mask: uint)
impl_StencilOp: proc "c" (fail: Enum, zfail: Enum, zpass: Enum)
impl_DepthFunc: proc "c" (func: Enum)
impl_PixelStoref: proc "c" (pname: Enum, param: float)
impl_PixelStorei: proc "c" (pname: Enum, param: int)
impl_ReadBuffer: proc "c" (src: Enum)
impl_ReadPixels: proc "c" (x: int, y: int, width: sizei, height: sizei, format: Enum, type: Enum, pixels: rawptr)
impl_GetBooleanv: proc "c" (pname: Enum, data: [^]boolean)
impl_GetDoublev: proc "c" (pname: Enum, data: [^]double)
impl_GetError: proc "c" () -> Enum
impl_GetFloatv: proc "c" (pname: Enum, data: [^]float)
impl_GetIntegerv: proc "c" (pname: Enum, data: [^]int)
impl_GetString: proc "c" (name: Enum) -> cstring
impl_GetTexImage: proc "c" (target: Enum, level: int, format: Enum, type: Enum, pixels: rawptr)
impl_GetTexParameterfv: proc "c" (target: Enum, pname: Enum, params: [^]float)
impl_GetTexParameteriv: proc "c" (target: Enum, pname: Enum, params: [^]int)
impl_GetTexLevelParameterfv: proc "c" (target: Enum, level: int, pname: Enum, params: [^]float)
impl_GetTexLevelParameteriv: proc "c" (target: Enum, level: int, pname: Enum, params: [^]int)
impl_IsEnabled: proc "c" (cap: Enum) -> boolean
impl_DepthRange: proc "c" (n: double, f: double)
impl_Viewport: proc "c" (x: int, y: int, width: sizei, height: sizei)
// GL_VERSION_1_1
impl_DrawArrays: proc "c" (mode: Enum, first: int, count: sizei)
impl_DrawElements: proc "c" (mode: Enum, count: sizei, type: Enum, indices: rawptr)
impl_PolygonOffset: proc "c" (factor: float, units: float)
impl_CopyTexImage1D: proc "c" (target: Enum, level: int, internalformat: Enum, x: int, y: int, width: sizei, border: int)
impl_CopyTexImage2D: proc "c" (target: Enum, level: int, internalformat: Enum, x: int, y: int, width: sizei, height: sizei, border: int)
impl_CopyTexSubImage1D: proc "c" (target: Enum, level: int, xoffset: int, x: int, y: int, width: sizei)
impl_CopyTexSubImage2D: proc "c" (target: Enum, level: int, xoffset: int, yoffset: int, x: int, y: int, width: sizei, height: sizei)
impl_TexSubImage1D: proc "c" (target: Enum, level: int, xoffset: int, width: sizei, format: Enum, type: Enum, pixels: rawptr)
impl_TexSubImage2D: proc "c" (target: Enum, level: int, xoffset: int, yoffset: int, width: sizei, height: sizei, format: Enum, type: Enum, pixels: rawptr)
impl_BindTexture: proc "c" (target: Enum, texture: uint)
impl_DeleteTextures: proc "c" (n: sizei, textures: [^]uint)
impl_GenTextures: proc "c" (n: sizei, textures: [^]uint)
impl_IsTexture: proc "c" (texture: uint) -> boolean
// GL_VERSION_1_2
impl_DrawRangeElements: proc "c" (mode: Enum, start: uint, end: uint, count: sizei, type: Enum, indices: rawptr)
impl_TexImage3D: proc "c" (target: Enum, level: int, internalformat: int, width: sizei, height: sizei, depth: sizei, border: int, format: Enum, type: Enum, pixels: rawptr)
impl_TexSubImage3D: proc "c" (target: Enum, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: Enum, type: Enum, pixels: rawptr)
impl_CopyTexSubImage3D: proc "c" (target: Enum, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: sizei, height: sizei)
// GL_VERSION_1_3
impl_ActiveTexture: proc "c" (texture: Enum)
impl_SampleCoverage: proc "c" (value: float, invert: boolean)
impl_CompressedTexImage3D: proc "c" (target: Enum, level: int, internalformat: Enum, width: sizei, height: sizei, depth: sizei, border: int, imageSize: sizei, data: rawptr)
impl_CompressedTexImage2D: proc "c" (target: Enum, level: int, internalformat: Enum, width: sizei, height: sizei, border: int, imageSize: sizei, data: rawptr)
impl_CompressedTexImage1D: proc "c" (target: Enum, level: int, internalformat: Enum, width: sizei, border: int, imageSize: sizei, data: rawptr)
impl_CompressedTexSubImage3D: proc "c" (target: Enum, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: Enum, imageSize: sizei, data: rawptr)
impl_CompressedTexSubImage2D: proc "c" (target: Enum, level: int, xoffset: int, yoffset: int, width: sizei, height: sizei, format: Enum, imageSize: sizei, data: rawptr)
impl_CompressedTexSubImage1D: proc "c" (target: Enum, level: int, xoffset: int, width: sizei, format: Enum, imageSize: sizei, data: rawptr)
impl_GetCompressedTexImage: proc "c" (target: Enum, level: int, img: rawptr)
// GL_VERSION_1_4
impl_BlendFuncSeparate: proc "c" (sfactorRGB: Enum, dfactorRGB: Enum, sfactorAlpha: Enum, dfactorAlpha: Enum)
impl_MultiDrawArrays: proc "c" (mode: Enum, first: [^]int, count: [^]sizei, drawcount: sizei)
impl_MultiDrawElements: proc "c" (mode: Enum, count: [^]sizei, type: Enum, indices: [^]rawptr, drawcount: sizei)
impl_PointParameterf: proc "c" (pname: Enum, param: float)
impl_PointParameterfv: proc "c" (pname: Enum, params: [^]float)
impl_PointParameteri: proc "c" (pname: Enum, param: int)
impl_PointParameteriv: proc "c" (pname: Enum, params: [^]int)
impl_BlendColor: proc "c" (red: float, green: float, blue: float, alpha: float)
impl_BlendEquation: proc "c" (mode: Enum)
// GL_VERSION_1_5
impl_GenQueries: proc "c" (n: sizei, ids: [^]uint)
impl_DeleteQueries: proc "c" (n: sizei, ids: [^]uint)
impl_IsQuery: proc "c" (id: uint) -> boolean
impl_BeginQuery: proc "c" (target: Enum, id: uint)
impl_EndQuery: proc "c" (target: Enum)
impl_GetQueryiv: proc "c" (target: Enum, pname: Enum, params: [^]int)
impl_GetQueryObjectiv: proc "c" (id: uint, pname: Enum, params: [^]int)
impl_GetQueryObjectuiv: proc "c" (id: uint, pname: Enum, params: [^]uint)
impl_BindBuffer: proc "c" (target: Enum, buffer: uint)
impl_DeleteBuffers: proc "c" (n: sizei, buffers: [^]uint)
impl_GenBuffers: proc "c" (n: sizei, buffers: [^]uint)
impl_IsBuffer: proc "c" (buffer: uint) -> boolean
impl_BufferData: proc "c" (target: Enum, size: sizeiptr, data: rawptr, usage: Enum)
impl_BufferSubData: proc "c" (target: Enum, offset: intptr, size: sizeiptr, data: rawptr)
impl_GetBufferSubData: proc "c" (target: Enum, offset: intptr, size: sizeiptr, data: rawptr)
impl_MapBuffer: proc "c" (target: Enum, access: Enum) -> rawptr
impl_UnmapBuffer: proc "c" (target: Enum) -> boolean
impl_GetBufferParameteriv: proc "c" (target: Enum, pname: Enum, params: [^]int)
impl_GetBufferPointerv: proc "c" (target: Enum, pname: Enum, params: [^]rawptr)
// GL_VERSION_2_0
impl_BlendEquationSeparate: proc "c" (modeRGB: Enum, modeAlpha: Enum)
impl_DrawBuffers: proc "c" (n: sizei, bufs: [^]Enum)
impl_StencilOpSeparate: proc "c" (face: Enum, sfail: Enum, dpfail: Enum, dppass: Enum)
impl_StencilFuncSeparate: proc "c" (face: Enum, func: Enum, ref: int, mask: uint)
impl_StencilMaskSeparate: proc "c" (face: Enum, mask: uint)
impl_AttachShader: proc "c" (program: uint, shader: uint)
impl_BindAttribLocation: proc "c" (program: uint, index: uint, name: cstring)
impl_CompileShader: proc "c" (shader: uint)
impl_CreateProgram: proc "c" () -> uint
impl_CreateShader: proc "c" (type: Enum) -> uint
impl_DeleteProgram: proc "c" (program: uint)
impl_DeleteShader: proc "c" (shader: uint)
impl_DetachShader: proc "c" (program: uint, shader: uint)
impl_DisableVertexAttribArray: proc "c" (index: uint)
impl_EnableVertexAttribArray: proc "c" (index: uint)
impl_GetActiveAttrib: proc "c" (program: uint, index: uint, bufSize: sizei, length: [^]sizei, size: [^]int, type: [^]Enum, name: [^]char)
impl_GetActiveUniform: proc "c" (program: uint, index: uint, bufSize: sizei, length: [^]sizei, size: [^]int, type: [^]Enum, name: [^]char)
impl_GetAttachedShaders: proc "c" (program: uint, maxCount: sizei, count: [^]sizei, shaders: [^]uint)
impl_GetAttribLocation: proc "c" (program: uint, name: cstring) -> int
impl_GetProgramiv: proc "c" (program: uint, pname: Enum, params: [^]int)
impl_GetProgramInfoLog: proc "c" (program: uint, bufSize: sizei, length: [^]sizei, infoLog: [^]char)
impl_GetShaderiv: proc "c" (shader: uint, pname: Enum, params: [^]int)
impl_GetShaderInfoLog: proc "c" (shader: uint, bufSize: sizei, length: [^]sizei, infoLog: [^]char)
impl_GetShaderSource: proc "c" (shader: uint, bufSize: sizei, length: [^]sizei, source: [^]char)
impl_GetUniformLocation: proc "c" (program: uint, name: cstring) -> int
impl_GetUniformfv: proc "c" (program: uint, location: int, params: [^]float)
impl_GetUniformiv: proc "c" (program: uint, location: int, params: [^]int)
impl_GetVertexAttribdv: proc "c" (index: uint, pname: Enum, params: [^]double)
impl_GetVertexAttribfv: proc "c" (index: uint, pname: Enum, params: [^]float)
impl_GetVertexAttribiv: proc "c" (index: uint, pname: Enum, params: [^]int)
impl_GetVertexAttribPointerv: proc "c" (index: uint, pname: Enum, pointer: [^]rawptr)
impl_IsProgram: proc "c" (program: uint) -> boolean
impl_IsShader: proc "c" (shader: uint) -> boolean
impl_LinkProgram: proc "c" (program: uint)
impl_ShaderSource: proc "c" (shader: uint, count: sizei, string: [^]cstring, length: [^]int)
impl_UseProgram: proc "c" (program: uint)
impl_Uniform1f: proc "c" (location: int, v0: float)
impl_Uniform2f: proc "c" (location: int, v0: float, v1: float)
impl_Uniform3f: proc "c" (location: int, v0: float, v1: float, v2: float)
impl_Uniform4f: proc "c" (location: int, v0: float, v1: float, v2: float, v3: float)
impl_Uniform1i: proc "c" (location: int, v0: int)
impl_Uniform2i: proc "c" (location: int, v0: int, v1: int)
impl_Uniform3i: proc "c" (location: int, v0: int, v1: int, v2: int)
impl_Uniform4i: proc "c" (location: int, v0: int, v1: int, v2: int, v3: int)
impl_Uniform1fv: proc "c" (location: int, count: sizei, value: [^]float)
impl_Uniform2fv: proc "c" (location: int, count: sizei, value: [^]float)
impl_Uniform3fv: proc "c" (location: int, count: sizei, value: [^]float)
impl_Uniform4fv: proc "c" (location: int, count: sizei, value: [^]float)
impl_Uniform1iv: proc "c" (location: int, count: sizei, value: [^]int)
impl_Uniform2iv: proc "c" (location: int, count: sizei, value: [^]int)
impl_Uniform3iv: proc "c" (location: int, count: sizei, value: [^]int)
impl_Uniform4iv: proc "c" (location: int, count: sizei, value: [^]int)
impl_UniformMatrix2fv: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]float)
impl_UniformMatrix3fv: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]float)
impl_UniformMatrix4fv: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]float)
impl_ValidateProgram: proc "c" (program: uint)
impl_VertexAttrib1d: proc "c" (index: uint, x: double)
impl_VertexAttrib1dv: proc "c" (index: uint, v: [^]double)
impl_VertexAttrib1f: proc "c" (index: uint, x: float)
impl_VertexAttrib1fv: proc "c" (index: uint, v: [^]float)
impl_VertexAttrib1s: proc "c" (index: uint, x: short)
impl_VertexAttrib1sv: proc "c" (index: uint, v: [^]short)
impl_VertexAttrib2d: proc "c" (index: uint, x: double, y: double)
impl_VertexAttrib2dv: proc "c" (index: uint, v: [^]double)
impl_VertexAttrib2f: proc "c" (index: uint, x: float, y: float)
impl_VertexAttrib2fv: proc "c" (index: uint, v: [^]float)
impl_VertexAttrib2s: proc "c" (index: uint, x: short, y: short)
impl_VertexAttrib2sv: proc "c" (index: uint, v: [^]short)
impl_VertexAttrib3d: proc "c" (index: uint, x: double, y: double, z: double)
impl_VertexAttrib3dv: proc "c" (index: uint, v: [^]double)
impl_VertexAttrib3f: proc "c" (index: uint, x: float, y: float, z: float)
impl_VertexAttrib3fv: proc "c" (index: uint, v: [^]float)
impl_VertexAttrib3s: proc "c" (index: uint, x: short, y: short, z: short)
impl_VertexAttrib3sv: proc "c" (index: uint, v: [^]short)
impl_VertexAttrib4Nbv: proc "c" (index: uint, v: [^]byte)
impl_VertexAttrib4Niv: proc "c" (index: uint, v: [^]int)
impl_VertexAttrib4Nsv: proc "c" (index: uint, v: [^]short)
impl_VertexAttrib4Nub: proc "c" (index: uint, x: ubyte, y: ubyte, z: ubyte, w: ubyte)
impl_VertexAttrib4Nubv: proc "c" (index: uint, v: cstring)
impl_VertexAttrib4Nuiv: proc "c" (index: uint, v: [^]uint)
impl_VertexAttrib4Nusv: proc "c" (index: uint, v: [^]ushort)
impl_VertexAttrib4bv: proc "c" (index: uint, v: [^]byte)
impl_VertexAttrib4d: proc "c" (index: uint, x: double, y: double, z: double, w: double)
impl_VertexAttrib4dv: proc "c" (index: uint, v: [^]double)
impl_VertexAttrib4f: proc "c" (index: uint, x: float, y: float, z: float, w: float)
impl_VertexAttrib4fv: proc "c" (index: uint, v: [^]float)
impl_VertexAttrib4iv: proc "c" (index: uint, v: [^]int)
impl_VertexAttrib4s: proc "c" (index: uint, x: short, y: short, z: short, w: short)
impl_VertexAttrib4sv: proc "c" (index: uint, v: [^]short)
impl_VertexAttrib4ubv: proc "c" (index: uint, v: cstring)
impl_VertexAttrib4uiv: proc "c" (index: uint, v: [^]uint)
impl_VertexAttrib4usv: proc "c" (index: uint, v: [^]ushort)
impl_VertexAttribPointer: proc "c" (index: uint, size: int, type: Enum, normalized: boolean, stride: sizei, pointer: uintptr)
// GL_VERSION_2_1
impl_UniformMatrix2x3fv: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]float)
impl_UniformMatrix3x2fv: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]float)
impl_UniformMatrix2x4fv: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]float)
impl_UniformMatrix4x2fv: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]float)
impl_UniformMatrix3x4fv: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]float)
impl_UniformMatrix4x3fv: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]float)
// GL_VERSION_3_0
impl_ColorMaski: proc "c" (index: uint, r: boolean, g: boolean, b: boolean, a: boolean)
impl_GetBooleani_v: proc "c" (target: Enum, index: uint, data: [^]boolean)
impl_GetIntegeri_v: proc "c" (target: Enum, index: uint, data: [^]int)
impl_Enablei: proc "c" (target: Enum, index: uint)
impl_Disablei: proc "c" (target: Enum, index: uint)
impl_IsEnabledi: proc "c" (target: Enum, index: uint) -> boolean
impl_BeginTransformFeedback: proc "c" (primitiveMode: Enum)
impl_EndTransformFeedback: proc "c" ()
impl_BindBufferRange: proc "c" (target: Enum, index: uint, buffer: uint, offset: intptr, size: sizeiptr)
impl_BindBufferBase: proc "c" (target: Enum, index: uint, buffer: uint)
impl_TransformFeedbackVaryings: proc "c" (program: uint, count: sizei, varyings: [^]cstring, bufferMode: Enum)
impl_GetTransformFeedbackVarying: proc "c" (program: uint, index: uint, bufSize: sizei, length: [^]sizei, size: [^]sizei, type: [^]Enum, name: [^]char)
impl_ClampColor: proc "c" (target: Enum, clamp: Enum)
impl_BeginConditionalRender: proc "c" (id: uint, mode: Enum)
impl_EndConditionalRender: proc "c" ()
impl_VertexAttribIPointer: proc "c" (index: uint, size: int, type: Enum, stride: sizei, pointer: rawptr)
impl_GetVertexAttribIiv: proc "c" (index: uint, pname: Enum, params: [^]int)
impl_GetVertexAttribIuiv: proc "c" (index: uint, pname: Enum, params: [^]uint)
impl_VertexAttribI1i: proc "c" (index: uint, x: int)
impl_VertexAttribI2i: proc "c" (index: uint, x: int, y: int)
impl_VertexAttribI3i: proc "c" (index: uint, x: int, y: int, z: int)
impl_VertexAttribI4i: proc "c" (index: uint, x: int, y: int, z: int, w: int)
impl_VertexAttribI1ui: proc "c" (index: uint, x: uint)
impl_VertexAttribI2ui: proc "c" (index: uint, x: uint, y: uint)
impl_VertexAttribI3ui: proc "c" (index: uint, x: uint, y: uint, z: uint)
impl_VertexAttribI4ui: proc "c" (index: uint, x: uint, y: uint, z: uint, w: uint)
impl_VertexAttribI1iv: proc "c" (index: uint, v: [^]int)
impl_VertexAttribI2iv: proc "c" (index: uint, v: [^]int)
impl_VertexAttribI3iv: proc "c" (index: uint, v: [^]int)
impl_VertexAttribI4iv: proc "c" (index: uint, v: [^]int)
impl_VertexAttribI1uiv: proc "c" (index: uint, v: [^]uint)
impl_VertexAttribI2uiv: proc "c" (index: uint, v: [^]uint)
impl_VertexAttribI3uiv: proc "c" (index: uint, v: [^]uint)
impl_VertexAttribI4uiv: proc "c" (index: uint, v: [^]uint)
impl_VertexAttribI4bv: proc "c" (index: uint, v: [^]byte)
impl_VertexAttribI4sv: proc "c" (index: uint, v: [^]short)
impl_VertexAttribI4ubv: proc "c" (index: uint, v: cstring)
impl_VertexAttribI4usv: proc "c" (index: uint, v: [^]ushort)
impl_GetUniformuiv: proc "c" (program: uint, location: int, params: [^]uint)
impl_BindFragDataLocation: proc "c" (program: uint, color: uint, name: cstring)
impl_GetFragDataLocation: proc "c" (program: uint, name: cstring) -> int
impl_Uniform1ui: proc "c" (location: int, v0: uint)
impl_Uniform2ui: proc "c" (location: int, v0: uint, v1: uint)
impl_Uniform3ui: proc "c" (location: int, v0: uint, v1: uint, v2: uint)
impl_Uniform4ui: proc "c" (location: int, v0: uint, v1: uint, v2: uint, v3: uint)
impl_Uniform1uiv: proc "c" (location: int, count: sizei, value: [^]uint)
impl_Uniform2uiv: proc "c" (location: int, count: sizei, value: [^]uint)
impl_Uniform3uiv: proc "c" (location: int, count: sizei, value: [^]uint)
impl_Uniform4uiv: proc "c" (location: int, count: sizei, value: [^]uint)
impl_TexParameterIiv: proc "c" (target: Enum, pname: Enum, params: [^]int)
impl_TexParameterIuiv: proc "c" (target: Enum, pname: Enum, params: [^]uint)
impl_GetTexParameterIiv: proc "c" (target: Enum, pname: Enum, params: [^]int)
impl_GetTexParameterIuiv: proc "c" (target: Enum, pname: Enum, params: [^]uint)
impl_ClearBufferiv: proc "c" (buffer: Enum, drawbuffer: int, value: [^]int)
impl_ClearBufferuiv: proc "c" (buffer: Enum, drawbuffer: int, value: [^]uint)
impl_ClearBufferfv: proc "c" (buffer: Enum, drawbuffer: int, value: [^]float)
impl_ClearBufferfi: proc "c" (buffer: Enum, drawbuffer: int, depth: float, stencil: int)
impl_GetStringi: proc "c" (name: Enum, index: uint) -> cstring
impl_IsRenderbuffer: proc "c" (renderbuffer: uint) -> boolean
impl_BindRenderbuffer: proc "c" (target: Enum, renderbuffer: uint)
impl_DeleteRenderbuffers: proc "c" (n: sizei, renderbuffers: [^]uint)
impl_GenRenderbuffers: proc "c" (n: sizei, renderbuffers: [^]uint)
impl_RenderbufferStorage: proc "c" (target: Enum, internalformat: Enum, width: sizei, height: sizei)
impl_GetRenderbufferParameteriv: proc "c" (target: Enum, pname: Enum, params: [^]int)
impl_IsFramebuffer: proc "c" (framebuffer: uint) -> boolean
impl_BindFramebuffer: proc "c" (target: Enum, framebuffer: uint)
impl_DeleteFramebuffers: proc "c" (n: sizei, framebuffers: [^]uint)
impl_GenFramebuffers: proc "c" (n: sizei, framebuffers: [^]uint)
impl_CheckFramebufferStatus: proc "c" (target: Enum) -> Enum
impl_FramebufferTexture1D: proc "c" (target: Enum, attachment: Enum, textarget: Enum, texture: uint, level: int)
impl_FramebufferTexture2D: proc "c" (target: Enum, attachment: Enum, textarget: Enum, texture: uint, level: int)
impl_FramebufferTexture3D: proc "c" (target: Enum, attachment: Enum, textarget: Enum, texture: uint, level: int, zoffset: int)
impl_FramebufferRenderbuffer: proc "c" (target: Enum, attachment: Enum, renderbuffertarget: Enum, renderbuffer: uint)
impl_GetFramebufferAttachmentParameteriv: proc "c" (target: Enum, attachment: Enum, pname: Enum, params: [^]int)
impl_GenerateMipmap: proc "c" (target: Enum)
impl_BlitFramebuffer: proc "c" (srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: bitfield, filter: Enum)
impl_RenderbufferStorageMultisample: proc "c" (target: Enum, samples: sizei, internalformat: Enum, width: sizei, height: sizei)
impl_FramebufferTextureLayer: proc "c" (target: Enum, attachment: Enum, texture: uint, level: int, layer: int)
impl_MapBufferRange: proc "c" (target: Enum, offset: intptr, length: sizeiptr, access: bitfield) -> rawptr
impl_FlushMappedBufferRange: proc "c" (target: Enum, offset: intptr, length: sizeiptr)
impl_BindVertexArray: proc "c" (array: uint)
impl_DeleteVertexArrays: proc "c" (n: sizei, arrays: [^]uint)
impl_GenVertexArrays: proc "c" (n: sizei, arrays: [^]uint)
impl_IsVertexArray: proc "c" (array: uint) -> boolean
// GL_VERSION_3_1
impl_DrawArraysInstanced: proc "c" (mode: Enum, first: int, count: sizei, instancecount: sizei)
impl_DrawElementsInstanced: proc "c" (mode: Enum, count: sizei, type: Enum, indices: rawptr, instancecount: sizei)
impl_TexBuffer: proc "c" (target: Enum, internalformat: Enum, buffer: uint)
impl_PrimitiveRestartIndex: proc "c" (index: uint)
impl_CopyBufferSubData: proc "c" (readTarget: Enum, writeTarget: Enum, readOffset: intptr, writeOffset: intptr, size: sizeiptr)
impl_GetUniformIndices: proc "c" (program: uint, uniformCount: sizei, uniformNames: [^]cstring, uniformIndices: [^]uint)
impl_GetActiveUniformsiv: proc "c" (program: uint, uniformCount: sizei, uniformIndices: [^]uint, pname: Enum, params: [^]int)
impl_GetActiveUniformName: proc "c" (program: uint, uniformIndex: uint, bufSize: sizei, length: [^]sizei, uniformName: [^]char)
impl_GetUniformBlockIndex: proc "c" (program: uint, uniformBlockName: cstring) -> uint
impl_GetActiveUniformBlockiv: proc "c" (program: uint, uniformBlockIndex: uint, pname: Enum, params: [^]int)
impl_GetActiveUniformBlockName: proc "c" (program: uint, uniformBlockIndex: uint, bufSize: sizei, length: [^]sizei, uniformBlockName: [^]char)
impl_UniformBlockBinding: proc "c" (program: uint, uniformBlockIndex: uint, uniformBlockBinding: uint)
// GL_VERSION_3_2
impl_DrawElementsBaseVertex: proc "c" (mode: Enum, count: sizei, type: Enum, indices: rawptr, basevertex: int)
impl_DrawRangeElementsBaseVertex: proc "c" (mode: Enum, start: uint, end: uint, count: sizei, type: Enum, indices: rawptr, basevertex: int)
impl_DrawElementsInstancedBaseVertex: proc "c" (mode: Enum, count: sizei, type: Enum, indices: rawptr, instancecount: sizei, basevertex: int)
impl_MultiDrawElementsBaseVertex: proc "c" (mode: Enum, count: [^]sizei, type: Enum, indices: [^]rawptr, drawcount: sizei, basevertex: [^]int)
impl_ProvokingVertex: proc "c" (mode: Enum)
impl_FenceSync: proc "c" (condition: Enum, flags: bitfield) -> sync
impl_IsSync: proc "c" (sync: sync) -> boolean
impl_DeleteSync: proc "c" (sync: sync)
impl_ClientWaitSync: proc "c" (sync: sync, flags: bitfield, timeout: uint64) -> Enum
impl_WaitSync: proc "c" (sync: sync, flags: bitfield, timeout: uint64)
impl_GetInteger64v: proc "c" (pname: Enum, data: [^]int64)
impl_GetSynciv: proc "c" (sync: sync, pname: Enum, count: sizei, length: [^]sizei, values: [^]int)
impl_GetInteger64i_v: proc "c" (target: Enum, index: uint, data: [^]int64)
impl_GetBufferParameteri64v: proc "c" (target: Enum, pname: Enum, params: [^]int64)
impl_FramebufferTexture: proc "c" (target: Enum, attachment: Enum, texture: uint, level: int)
impl_TexImage2DMultisample: proc "c" (target: Enum, samples: sizei, internalformat: Enum, width: sizei, height: sizei, fixedsamplelocations: boolean)
impl_TexImage3DMultisample: proc "c" (target: Enum, samples: sizei, internalformat: Enum, width: sizei, height: sizei, depth: sizei, fixedsamplelocations: boolean)
impl_GetMultisamplefv: proc "c" (pname: Enum, index: uint, val: [^]float)
impl_SampleMaski: proc "c" (maskNumber: uint, mask: bitfield)
// GL_VERSION_3_3
impl_BindFragDataLocationIndexed: proc "c" (program: uint, colorNumber: uint, index: uint, name: cstring)
impl_GetFragDataIndex: proc "c" (program: uint, name: cstring) -> int
impl_GenSamplers: proc "c" (count: sizei, samplers: [^]uint)
impl_DeleteSamplers: proc "c" (count: sizei, samplers: [^]uint)
impl_IsSampler: proc "c" (sampler: uint) -> boolean
impl_BindSampler: proc "c" (unit: uint, sampler: uint)
impl_SamplerParameteri: proc "c" (sampler: uint, pname: Enum, param: int)
impl_SamplerParameteriv: proc "c" (sampler: uint, pname: Enum, param: [^]int)
impl_SamplerParameterf: proc "c" (sampler: uint, pname: Enum, param: float)
impl_SamplerParameterfv: proc "c" (sampler: uint, pname: Enum, param: [^]float)
impl_SamplerParameterIiv: proc "c" (sampler: uint, pname: Enum, param: [^]int)
impl_SamplerParameterIuiv: proc "c" (sampler: uint, pname: Enum, param: [^]uint)
impl_GetSamplerParameteriv: proc "c" (sampler: uint, pname: Enum, params: [^]int)
impl_GetSamplerParameterIiv: proc "c" (sampler: uint, pname: Enum, params: [^]int)
impl_GetSamplerParameterfv: proc "c" (sampler: uint, pname: Enum, params: [^]float)
impl_GetSamplerParameterIuiv: proc "c" (sampler: uint, pname: Enum, params: [^]uint)
impl_QueryCounter: proc "c" (id: uint, target: Enum)
impl_GetQueryObjecti64v: proc "c" (id: uint, pname: Enum, params: [^]int64)
impl_GetQueryObjectui64v: proc "c" (id: uint, pname: Enum, params: [^]uint64)
impl_VertexAttribDivisor: proc "c" (index: uint, divisor: uint)
impl_VertexAttribP1ui: proc "c" (index: uint, type: Enum, normalized: boolean, value: uint)
impl_VertexAttribP1uiv: proc "c" (index: uint, type: Enum, normalized: boolean, value: [^]uint)
impl_VertexAttribP2ui: proc "c" (index: uint, type: Enum, normalized: boolean, value: uint)
impl_VertexAttribP2uiv: proc "c" (index: uint, type: Enum, normalized: boolean, value: [^]uint)
impl_VertexAttribP3ui: proc "c" (index: uint, type: Enum, normalized: boolean, value: uint)
impl_VertexAttribP3uiv: proc "c" (index: uint, type: Enum, normalized: boolean, value: [^]uint)
impl_VertexAttribP4ui: proc "c" (index: uint, type: Enum, normalized: boolean, value: uint)
impl_VertexAttribP4uiv: proc "c" (index: uint, type: Enum, normalized: boolean, value: [^]uint)
// GL_VERSION_4_0
impl_MinSampleShading: proc "c" (value: float)
impl_BlendEquationi: proc "c" (buf: uint, mode: Enum)
impl_BlendEquationSeparatei: proc "c" (buf: uint, modeRGB: Enum, modeAlpha: Enum)
impl_BlendFunci: proc "c" (buf: uint, src: Enum, dst: Enum)
impl_BlendFuncSeparatei: proc "c" (buf: uint, srcRGB: Enum, dstRGB: Enum, srcAlpha: Enum, dstAlpha: Enum)
impl_DrawArraysIndirect: proc "c" (mode: Enum, indirect: rawptr)
impl_DrawElementsIndirect: proc "c" (mode: Enum, type: Enum, indirect: rawptr)
impl_Uniform1d: proc "c" (location: int, x: double)
impl_Uniform2d: proc "c" (location: int, x: double, y: double)
impl_Uniform3d: proc "c" (location: int, x: double, y: double, z: double)
impl_Uniform4d: proc "c" (location: int, x: double, y: double, z: double, w: double)
impl_Uniform1dv: proc "c" (location: int, count: sizei, value: [^]double)
impl_Uniform2dv: proc "c" (location: int, count: sizei, value: [^]double)
impl_Uniform3dv: proc "c" (location: int, count: sizei, value: [^]double)
impl_Uniform4dv: proc "c" (location: int, count: sizei, value: [^]double)
impl_UniformMatrix2dv: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]double)
impl_UniformMatrix3dv: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]double)
impl_UniformMatrix4dv: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]double)
impl_UniformMatrix2x3dv: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]double)
impl_UniformMatrix2x4dv: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]double)
impl_UniformMatrix3x2dv: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]double)
impl_UniformMatrix3x4dv: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]double)
impl_UniformMatrix4x2dv: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]double)
impl_UniformMatrix4x3dv: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]double)
impl_GetUniformdv: proc "c" (program: uint, location: int, params: [^]double)
impl_GetSubroutineUniformLocation: proc "c" (program: uint, shadertype: Enum, name: cstring) -> int
impl_GetSubroutineIndex: proc "c" (program: uint, shadertype: Enum, name: cstring) -> uint
impl_GetActiveSubroutineUniformiv: proc "c" (program: uint, shadertype: Enum, index: uint, pname: Enum, values: [^]int)
impl_GetActiveSubroutineUniformName: proc "c" (program: uint, shadertype: Enum, index: uint, bufSize: sizei, length: [^]sizei, name: [^]char)
impl_GetActiveSubroutineName: proc "c" (program: uint, shadertype: Enum, index: uint, bufSize: sizei, length: [^]sizei, name: [^]char)
impl_UniformSubroutinesuiv: proc "c" (shadertype: Enum, count: sizei, indices: [^]uint)
impl_GetUniformSubroutineuiv: proc "c" (shadertype: Enum, location: int, params: [^]uint)
impl_GetProgramStageiv: proc "c" (program: uint, shadertype: Enum, pname: Enum, values: [^]int)
impl_PatchParameteri: proc "c" (pname: Enum, value: int)
impl_PatchParameterfv: proc "c" (pname: Enum, values: [^]float)
impl_BindTransformFeedback: proc "c" (target: Enum, id: uint)
impl_DeleteTransformFeedbacks: proc "c" (n: sizei, ids: [^]uint)
impl_GenTransformFeedbacks: proc "c" (n: sizei, ids: [^]uint)
impl_IsTransformFeedback: proc "c" (id: uint) -> boolean
impl_PauseTransformFeedback: proc "c" ()
impl_ResumeTransformFeedback: proc "c" ()
impl_DrawTransformFeedback: proc "c" (mode: Enum, id: uint)
impl_DrawTransformFeedbackStream: proc "c" (mode: Enum, id: uint, stream: uint)
impl_BeginQueryIndexed: proc "c" (target: Enum, index: uint, id: uint)
impl_EndQueryIndexed: proc "c" (target: Enum, index: uint)
impl_GetQueryIndexediv: proc "c" (target: Enum, index: uint, pname: Enum, params: [^]int)
// GL_VERSION_4_1
impl_ReleaseShaderCompiler: proc "c" ()
impl_ShaderBinary: proc "c" (count: sizei, shaders: [^]uint, binaryFormat: Enum, binary: rawptr, length: sizei)
impl_GetShaderPrecisionFormat: proc "c" (shadertype: Enum, precisiontype: Enum, range: [^]int, precision: [^]int)
impl_DepthRangef: proc "c" (n: float, f: float)
impl_ClearDepthf: proc "c" (d: float)
impl_GetProgramBinary: proc "c" (program: uint, bufSize: sizei, length: [^]sizei, binaryFormat: [^]Enum, binary: rawptr)
impl_ProgramBinary: proc "c" (program: uint, binaryFormat: Enum, binary: rawptr, length: sizei)
impl_ProgramParameteri: proc "c" (program: uint, pname: Enum, value: int)
impl_UseProgramStages: proc "c" (pipeline: uint, stages: bitfield, program: uint)
impl_ActiveShaderProgram: proc "c" (pipeline: uint, program: uint)
impl_CreateShaderProgramv: proc "c" (type: Enum, count: sizei, strings: [^]cstring) -> uint
impl_BindProgramPipeline: proc "c" (pipeline: uint)
impl_DeleteProgramPipelines: proc "c" (n: sizei, pipelines: [^]uint)
impl_GenProgramPipelines: proc "c" (n: sizei, pipelines: [^]uint)
impl_IsProgramPipeline: proc "c" (pipeline: uint) -> boolean
impl_GetProgramPipelineiv: proc "c" (pipeline: uint, pname: Enum, params: [^]int)
impl_ProgramUniform1i: proc "c" (program: uint, location: int, v0: int)
impl_ProgramUniform1iv: proc "c" (program: uint, location: int, count: sizei, value: [^]int)
impl_ProgramUniform1f: proc "c" (program: uint, location: int, v0: float)
impl_ProgramUniform1fv: proc "c" (program: uint, location: int, count: sizei, value: [^]float)
impl_ProgramUniform1d: proc "c" (program: uint, location: int, v0: double)
impl_ProgramUniform1dv: proc "c" (program: uint, location: int, count: sizei, value: [^]double)
impl_ProgramUniform1ui: proc "c" (program: uint, location: int, v0: uint)
impl_ProgramUniform1uiv: proc "c" (program: uint, location: int, count: sizei, value: [^]uint)
impl_ProgramUniform2i: proc "c" (program: uint, location: int, v0: int, v1: int)
impl_ProgramUniform2iv: proc "c" (program: uint, location: int, count: sizei, value: [^]int)
impl_ProgramUniform2f: proc "c" (program: uint, location: int, v0: float, v1: float)
impl_ProgramUniform2fv: proc "c" (program: uint, location: int, count: sizei, value: [^]float)
impl_ProgramUniform2d: proc "c" (program: uint, location: int, v0: double, v1: double)
impl_ProgramUniform2dv: proc "c" (program: uint, location: int, count: sizei, value: [^]double)
impl_ProgramUniform2ui: proc "c" (program: uint, location: int, v0: uint, v1: uint)
impl_ProgramUniform2uiv: proc "c" (program: uint, location: int, count: sizei, value: [^]uint)
impl_ProgramUniform3i: proc "c" (program: uint, location: int, v0: int, v1: int, v2: int)
impl_ProgramUniform3iv: proc "c" (program: uint, location: int, count: sizei, value: [^]int)
impl_ProgramUniform3f: proc "c" (program: uint, location: int, v0: float, v1: float, v2: float)
impl_ProgramUniform3fv: proc "c" (program: uint, location: int, count: sizei, value: [^]float)
impl_ProgramUniform3d: proc "c" (program: uint, location: int, v0: double, v1: double, v2: double)
impl_ProgramUniform3dv: proc "c" (program: uint, location: int, count: sizei, value: [^]double)
impl_ProgramUniform3ui: proc "c" (program: uint, location: int, v0: uint, v1: uint, v2: uint)
impl_ProgramUniform3uiv: proc "c" (program: uint, location: int, count: sizei, value: [^]uint)
impl_ProgramUniform4i: proc "c" (program: uint, location: int, v0: int, v1: int, v2: int, v3: int)
impl_ProgramUniform4iv: proc "c" (program: uint, location: int, count: sizei, value: [^]int)
impl_ProgramUniform4f: proc "c" (program: uint, location: int, v0: float, v1: float, v2: float, v3: float)
impl_ProgramUniform4fv: proc "c" (program: uint, location: int, count: sizei, value: [^]float)
impl_ProgramUniform4d: proc "c" (program: uint, location: int, v0: double, v1: double, v2: double, v3: double)
impl_ProgramUniform4dv: proc "c" (program: uint, location: int, count: sizei, value: [^]double)
impl_ProgramUniform4ui: proc "c" (program: uint, location: int, v0: uint, v1: uint, v2: uint, v3: uint)
impl_ProgramUniform4uiv: proc "c" (program: uint, location: int, count: sizei, value: [^]uint)
impl_ProgramUniformMatrix2fv: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]float)
impl_ProgramUniformMatrix3fv: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]float)
impl_ProgramUniformMatrix4fv: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]float)
impl_ProgramUniformMatrix2dv: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]double)
impl_ProgramUniformMatrix3dv: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]double)
impl_ProgramUniformMatrix4dv: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]double)
impl_ProgramUniformMatrix2x3fv: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]float)
impl_ProgramUniformMatrix3x2fv: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]float)
impl_ProgramUniformMatrix2x4fv: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]float)
impl_ProgramUniformMatrix4x2fv: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]float)
impl_ProgramUniformMatrix3x4fv: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]float)
impl_ProgramUniformMatrix4x3fv: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]float)
impl_ProgramUniformMatrix2x3dv: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]double)
impl_ProgramUniformMatrix3x2dv: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]double)
impl_ProgramUniformMatrix2x4dv: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]double)
impl_ProgramUniformMatrix4x2dv: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]double)
impl_ProgramUniformMatrix3x4dv: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]double)
impl_ProgramUniformMatrix4x3dv: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]double)
impl_ValidateProgramPipeline: proc "c" (pipeline: uint)
impl_GetProgramPipelineInfoLog: proc "c" (pipeline: uint, bufSize: sizei, length: [^]sizei, infoLog: [^]char)
impl_VertexAttribL1d: proc "c" (index: uint, x: double)
impl_VertexAttribL2d: proc "c" (index: uint, x: double, y: double)
impl_VertexAttribL3d: proc "c" (index: uint, x: double, y: double, z: double)
impl_VertexAttribL4d: proc "c" (index: uint, x: double, y: double, z: double, w: double)
impl_VertexAttribL1dv: proc "c" (index: uint, v: [^]double)
impl_VertexAttribL2dv: proc "c" (index: uint, v: [^]double)
impl_VertexAttribL3dv: proc "c" (index: uint, v: [^]double)
impl_VertexAttribL4dv: proc "c" (index: uint, v: [^]double)
impl_VertexAttribLPointer: proc "c" (index: uint, size: int, type: Enum, stride: sizei, pointer: rawptr)
impl_GetVertexAttribLdv: proc "c" (index: uint, pname: Enum, params: [^]double)
impl_ViewportArrayv: proc "c" (first: uint, count: sizei, v: [^]float)
impl_ViewportIndexedf: proc "c" (index: uint, x: float, y: float, w: float, h: float)
impl_ViewportIndexedfv: proc "c" (index: uint, v: [^]float)
impl_ScissorArrayv: proc "c" (first: uint, count: sizei, v: [^]int)
impl_ScissorIndexed: proc "c" (index: uint, left: int, bottom: int, width: sizei, height: sizei)
impl_ScissorIndexedv: proc "c" (index: uint, v: [^]int)
impl_DepthRangeArrayv: proc "c" (first: uint, count: sizei, v: [^]double)
impl_DepthRangeIndexed: proc "c" (index: uint, n: double, f: double)
impl_GetFloati_v: proc "c" (target: Enum, index: uint, data: [^]float)
impl_GetDoublei_v: proc "c" (target: Enum, index: uint, data: [^]double)
// GL_VERSION_4_2
impl_DrawArraysInstancedBaseInstance: proc "c" (mode: Enum, first: int, count: sizei, instancecount: sizei, baseinstance: uint)
impl_DrawElementsInstancedBaseInstance: proc "c" (mode: Enum, count: sizei, type: Enum, indices: rawptr, instancecount: sizei, baseinstance: uint)
impl_DrawElementsInstancedBaseVertexBaseInstance: proc "c" (mode: Enum, count: sizei, type: Enum, indices: rawptr, instancecount: sizei, basevertex: int, baseinstance: uint)
impl_GetInternalformativ: proc "c" (target: Enum, internalformat: Enum, pname: Enum, count: sizei, params: [^]int)
impl_GetActiveAtomicCounterBufferiv: proc "c" (program: uint, bufferIndex: uint, pname: Enum, params: [^]int)
impl_BindImageTexture: proc "c" (unit: uint, texture: uint, level: int, layered: boolean, layer: int, access: Enum, format: Enum)
impl_MemoryBarrier: proc "c" (barriers: bitfield)
impl_TexStorage1D: proc "c" (target: Enum, levels: sizei, internalformat: Enum, width: sizei)
impl_TexStorage2D: proc "c" (target: Enum, levels: sizei, internalformat: Enum, width: sizei, height: sizei)
impl_TexStorage3D: proc "c" (target: Enum, levels: sizei, internalformat: Enum, width: sizei, height: sizei, depth: sizei)
impl_DrawTransformFeedbackInstanced: proc "c" (mode: Enum, id: uint, instancecount: sizei)
impl_DrawTransformFeedbackStreamInstanced: proc "c" (mode: Enum, id: uint, stream: uint, instancecount: sizei)
// GL_VERSION_4_3
impl_ClearBufferData: proc "c" (target: Enum, internalformat: Enum, format: Enum, type: Enum, data: rawptr)
impl_ClearBufferSubData: proc "c" (target: Enum, internalformat: Enum, offset: intptr, size: sizeiptr, format: Enum, type: Enum, data: rawptr)
impl_DispatchCompute: proc "c" (num_groups_x: uint, num_groups_y: uint, num_groups_z: uint)
impl_DispatchComputeIndirect: proc "c" (indirect: intptr)
impl_CopyImageSubData: proc "c" (srcName: uint, srcTarget: Enum, srcLevel: int, srcX: int, srcY: int, srcZ: int, dstName: uint, dstTarget: Enum, dstLevel: int, dstX: int, dstY: int, dstZ: int, srcWidth: sizei, srcHeight: sizei, srcDepth: sizei)
impl_FramebufferParameteri: proc "c" (target: Enum, pname: Enum, param: int)
impl_GetFramebufferParameteriv: proc "c" (target: Enum, pname: Enum, params: [^]int)
impl_GetInternalformati64v: proc "c" (target: Enum, internalformat: Enum, pname: Enum, count: sizei, params: [^]int64)
impl_InvalidateTexSubImage: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei)
impl_InvalidateTexImage: proc "c" (texture: uint, level: int)
impl_InvalidateBufferSubData: proc "c" (buffer: uint, offset: intptr, length: sizeiptr)
impl_InvalidateBufferData: proc "c" (buffer: uint)
impl_InvalidateFramebuffer: proc "c" (target: Enum, numAttachments: sizei, attachments: [^]Enum)
impl_InvalidateSubFramebuffer: proc "c" (target: Enum, numAttachments: sizei, attachments: [^]Enum, x: int, y: int, width: sizei, height: sizei)
impl_MultiDrawArraysIndirect: proc "c" (mode: Enum, indirect: rawptr, drawcount: sizei, stride: sizei)
impl_MultiDrawElementsIndirect: proc "c" (mode: Enum, type: Enum, indirect: rawptr, drawcount: sizei, stride: sizei)
impl_GetProgramInterfaceiv: proc "c" (program: uint, programInterface: Enum, pname: Enum, params: [^]int)
impl_GetProgramResourceIndex: proc "c" (program: uint, programInterface: Enum, name: cstring) -> uint
impl_GetProgramResourceName: proc "c" (program: uint, programInterface: Enum, index: uint, bufSize: sizei, length: [^]sizei, name: [^]char)
impl_GetProgramResourceiv: proc "c" (program: uint, programInterface: Enum, index: uint, propCount: sizei, props: [^]Enum, count: sizei, length: [^]sizei, params: [^]int)
impl_GetProgramResourceLocation: proc "c" (program: uint, programInterface: Enum, name: cstring) -> int
impl_GetProgramResourceLocationIndex: proc "c" (program: uint, programInterface: Enum, name: cstring) -> int
impl_ShaderStorageBlockBinding: proc "c" (program: uint, storageBlockIndex: uint, storageBlockBinding: uint)
impl_TexBufferRange: proc "c" (target: Enum, internalformat: Enum, buffer: uint, offset: intptr, size: sizeiptr)
impl_TexStorage2DMultisample: proc "c" (target: Enum, samples: sizei, internalformat: Enum, width: sizei, height: sizei, fixedsamplelocations: boolean)
impl_TexStorage3DMultisample: proc "c" (target: Enum, samples: sizei, internalformat: Enum, width: sizei, height: sizei, depth: sizei, fixedsamplelocations: boolean)
impl_TextureView: proc "c" (texture: uint, target: Enum, origtexture: uint, internalformat: Enum, minlevel: uint, numlevels: uint, minlayer: uint, numlayers: uint)
impl_BindVertexBuffer: proc "c" (bindingindex: uint, buffer: uint, offset: intptr, stride: sizei)
impl_VertexAttribFormat: proc "c" (attribindex: uint, size: int, type: Enum, normalized: boolean, relativeoffset: uint)
impl_VertexAttribIFormat: proc "c" (attribindex: uint, size: int, type: Enum, relativeoffset: uint)
impl_VertexAttribLFormat: proc "c" (attribindex: uint, size: int, type: Enum, relativeoffset: uint)
impl_VertexAttribBinding: proc "c" (attribindex: uint, bindingindex: uint)
impl_VertexBindingDivisor: proc "c" (bindingindex: uint, divisor: uint)
impl_DebugMessageControl: proc "c" (source: Enum, type: Enum, severity: Enum, count: sizei, ids: [^]uint, enabled: boolean)
impl_DebugMessageInsert: proc "c" (source: Enum, type: Enum, id: uint, severity: Enum, length: sizei, buf: cstring)
impl_DebugMessageCallback: proc "c" (callback: DEBUGPROC, userParam: rawptr)
impl_GetDebugMessageLog: proc "c" (count: uint, bufSize: sizei, sources: [^]Enum, types: [^]Enum, ids: [^]uint, severities: [^]Enum, lengths: [^]sizei, messageLog: [^]char) -> uint
impl_PushDebugGroup: proc "c" (source: Enum, id: uint, length: sizei, message: cstring)
impl_PopDebugGroup: proc "c" ()
impl_ObjectLabel: proc "c" (identifier: Enum, name: uint, length: sizei, label: cstring)
impl_GetObjectLabel: proc "c" (identifier: Enum, name: uint, bufSize: sizei, length: [^]sizei, label: [^]char)
impl_ObjectPtrLabel: proc "c" (ptr: rawptr, length: sizei, label: cstring)
impl_GetObjectPtrLabel: proc "c" (ptr: rawptr, bufSize: sizei, length: [^]sizei, label: [^]char)
impl_GetPointerv: proc "c" (pname: Enum, params: [^]rawptr)
// GL_VERSION_4_4
impl_BufferStorage: proc "c" (target: Enum, size: sizeiptr, data: rawptr, flags: bitfield)
impl_ClearTexImage: proc "c" (texture: uint, level: int, format: Enum, type: Enum, data: rawptr)
impl_ClearTexSubImage: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: Enum, type: Enum, data: rawptr)
impl_BindBuffersBase: proc "c" (target: Enum, first: uint, count: sizei, buffers: [^]uint)
impl_BindBuffersRange: proc "c" (target: Enum, first: uint, count: sizei, buffers: [^]uint, offsets: [^]intptr, sizes: [^]sizeiptr)
impl_BindTextures: proc "c" (first: uint, count: sizei, textures: [^]uint)
impl_BindSamplers: proc "c" (first: uint, count: sizei, samplers: [^]uint)
impl_BindImageTextures: proc "c" (first: uint, count: sizei, textures: [^]uint)
impl_BindVertexBuffers: proc "c" (first: uint, count: sizei, buffers: [^]uint, offsets: [^]intptr, strides: [^]sizei)
// GL_VERSION_4_5
impl_ClipControl: proc "c" (origin: Enum, depth: Enum)
impl_CreateTransformFeedbacks: proc "c" (n: sizei, ids: [^]uint)
impl_TransformFeedbackBufferBase: proc "c" (xfb: uint, index: uint, buffer: uint)
impl_TransformFeedbackBufferRange: proc "c" (xfb: uint, index: uint, buffer: uint, offset: intptr, size: sizeiptr)
impl_GetTransformFeedbackiv: proc "c" (xfb: uint, pname: Enum, param: [^]int)
impl_GetTransformFeedbacki_v: proc "c" (xfb: uint, pname: Enum, index: uint, param: [^]int)
impl_GetTransformFeedbacki64_v: proc "c" (xfb: uint, pname: Enum, index: uint, param: [^]int64)
impl_CreateBuffers: proc "c" (n: sizei, buffers: [^]uint)
impl_NamedBufferStorage: proc "c" (buffer: uint, size: sizeiptr, data: rawptr, flags: bitfield)
impl_NamedBufferData: proc "c" (buffer: uint, size: sizeiptr, data: rawptr, usage: Enum)
impl_NamedBufferSubData: proc "c" (buffer: uint, offset: intptr, size: sizeiptr, data: rawptr)
impl_CopyNamedBufferSubData: proc "c" (readBuffer: uint, writeBuffer: uint, readOffset: intptr, writeOffset: intptr, size: sizeiptr)
impl_ClearNamedBufferData: proc "c" (buffer: uint, internalformat: Enum, format: Enum, type: Enum, data: rawptr)
impl_ClearNamedBufferSubData: proc "c" (buffer: uint, internalformat: Enum, offset: intptr, size: sizeiptr, format: Enum, type: Enum, data: rawptr)
impl_MapNamedBuffer: proc "c" (buffer: uint, access: Enum) -> rawptr
impl_MapNamedBufferRange: proc "c" (buffer: uint, offset: intptr, length: sizeiptr, access: bitfield) -> rawptr
impl_UnmapNamedBuffer: proc "c" (buffer: uint) -> boolean
impl_FlushMappedNamedBufferRange: proc "c" (buffer: uint, offset: intptr, length: sizeiptr)
impl_GetNamedBufferParameteriv: proc "c" (buffer: uint, pname: Enum, params: [^]int)
impl_GetNamedBufferParameteri64v: proc "c" (buffer: uint, pname: Enum, params: [^]int64)
impl_GetNamedBufferPointerv: proc "c" (buffer: uint, pname: Enum, params: [^]rawptr)
impl_GetNamedBufferSubData: proc "c" (buffer: uint, offset: intptr, size: sizeiptr, data: rawptr)
impl_CreateFramebuffers: proc "c" (n: sizei, framebuffers: [^]uint)
impl_NamedFramebufferRenderbuffer: proc "c" (framebuffer: uint, attachment: Enum, renderbuffertarget: Enum, renderbuffer: uint)
impl_NamedFramebufferParameteri: proc "c" (framebuffer: uint, pname: Enum, param: int)
impl_NamedFramebufferTexture: proc "c" (framebuffer: uint, attachment: Enum, texture: uint, level: int)
impl_NamedFramebufferTextureLayer: proc "c" (framebuffer: uint, attachment: Enum, texture: uint, level: int, layer: int)
impl_NamedFramebufferDrawBuffer: proc "c" (framebuffer: uint, buf: Enum)
impl_NamedFramebufferDrawBuffers: proc "c" (framebuffer: uint, n: sizei, bufs: [^]Enum)
impl_NamedFramebufferReadBuffer: proc "c" (framebuffer: uint, src: Enum)
impl_InvalidateNamedFramebufferData: proc "c" (framebuffer: uint, numAttachments: sizei, attachments: [^]Enum)
impl_InvalidateNamedFramebufferSubData: proc "c" (framebuffer: uint, numAttachments: sizei, attachments: [^]Enum, x: int, y: int, width: sizei, height: sizei)
impl_ClearNamedFramebufferiv: proc "c" (framebuffer: uint, buffer: Enum, drawbuffer: int, value: [^]int)
impl_ClearNamedFramebufferuiv: proc "c" (framebuffer: uint, buffer: Enum, drawbuffer: int, value: [^]uint)
impl_ClearNamedFramebufferfv: proc "c" (framebuffer: uint, buffer: Enum, drawbuffer: int, value: [^]float)
impl_ClearNamedFramebufferfi: proc "c" (framebuffer: uint, buffer: Enum, drawbuffer: int, depth: float, stencil: int)
impl_BlitNamedFramebuffer: proc "c" (readFramebuffer: uint, drawFramebuffer: uint, srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: bitfield, filter: Enum)
impl_CheckNamedFramebufferStatus: proc "c" (framebuffer: uint, target: Enum) -> Enum
impl_GetNamedFramebufferParameteriv: proc "c" (framebuffer: uint, pname: Enum, param: [^]int)
impl_GetNamedFramebufferAttachmentParameteriv: proc "c" (framebuffer: uint, attachment: Enum, pname: Enum, params: [^]int)
impl_CreateRenderbuffers: proc "c" (n: sizei, renderbuffers: [^]uint)
impl_NamedRenderbufferStorage: proc "c" (renderbuffer: uint, internalformat: Enum, width: sizei, height: sizei)
impl_NamedRenderbufferStorageMultisample: proc "c" (renderbuffer: uint, samples: sizei, internalformat: Enum, width: sizei, height: sizei)
impl_GetNamedRenderbufferParameteriv: proc "c" (renderbuffer: uint, pname: Enum, params: [^]int)
impl_CreateTextures: proc "c" (target: Enum, n: sizei, textures: [^]uint)
impl_TextureBuffer: proc "c" (texture: uint, internalformat: Enum, buffer: uint)
impl_TextureBufferRange: proc "c" (texture: uint, internalformat: Enum, buffer: uint, offset: intptr, size: sizeiptr)
impl_TextureStorage1D: proc "c" (texture: uint, levels: sizei, internalformat: Enum, width: sizei)
impl_TextureStorage2D: proc "c" (texture: uint, levels: sizei, internalformat: Enum, width: sizei, height: sizei)
impl_TextureStorage3D: proc "c" (texture: uint, levels: sizei, internalformat: Enum, width: sizei, height: sizei, depth: sizei)
impl_TextureStorage2DMultisample: proc "c" (texture: uint, samples: sizei, internalformat: Enum, width: sizei, height: sizei, fixedsamplelocations: boolean)
impl_TextureStorage3DMultisample: proc "c" (texture: uint, samples: sizei, internalformat: Enum, width: sizei, height: sizei, depth: sizei, fixedsamplelocations: boolean)
impl_TextureSubImage1D: proc "c" (texture: uint, level: int, xoffset: int, width: sizei, format: Enum, type: Enum, pixels: rawptr)
impl_TextureSubImage2D: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, width: sizei, height: sizei, format: Enum, type: Enum, pixels: rawptr)
impl_TextureSubImage3D: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: Enum, type: Enum, pixels: rawptr)
impl_CompressedTextureSubImage1D: proc "c" (texture: uint, level: int, xoffset: int, width: sizei, format: Enum, imageSize: sizei, data: rawptr)
impl_CompressedTextureSubImage2D: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, width: sizei, height: sizei, format: Enum, imageSize: sizei, data: rawptr)
impl_CompressedTextureSubImage3D: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: Enum, imageSize: sizei, data: rawptr)
impl_CopyTextureSubImage1D: proc "c" (texture: uint, level: int, xoffset: int, x: int, y: int, width: sizei)
impl_CopyTextureSubImage2D: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, x: int, y: int, width: sizei, height: sizei)
impl_CopyTextureSubImage3D: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: sizei, height: sizei)
impl_TextureParameterf: proc "c" (texture: uint, pname: Enum, param: float)
impl_TextureParameterfv: proc "c" (texture: uint, pname: Enum, param: [^]float)
impl_TextureParameteri: proc "c" (texture: uint, pname: Enum, param: int)
impl_TextureParameterIiv: proc "c" (texture: uint, pname: Enum, params: [^]int)
impl_TextureParameterIuiv: proc "c" (texture: uint, pname: Enum, params: [^]uint)
impl_TextureParameteriv: proc "c" (texture: uint, pname: Enum, param: [^]int)
impl_GenerateTextureMipmap: proc "c" (texture: uint)
impl_BindTextureUnit: proc "c" (unit: uint, texture: uint)
impl_GetTextureImage: proc "c" (texture: uint, level: int, format: Enum, type: Enum, bufSize: sizei, pixels: rawptr)
impl_GetCompressedTextureImage: proc "c" (texture: uint, level: int, bufSize: sizei, pixels: rawptr)
impl_GetTextureLevelParameterfv: proc "c" (texture: uint, level: int, pname: Enum, params: [^]float)
impl_GetTextureLevelParameteriv: proc "c" (texture: uint, level: int, pname: Enum, params: [^]int)
impl_GetTextureParameterfv: proc "c" (texture: uint, pname: Enum, params: [^]float)
impl_GetTextureParameterIiv: proc "c" (texture: uint, pname: Enum, params: [^]int)
impl_GetTextureParameterIuiv: proc "c" (texture: uint, pname: Enum, params: [^]uint)
impl_GetTextureParameteriv: proc "c" (texture: uint, pname: Enum, params: [^]int)
impl_CreateVertexArrays: proc "c" (n: sizei, arrays: [^]uint)
impl_DisableVertexArrayAttrib: proc "c" (vaobj: uint, index: uint)
impl_EnableVertexArrayAttrib: proc "c" (vaobj: uint, index: uint)
impl_VertexArrayElementBuffer: proc "c" (vaobj: uint, buffer: uint)
impl_VertexArrayVertexBuffer: proc "c" (vaobj: uint, bindingindex: uint, buffer: uint, offset: intptr, stride: sizei)
impl_VertexArrayVertexBuffers: proc "c" (vaobj: uint, first: uint, count: sizei, buffers: [^]uint, offsets: [^]intptr, strides: [^]sizei)
impl_VertexArrayAttribBinding: proc "c" (vaobj: uint, attribindex: uint, bindingindex: uint)
impl_VertexArrayAttribFormat: proc "c" (vaobj: uint, attribindex: uint, size: int, type: Enum, normalized: boolean, relativeoffset: uint)
impl_VertexArrayAttribIFormat: proc "c" (vaobj: uint, attribindex: uint, size: int, type: Enum, relativeoffset: uint)
impl_VertexArrayAttribLFormat: proc "c" (vaobj: uint, attribindex: uint, size: int, type: Enum, relativeoffset: uint)
impl_VertexArrayBindingDivisor: proc "c" (vaobj: uint, bindingindex: uint, divisor: uint)
impl_GetVertexArrayiv: proc "c" (vaobj: uint, pname: Enum, param: [^]int)
impl_GetVertexArrayIndexediv: proc "c" (vaobj: uint, index: uint, pname: Enum, param: [^]int)
impl_GetVertexArrayIndexed64iv: proc "c" (vaobj: uint, index: uint, pname: Enum, param: [^]int64)
impl_CreateSamplers: proc "c" (n: sizei, samplers: [^]uint)
impl_CreateProgramPipelines: proc "c" (n: sizei, pipelines: [^]uint)
impl_CreateQueries: proc "c" (target: Enum, n: sizei, ids: [^]uint)
impl_GetQueryBufferObjecti64v: proc "c" (id: uint, buffer: uint, pname: Enum, offset: intptr)
impl_GetQueryBufferObjectiv: proc "c" (id: uint, buffer: uint, pname: Enum, offset: intptr)
impl_GetQueryBufferObjectui64v: proc "c" (id: uint, buffer: uint, pname: Enum, offset: intptr)
impl_GetQueryBufferObjectuiv: proc "c" (id: uint, buffer: uint, pname: Enum, offset: intptr)
impl_MemoryBarrierByRegion: proc "c" (barriers: bitfield)
impl_GetTextureSubImage: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: Enum, type: Enum, bufSize: sizei, pixels: rawptr)
impl_GetCompressedTextureSubImage: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, bufSize: sizei, pixels: rawptr)
impl_GetGraphicsResetStatus: proc "c" () -> Enum
impl_GetnCompressedTexImage: proc "c" (target: Enum, lod: int, bufSize: sizei, pixels: rawptr)
impl_GetnTexImage: proc "c" (target: Enum, level: int, format: Enum, type: Enum, bufSize: sizei, pixels: rawptr)
impl_GetnUniformdv: proc "c" (program: uint, location: int, bufSize: sizei, params: [^]double)
impl_GetnUniformfv: proc "c" (program: uint, location: int, bufSize: sizei, params: [^]float)
impl_GetnUniformiv: proc "c" (program: uint, location: int, bufSize: sizei, params: [^]int)
impl_GetnUniformuiv: proc "c" (program: uint, location: int, bufSize: sizei, params: [^]uint)
impl_ReadnPixels: proc "c" (x: int, y: int, width: sizei, height: sizei, format: Enum, type: Enum, bufSize: sizei, data: rawptr)
impl_TextureBarrier: proc "c" ()
// GL_VERSION_4_6
impl_SpecializeShader: proc "c" (shader: uint, pEntryPoint: cstring, numSpecializationConstants: uint, pConstantIndex: [^]uint, pConstantValue: [^]uint)
impl_MultiDrawArraysIndirectCount: proc "c" (mode: Enum, indirect: rawptr, drawcount: intptr, maxdrawcount: sizei, stride: sizei)
impl_MultiDrawElementsIndirectCount: proc "c" (mode: Enum, type: Enum, indirect: rawptr, drawcount: intptr, maxdrawcount: sizei, stride: sizei)
impl_PolygonOffsetClamp: proc "c" (factor: float, units: float, clamp: float)

// GL_KHR_parallel_shader_compile
MAX_SHADER_COMPILER_THREADS_KHR :: 0x91B0
COMPLETION_STATUS_KHR :: 0x91B1

// GL_KHR_parallel_shader_compile
impl_MaxShaderCompilerThreadsKHR: proc "c" (count: uint)

KHR_parallel_shader_compile := false


// Wrappers
when GL_DEBUG {

    debug_helper :: proc"c"(from_loc: runtime.Source_Code_Location, num_ret: int, args: ..any, loc := #caller_location) {
        context = runtime.default_context()

        Error_Enum :: enum {
            NO_ERROR = NO_ERROR,
            INVALID_VALUE = INVALID_VALUE,
            INVALID_ENUM = INVALID_ENUM,
            INVALID_OPERATION = INVALID_OPERATION,
            INVALID_FRAMEBUFFER_OPERATION = INVALID_FRAMEBUFFER_OPERATION,
            OUT_OF_MEMORY = OUT_OF_MEMORY,
            STACK_UNDERFLOW = STACK_UNDERFLOW,
            STACK_OVERFLOW = STACK_OVERFLOW,
            // TODO: What if the return enum is invalid?
        }

        // There can be multiple errors, so we're required to continuously call glGetError until there are no more errors
        for i := 0; /**/; i += 1 {
            err := cast(Error_Enum)impl_GetError()
            if err == .NO_ERROR { break }

            fmt.printf("%d: glGetError() returned GL_%v\n", i, err)

            // add function call
            fmt.printf("   call: gl%s(", loc.procedure)
            {
                // add input arguments
                for arg, i in args[num_ret:] {
                if i > 0 { fmt.printf(", ") }

                if v, ok := arg.(u32); ok { // TODO: Assumes all u32 are GLenum (they're not, GLbitfield and GLuint are also mapped to u32), fix later by better typing
                    if err == .INVALID_ENUM {
                        fmt.printf("INVALID_ENUM=%d", v)
                    } else {
                        fmt.printf("GL_%v=%d", (v), v)
                    }
                } else {
                    fmt.printf("%v", arg)
                }
                }

                // add return arguments
                if num_ret == 1 {
                    fmt.printf(") -> %v \n", args[0])
                } else if num_ret > 1 {
                    fmt.printf(") -> (")
                    for arg, i in args[1:num_ret] {
                        if i > 0 { fmt.printf(", ") }
                        fmt.printf("%v", arg)
                    }
                    fmt.printf(")\n")
                } else {
                    fmt.printf(")\n")
                }
            }

            // add location
            fmt.printf("   in:   %s(%d:%d)\n", from_loc.file_path, from_loc.line, from_loc.column)
        }
    }
    CullFace :: proc "c" (mode: Enum, loc := #caller_location) { impl_CullFace(mode); debug_helper(loc, 0, mode);  }
    FrontFace :: proc "c" (mode: Enum, loc := #caller_location) { impl_FrontFace(mode); debug_helper(loc, 0, mode);  }
    Hint :: proc "c" (target: Enum, mode: Enum, loc := #caller_location) { impl_Hint(target, mode); debug_helper(loc, 0, target, mode);  }
    LineWidth :: proc "c" (width: float, loc := #caller_location) { impl_LineWidth(width); debug_helper(loc, 0, width);  }
    PointSize :: proc "c" (size: float, loc := #caller_location) { impl_PointSize(size); debug_helper(loc, 0, size);  }
    PolygonMode :: proc "c" (face: Enum, mode: Enum, loc := #caller_location) { impl_PolygonMode(face, mode); debug_helper(loc, 0, face, mode);  }
    Scissor :: proc "c" (x: int, y: int, width: sizei, height: sizei, loc := #caller_location) { impl_Scissor(x, y, width, height); debug_helper(loc, 0, x, y, width, height);  }
    TexParameterf :: proc "c" (target: Enum, pname: Enum, param: float, loc := #caller_location) { impl_TexParameterf(target, pname, param); debug_helper(loc, 0, target, pname, param);  }
    TexParameterfv :: proc "c" (target: Enum, pname: Enum, params: [^]float, loc := #caller_location) { impl_TexParameterfv(target, pname, params); debug_helper(loc, 0, target, pname, params);  }
    TexParameteri :: proc "c" (target: Enum, pname: Enum, param: int, loc := #caller_location) { impl_TexParameteri(target, pname, param); debug_helper(loc, 0, target, pname, param);  }
    TexParameteriv :: proc "c" (target: Enum, pname: Enum, params: [^]int, loc := #caller_location) { impl_TexParameteriv(target, pname, params); debug_helper(loc, 0, target, pname, params);  }
    TexImage1D :: proc "c" (target: Enum, level: int, internalformat: int, width: sizei, border: int, format: Enum, type: Enum, pixels: rawptr, loc := #caller_location) { impl_TexImage1D(target, level, internalformat, width, border, format, type, pixels); debug_helper(loc, 0, target, level, internalformat, width, border, format, type, pixels);  }
    TexImage2D :: proc "c" (target: Enum, level: int, internalformat: int, width: sizei, height: sizei, border: int, format: Enum, type: Enum, pixels: rawptr, loc := #caller_location) { impl_TexImage2D(target, level, internalformat, width, height, border, format, type, pixels); debug_helper(loc, 0, target, level, internalformat, width, height, border, format, type, pixels);  }
    DrawBuffer :: proc "c" (buf: Enum, loc := #caller_location) { impl_DrawBuffer(buf); debug_helper(loc, 0, buf);  }
    Clear :: proc "c" (mask: bitfield, loc := #caller_location) { impl_Clear(mask); debug_helper(loc, 0, mask);  }
    ClearColor :: proc "c" (red: float, green: float, blue: float, alpha: float, loc := #caller_location) { impl_ClearColor(red, green, blue, alpha); debug_helper(loc, 0, red, green, blue, alpha);  }
    ClearStencil :: proc "c" (s: int, loc := #caller_location) { impl_ClearStencil(s); debug_helper(loc, 0, s);  }
    ClearDepth :: proc "c" (depth: double, loc := #caller_location) { impl_ClearDepth(depth); debug_helper(loc, 0, depth);  }
    StencilMask :: proc "c" (mask: uint, loc := #caller_location) { impl_StencilMask(mask); debug_helper(loc, 0, mask);  }
    ColorMask :: proc "c" (red: boolean, green: boolean, blue: boolean, alpha: boolean, loc := #caller_location) { impl_ColorMask(red, green, blue, alpha); debug_helper(loc, 0, red, green, blue, alpha);  }
    DepthMask :: proc "c" (flag: boolean, loc := #caller_location) { impl_DepthMask(flag); debug_helper(loc, 0, flag);  }
    Disable :: proc "c" (cap: Enum, loc := #caller_location) { impl_Disable(cap); debug_helper(loc, 0, cap);  }
    Enable :: proc "c" (cap: Enum, loc := #caller_location) { impl_Enable(cap); debug_helper(loc, 0, cap);  }
    Finish :: proc "c" (loc := #caller_location) { impl_Finish(); debug_helper(loc, 0);  }
    Flush :: proc "c" (loc := #caller_location) { impl_Flush(); debug_helper(loc, 0);  }
    BlendFunc :: proc "c" (sfactor: Enum, dfactor: Enum, loc := #caller_location) { impl_BlendFunc(sfactor, dfactor); debug_helper(loc, 0, sfactor, dfactor);  }
    LogicOp :: proc "c" (opcode: Enum, loc := #caller_location) { impl_LogicOp(opcode); debug_helper(loc, 0, opcode);  }
    StencilFunc :: proc "c" (func: Enum, ref: int, mask: uint, loc := #caller_location) { impl_StencilFunc(func, ref, mask); debug_helper(loc, 0, func, ref, mask);  }
    StencilOp :: proc "c" (fail: Enum, zfail: Enum, zpass: Enum, loc := #caller_location) { impl_StencilOp(fail, zfail, zpass); debug_helper(loc, 0, fail, zfail, zpass);  }
    DepthFunc :: proc "c" (func: Enum, loc := #caller_location) { impl_DepthFunc(func); debug_helper(loc, 0, func);  }
    PixelStoref :: proc "c" (pname: Enum, param: float, loc := #caller_location) { impl_PixelStoref(pname, param); debug_helper(loc, 0, pname, param);  }
    PixelStorei :: proc "c" (pname: Enum, param: int, loc := #caller_location) { impl_PixelStorei(pname, param); debug_helper(loc, 0, pname, param);  }
    ReadBuffer :: proc "c" (src: Enum, loc := #caller_location) { impl_ReadBuffer(src); debug_helper(loc, 0, src);  }
    ReadPixels :: proc "c" (x: int, y: int, width: sizei, height: sizei, format: Enum, type: Enum, pixels: rawptr, loc := #caller_location) { impl_ReadPixels(x, y, width, height, format, type, pixels); debug_helper(loc, 0, x, y, width, height, format, type, pixels);  }
    GetBooleanv :: proc "c" (pname: Enum, data: [^]boolean, loc := #caller_location) { impl_GetBooleanv(pname, data); debug_helper(loc, 0, pname, data);  }
    GetDoublev :: proc "c" (pname: Enum, data: [^]double, loc := #caller_location) { impl_GetDoublev(pname, data); debug_helper(loc, 0, pname, data);  }
    GetError :: proc "c" (loc := #caller_location) -> Enum { ret := impl_GetError(); debug_helper(loc, 1, ret); return ret }
    GetFloatv :: proc "c" (pname: Enum, data: [^]float, loc := #caller_location) { impl_GetFloatv(pname, data); debug_helper(loc, 0, pname, data);  }
    GetIntegerv :: proc "c" (pname: Enum, data: [^]int, loc := #caller_location) { impl_GetIntegerv(pname, data); debug_helper(loc, 0, pname, data);  }
    GetString :: proc "c" (name: Enum, loc := #caller_location) -> cstring { ret := impl_GetString(name); debug_helper(loc, 1, ret, name); return ret }
    GetTexImage :: proc "c" (target: Enum, level: int, format: Enum, type: Enum, pixels: rawptr, loc := #caller_location) { impl_GetTexImage(target, level, format, type, pixels); debug_helper(loc, 0, target, level, format, type, pixels);  }
    GetTexParameterfv :: proc "c" (target: Enum, pname: Enum, params: [^]float, loc := #caller_location) { impl_GetTexParameterfv(target, pname, params); debug_helper(loc, 0, target, pname, params);  }
    GetTexParameteriv :: proc "c" (target: Enum, pname: Enum, params: [^]int, loc := #caller_location) { impl_GetTexParameteriv(target, pname, params); debug_helper(loc, 0, target, pname, params);  }
    GetTexLevelParameterfv :: proc "c" (target: Enum, level: int, pname: Enum, params: [^]float, loc := #caller_location) { impl_GetTexLevelParameterfv(target, level, pname, params); debug_helper(loc, 0, target, level, pname, params);  }
    GetTexLevelParameteriv :: proc "c" (target: Enum, level: int, pname: Enum, params: [^]int, loc := #caller_location) { impl_GetTexLevelParameteriv(target, level, pname, params); debug_helper(loc, 0, target, level, pname, params);  }
    IsEnabled :: proc "c" (cap: Enum, loc := #caller_location) -> boolean { ret := impl_IsEnabled(cap); debug_helper(loc, 1, ret, cap); return ret }
    DepthRange :: proc "c" (n: double, f: double, loc := #caller_location) { impl_DepthRange(n, f); debug_helper(loc, 0, n, f);  }
    Viewport :: proc "c" (x: int, y: int, width: sizei, height: sizei, loc := #caller_location) { impl_Viewport(x, y, width, height); debug_helper(loc, 0, x, y, width, height);  }
    DrawArrays :: proc "c" (mode: Enum, first: int, count: sizei, loc := #caller_location) { impl_DrawArrays(mode, first, count); debug_helper(loc, 0, mode, first, count);  }
    DrawElements :: proc "c" (mode: Enum, count: sizei, type: Enum, indices: rawptr, loc := #caller_location) { impl_DrawElements(mode, count, type, indices); debug_helper(loc, 0, mode, count, type, indices);  }
    PolygonOffset :: proc "c" (factor: float, units: float, loc := #caller_location) { impl_PolygonOffset(factor, units); debug_helper(loc, 0, factor, units);  }
    CopyTexImage1D :: proc "c" (target: Enum, level: int, internalformat: Enum, x: int, y: int, width: sizei, border: int, loc := #caller_location) { impl_CopyTexImage1D(target, level, internalformat, x, y, width, border); debug_helper(loc, 0, target, level, internalformat, x, y, width, border);  }
    CopyTexImage2D :: proc "c" (target: Enum, level: int, internalformat: Enum, x: int, y: int, width: sizei, height: sizei, border: int, loc := #caller_location) { impl_CopyTexImage2D(target, level, internalformat, x, y, width, height, border); debug_helper(loc, 0, target, level, internalformat, x, y, width, height, border);  }
    CopyTexSubImage1D :: proc "c" (target: Enum, level: int, xoffset: int, x: int, y: int, width: sizei, loc := #caller_location) { impl_CopyTexSubImage1D(target, level, xoffset, x, y, width); debug_helper(loc, 0, target, level, xoffset, x, y, width);  }
    CopyTexSubImage2D :: proc "c" (target: Enum, level: int, xoffset: int, yoffset: int, x: int, y: int, width: sizei, height: sizei, loc := #caller_location) { impl_CopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height); debug_helper(loc, 0, target, level, xoffset, yoffset, x, y, width, height);  }
    TexSubImage1D :: proc "c" (target: Enum, level: int, xoffset: int, width: sizei, format: Enum, type: Enum, pixels: rawptr, loc := #caller_location) { impl_TexSubImage1D(target, level, xoffset, width, format, type, pixels); debug_helper(loc, 0, target, level, xoffset, width, format, type, pixels);  }
    TexSubImage2D :: proc "c" (target: Enum, level: int, xoffset: int, yoffset: int, width: sizei, height: sizei, format: Enum, type: Enum, pixels: rawptr, loc := #caller_location) { impl_TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels); debug_helper(loc, 0, target, level, xoffset, yoffset, width, height, format, type, pixels);  }
    BindTexture :: proc "c" (target: Enum, texture: uint, loc := #caller_location) { impl_BindTexture(target, texture); debug_helper(loc, 0, target, texture);  }
    DeleteTextures :: proc "c" (n: sizei, textures: [^]uint, loc := #caller_location) { impl_DeleteTextures(n, textures); debug_helper(loc, 0, n, textures);  }
    GenTextures :: proc "c" (n: sizei, textures: [^]uint, loc := #caller_location) { impl_GenTextures(n, textures); debug_helper(loc, 0, n, textures);  }
    IsTexture :: proc "c" (texture: uint, loc := #caller_location) -> boolean { ret := impl_IsTexture(texture); debug_helper(loc, 1, ret, texture); return ret }
    DrawRangeElements :: proc "c" (mode: Enum, start: uint, end: uint, count: sizei, type: Enum, indices: rawptr, loc := #caller_location) { impl_DrawRangeElements(mode, start, end, count, type, indices); debug_helper(loc, 0, mode, start, end, count, type, indices);  }
    TexImage3D :: proc "c" (target: Enum, level: int, internalformat: int, width: sizei, height: sizei, depth: sizei, border: int, format: Enum, type: Enum, pixels: rawptr, loc := #caller_location) { impl_TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels); debug_helper(loc, 0, target, level, internalformat, width, height, depth, border, format, type, pixels);  }
    TexSubImage3D :: proc "c" (target: Enum, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: Enum, type: Enum, pixels: rawptr, loc := #caller_location) { impl_TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); debug_helper(loc, 0, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);  }
    CopyTexSubImage3D :: proc "c" (target: Enum, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: sizei, height: sizei, loc := #caller_location) { impl_CopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height); debug_helper(loc, 0, target, level, xoffset, yoffset, zoffset, x, y, width, height);  }
    ActiveTexture :: proc "c" (texture: Enum, loc := #caller_location) { impl_ActiveTexture(texture); debug_helper(loc, 0, texture);  }
    SampleCoverage :: proc "c" (value: float, invert: boolean, loc := #caller_location) { impl_SampleCoverage(value, invert); debug_helper(loc, 0, value, invert);  }
    CompressedTexImage3D :: proc "c" (target: Enum, level: int, internalformat: Enum, width: sizei, height: sizei, depth: sizei, border: int, imageSize: sizei, data: rawptr, loc := #caller_location) { impl_CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data); debug_helper(loc, 0, target, level, internalformat, width, height, depth, border, imageSize, data);  }
    CompressedTexImage2D :: proc "c" (target: Enum, level: int, internalformat: Enum, width: sizei, height: sizei, border: int, imageSize: sizei, data: rawptr, loc := #caller_location) { impl_CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data); debug_helper(loc, 0, target, level, internalformat, width, height, border, imageSize, data);  }
    CompressedTexImage1D :: proc "c" (target: Enum, level: int, internalformat: Enum, width: sizei, border: int, imageSize: sizei, data: rawptr, loc := #caller_location) { impl_CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data); debug_helper(loc, 0, target, level, internalformat, width, border, imageSize, data);  }
    CompressedTexSubImage3D :: proc "c" (target: Enum, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: Enum, imageSize: sizei, data: rawptr, loc := #caller_location) { impl_CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); debug_helper(loc, 0, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);  }
    CompressedTexSubImage2D :: proc "c" (target: Enum, level: int, xoffset: int, yoffset: int, width: sizei, height: sizei, format: Enum, imageSize: sizei, data: rawptr, loc := #caller_location) { impl_CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data); debug_helper(loc, 0, target, level, xoffset, yoffset, width, height, format, imageSize, data);  }
    CompressedTexSubImage1D :: proc "c" (target: Enum, level: int, xoffset: int, width: sizei, format: Enum, imageSize: sizei, data: rawptr, loc := #caller_location) { impl_CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data); debug_helper(loc, 0, target, level, xoffset, width, format, imageSize, data);  }
    GetCompressedTexImage :: proc "c" (target: Enum, level: int, img: rawptr, loc := #caller_location) { impl_GetCompressedTexImage(target, level, img); debug_helper(loc, 0, target, level, img);  }
    BlendFuncSeparate :: proc "c" (sfactorRGB: Enum, dfactorRGB: Enum, sfactorAlpha: Enum, dfactorAlpha: Enum, loc := #caller_location) { impl_BlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); debug_helper(loc, 0, sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);  }
    MultiDrawArrays :: proc "c" (mode: Enum, first: [^]int, count: [^]sizei, drawcount: sizei, loc := #caller_location) { impl_MultiDrawArrays(mode, first, count, drawcount); debug_helper(loc, 0, mode, first, count, drawcount);  }
    MultiDrawElements :: proc "c" (mode: Enum, count: [^]sizei, type: Enum, indices: [^]rawptr, drawcount: sizei, loc := #caller_location) { impl_MultiDrawElements(mode, count, type, indices, drawcount); debug_helper(loc, 0, mode, count, type, indices, drawcount);  }
    PointParameterf :: proc "c" (pname: Enum, param: float, loc := #caller_location) { impl_PointParameterf(pname, param); debug_helper(loc, 0, pname, param);  }
    PointParameterfv :: proc "c" (pname: Enum, params: [^]float, loc := #caller_location) { impl_PointParameterfv(pname, params); debug_helper(loc, 0, pname, params);  }
    PointParameteri :: proc "c" (pname: Enum, param: int, loc := #caller_location) { impl_PointParameteri(pname, param); debug_helper(loc, 0, pname, param);  }
    PointParameteriv :: proc "c" (pname: Enum, params: [^]int, loc := #caller_location) { impl_PointParameteriv(pname, params); debug_helper(loc, 0, pname, params);  }
    BlendColor :: proc "c" (red: float, green: float, blue: float, alpha: float, loc := #caller_location) { impl_BlendColor(red, green, blue, alpha); debug_helper(loc, 0, red, green, blue, alpha);  }
    BlendEquation :: proc "c" (mode: Enum, loc := #caller_location) { impl_BlendEquation(mode); debug_helper(loc, 0, mode);  }
    GenQueries :: proc "c" (n: sizei, ids: [^]uint, loc := #caller_location) { impl_GenQueries(n, ids); debug_helper(loc, 0, n, ids);  }
    DeleteQueries :: proc "c" (n: sizei, ids: [^]uint, loc := #caller_location) { impl_DeleteQueries(n, ids); debug_helper(loc, 0, n, ids);  }
    IsQuery :: proc "c" (id: uint, loc := #caller_location) -> boolean { ret := impl_IsQuery(id); debug_helper(loc, 1, ret, id); return ret }
    BeginQuery :: proc "c" (target: Enum, id: uint, loc := #caller_location) { impl_BeginQuery(target, id); debug_helper(loc, 0, target, id);  }
    EndQuery :: proc "c" (target: Enum, loc := #caller_location) { impl_EndQuery(target); debug_helper(loc, 0, target);  }
    GetQueryiv :: proc "c" (target: Enum, pname: Enum, params: [^]int, loc := #caller_location) { impl_GetQueryiv(target, pname, params); debug_helper(loc, 0, target, pname, params);  }
    GetQueryObjectiv :: proc "c" (id: uint, pname: Enum, params: [^]int, loc := #caller_location) { impl_GetQueryObjectiv(id, pname, params); debug_helper(loc, 0, id, pname, params);  }
    GetQueryObjectuiv :: proc "c" (id: uint, pname: Enum, params: [^]uint, loc := #caller_location) { impl_GetQueryObjectuiv(id, pname, params); debug_helper(loc, 0, id, pname, params);  }
    BindBuffer :: proc "c" (target: Enum, buffer: uint, loc := #caller_location) { impl_BindBuffer(target, buffer); debug_helper(loc, 0, target, buffer);  }
    DeleteBuffers :: proc "c" (n: sizei, buffers: [^]uint, loc := #caller_location) { impl_DeleteBuffers(n, buffers); debug_helper(loc, 0, n, buffers);  }
    GenBuffers :: proc "c" (n: sizei, buffers: [^]uint, loc := #caller_location) { impl_GenBuffers(n, buffers); debug_helper(loc, 0, n, buffers);  }
    IsBuffer :: proc "c" (buffer: uint, loc := #caller_location) -> boolean { ret := impl_IsBuffer(buffer); debug_helper(loc, 1, ret, buffer); return ret }
    BufferData :: proc "c" (target: Enum, size: sizeiptr, data: rawptr, usage: Enum, loc := #caller_location) { impl_BufferData(target, size, data, usage); debug_helper(loc, 0, target, size, data, usage);  }
    BufferSubData :: proc "c" (target: Enum, offset: intptr, size: sizeiptr, data: rawptr, loc := #caller_location) { impl_BufferSubData(target, offset, size, data); debug_helper(loc, 0, target, offset, size, data);  }
    GetBufferSubData :: proc "c" (target: Enum, offset: intptr, size: sizeiptr, data: rawptr, loc := #caller_location) { impl_GetBufferSubData(target, offset, size, data); debug_helper(loc, 0, target, offset, size, data);  }
    MapBuffer :: proc "c" (target: Enum, access: Enum, loc := #caller_location) -> rawptr { ret := impl_MapBuffer(target, access); debug_helper(loc, 1, ret, target, access); return ret }
    UnmapBuffer :: proc "c" (target: Enum, loc := #caller_location) -> boolean { ret := impl_UnmapBuffer(target); debug_helper(loc, 1, ret, target); return ret }
    GetBufferParameteriv :: proc "c" (target: Enum, pname: Enum, params: [^]int, loc := #caller_location) { impl_GetBufferParameteriv(target, pname, params); debug_helper(loc, 0, target, pname, params);  }
    GetBufferPointerv :: proc "c" (target: Enum, pname: Enum, params: [^]rawptr, loc := #caller_location) { impl_GetBufferPointerv(target, pname, params); debug_helper(loc, 0, target, pname, params);  }
    BlendEquationSeparate :: proc "c" (modeRGB: Enum, modeAlpha: Enum, loc := #caller_location) { impl_BlendEquationSeparate(modeRGB, modeAlpha); debug_helper(loc, 0, modeRGB, modeAlpha);  }
    DrawBuffers :: proc "c" (n: sizei, bufs: [^]Enum, loc := #caller_location) { impl_DrawBuffers(n, bufs); debug_helper(loc, 0, n, bufs);  }
    StencilOpSeparate :: proc "c" (face: Enum, sfail: Enum, dpfail: Enum, dppass: Enum, loc := #caller_location) { impl_StencilOpSeparate(face, sfail, dpfail, dppass); debug_helper(loc, 0, face, sfail, dpfail, dppass);  }
    StencilFuncSeparate :: proc "c" (face: Enum, func: Enum, ref: int, mask: uint, loc := #caller_location) { impl_StencilFuncSeparate(face, func, ref, mask); debug_helper(loc, 0, face, func, ref, mask);  }
    StencilMaskSeparate :: proc "c" (face: Enum, mask: uint, loc := #caller_location) { impl_StencilMaskSeparate(face, mask); debug_helper(loc, 0, face, mask);  }
    AttachShader :: proc "c" (program: uint, shader: uint, loc := #caller_location) { impl_AttachShader(program, shader); debug_helper(loc, 0, program, shader);  }
    BindAttribLocation :: proc "c" (program: uint, index: uint, name: cstring, loc := #caller_location) { impl_BindAttribLocation(program, index, name); debug_helper(loc, 0, program, index, name);  }
    CompileShader :: proc "c" (shader: uint, loc := #caller_location) { impl_CompileShader(shader); debug_helper(loc, 0, shader);  }
    CreateProgram :: proc "c" (loc := #caller_location) -> uint { ret := impl_CreateProgram(); debug_helper(loc, 1, ret); return ret }
    CreateShader :: proc "c" (type: Enum, loc := #caller_location) -> uint { ret := impl_CreateShader(type); debug_helper(loc, 1, ret, type); return ret }
    DeleteProgram :: proc "c" (program: uint, loc := #caller_location) { impl_DeleteProgram(program); debug_helper(loc, 0, program);  }
    DeleteShader :: proc "c" (shader: uint, loc := #caller_location) { impl_DeleteShader(shader); debug_helper(loc, 0, shader);  }
    DetachShader :: proc "c" (program: uint, shader: uint, loc := #caller_location) { impl_DetachShader(program, shader); debug_helper(loc, 0, program, shader);  }
    DisableVertexAttribArray :: proc "c" (index: uint, loc := #caller_location) { impl_DisableVertexAttribArray(index); debug_helper(loc, 0, index);  }
    EnableVertexAttribArray :: proc "c" (index: uint, loc := #caller_location) { impl_EnableVertexAttribArray(index); debug_helper(loc, 0, index);  }
    GetActiveAttrib :: proc "c" (program: uint, index: uint, bufSize: sizei, length: [^]sizei, size: [^]int, type: [^]Enum, name: [^]char, loc := #caller_location) { impl_GetActiveAttrib(program, index, bufSize, length, size, type, name); debug_helper(loc, 0, program, index, bufSize, length, size, type, name);  }
    GetActiveUniform :: proc "c" (program: uint, index: uint, bufSize: sizei, length: [^]sizei, size: [^]int, type: [^]Enum, name: [^]char, loc := #caller_location) { impl_GetActiveUniform(program, index, bufSize, length, size, type, name); debug_helper(loc, 0, program, index, bufSize, length, size, type, name);  }
    GetAttachedShaders :: proc "c" (program: uint, maxCount: sizei, count: [^]sizei, shaders: [^]uint, loc := #caller_location) { impl_GetAttachedShaders(program, maxCount, count, shaders); debug_helper(loc, 0, program, maxCount, count, shaders);  }
    GetAttribLocation :: proc "c" (program: uint, name: cstring, loc := #caller_location) -> int { ret := impl_GetAttribLocation(program, name); debug_helper(loc, 1, ret, program, name); return ret }
    GetProgramiv :: proc "c" (program: uint, pname: Enum, params: [^]int, loc := #caller_location) { impl_GetProgramiv(program, pname, params); debug_helper(loc, 0, program, pname, params);  }
    GetProgramInfoLog :: proc "c" (program: uint, bufSize: sizei, length: [^]sizei, infoLog: [^]char, loc := #caller_location) { impl_GetProgramInfoLog(program, bufSize, length, infoLog); debug_helper(loc, 0, program, bufSize, length, infoLog);  }
    GetShaderiv :: proc "c" (shader: uint, pname: Enum, params: [^]int, loc := #caller_location) { impl_GetShaderiv(shader, pname, params); debug_helper(loc, 0, shader, pname, params);  }
    GetShaderInfoLog :: proc "c" (shader: uint, bufSize: sizei, length: [^]sizei, infoLog: [^]char, loc := #caller_location) { impl_GetShaderInfoLog(shader, bufSize, length, infoLog); debug_helper(loc, 0, shader, bufSize, length, infoLog);  }
    GetShaderSource :: proc "c" (shader: uint, bufSize: sizei, length: [^]sizei, source: [^]char, loc := #caller_location) { impl_GetShaderSource(shader, bufSize, length, source); debug_helper(loc, 0, shader, bufSize, length, source);  }
    GetUniformLocation :: proc "c" (program: uint, name: cstring, loc := #caller_location) -> int { ret := impl_GetUniformLocation(program, name); debug_helper(loc, 1, ret, program, name); return ret }
    GetUniformfv :: proc "c" (program: uint, location: int, params: [^]float, loc := #caller_location) { impl_GetUniformfv(program, location, params); debug_helper(loc, 0, program, location, params);  }
    GetUniformiv :: proc "c" (program: uint, location: int, params: [^]int, loc := #caller_location) { impl_GetUniformiv(program, location, params); debug_helper(loc, 0, program, location, params);  }
    GetVertexAttribdv :: proc "c" (index: uint, pname: Enum, params: [^]double, loc := #caller_location) { impl_GetVertexAttribdv(index, pname, params); debug_helper(loc, 0, index, pname, params);  }
    GetVertexAttribfv :: proc "c" (index: uint, pname: Enum, params: [^]float, loc := #caller_location) { impl_GetVertexAttribfv(index, pname, params); debug_helper(loc, 0, index, pname, params);  }
    GetVertexAttribiv :: proc "c" (index: uint, pname: Enum, params: [^]int, loc := #caller_location) { impl_GetVertexAttribiv(index, pname, params); debug_helper(loc, 0, index, pname, params);  }
    GetVertexAttribPointerv :: proc "c" (index: uint, pname: Enum, pointer: [^]rawptr, loc := #caller_location) { impl_GetVertexAttribPointerv(index, pname, pointer); debug_helper(loc, 0, index, pname, pointer);  }
    IsProgram :: proc "c" (program: uint, loc := #caller_location) -> boolean { ret := impl_IsProgram(program); debug_helper(loc, 1, ret, program); return ret }
    IsShader :: proc "c" (shader: uint, loc := #caller_location) -> boolean { ret := impl_IsShader(shader); debug_helper(loc, 1, ret, shader); return ret }
    LinkProgram :: proc "c" (program: uint, loc := #caller_location) { impl_LinkProgram(program); debug_helper(loc, 0, program);  }
    ShaderSource :: proc "c" (shader: uint, count: sizei, string: [^]cstring, length: [^]int, loc := #caller_location) { impl_ShaderSource(shader, count, string, length); debug_helper(loc, 0, shader, count, string, length);  }
    UseProgram :: proc "c" (program: uint, loc := #caller_location) { impl_UseProgram(program); debug_helper(loc, 0, program);  }
    Uniform1f :: proc "c" (location: int, v0: float, loc := #caller_location) { impl_Uniform1f(location, v0); debug_helper(loc, 0, location, v0);  }
    Uniform2f :: proc "c" (location: int, v0: float, v1: float, loc := #caller_location) { impl_Uniform2f(location, v0, v1); debug_helper(loc, 0, location, v0, v1);  }
    Uniform3f :: proc "c" (location: int, v0: float, v1: float, v2: float, loc := #caller_location) { impl_Uniform3f(location, v0, v1, v2); debug_helper(loc, 0, location, v0, v1, v2);  }
    Uniform4f :: proc "c" (location: int, v0: float, v1: float, v2: float, v3: float, loc := #caller_location) { impl_Uniform4f(location, v0, v1, v2, v3); debug_helper(loc, 0, location, v0, v1, v2, v3);  }
    Uniform1i :: proc "c" (location: int, v0: int, loc := #caller_location) { impl_Uniform1i(location, v0); debug_helper(loc, 0, location, v0);  }
    Uniform2i :: proc "c" (location: int, v0: int, v1: int, loc := #caller_location) { impl_Uniform2i(location, v0, v1); debug_helper(loc, 0, location, v0, v1);  }
    Uniform3i :: proc "c" (location: int, v0: int, v1: int, v2: int, loc := #caller_location) { impl_Uniform3i(location, v0, v1, v2); debug_helper(loc, 0, location, v0, v1, v2);  }
    Uniform4i :: proc "c" (location: int, v0: int, v1: int, v2: int, v3: int, loc := #caller_location) { impl_Uniform4i(location, v0, v1, v2, v3); debug_helper(loc, 0, location, v0, v1, v2, v3);  }
    Uniform1fv :: proc "c" (location: int, count: sizei, value: [^]float, loc := #caller_location) { impl_Uniform1fv(location, count, value); debug_helper(loc, 0, location, count, value);  }
    Uniform2fv :: proc "c" (location: int, count: sizei, value: [^]float, loc := #caller_location) { impl_Uniform2fv(location, count, value); debug_helper(loc, 0, location, count, value);  }
    Uniform3fv :: proc "c" (location: int, count: sizei, value: [^]float, loc := #caller_location) { impl_Uniform3fv(location, count, value); debug_helper(loc, 0, location, count, value);  }
    Uniform4fv :: proc "c" (location: int, count: sizei, value: [^]float, loc := #caller_location) { impl_Uniform4fv(location, count, value); debug_helper(loc, 0, location, count, value);  }
    Uniform1iv :: proc "c" (location: int, count: sizei, value: [^]int, loc := #caller_location) { impl_Uniform1iv(location, count, value); debug_helper(loc, 0, location, count, value);  }
    Uniform2iv :: proc "c" (location: int, count: sizei, value: [^]int, loc := #caller_location) { impl_Uniform2iv(location, count, value); debug_helper(loc, 0, location, count, value);  }
    Uniform3iv :: proc "c" (location: int, count: sizei, value: [^]int, loc := #caller_location) { impl_Uniform3iv(location, count, value); debug_helper(loc, 0, location, count, value);  }
    Uniform4iv :: proc "c" (location: int, count: sizei, value: [^]int, loc := #caller_location) { impl_Uniform4iv(location, count, value); debug_helper(loc, 0, location, count, value);  }
    UniformMatrix2fv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]float, loc := #caller_location) { impl_UniformMatrix2fv(location, count, transpose, value); debug_helper(loc, 0, location, count, transpose, value);  }
    UniformMatrix3fv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]float, loc := #caller_location) { impl_UniformMatrix3fv(location, count, transpose, value); debug_helper(loc, 0, location, count, transpose, value);  }
    UniformMatrix4fv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]float, loc := #caller_location) { impl_UniformMatrix4fv(location, count, transpose, value); debug_helper(loc, 0, location, count, transpose, value);  }
    ValidateProgram :: proc "c" (program: uint, loc := #caller_location) { impl_ValidateProgram(program); debug_helper(loc, 0, program);  }
    VertexAttrib1d :: proc "c" (index: uint, x: double, loc := #caller_location) { impl_VertexAttrib1d(index, x); debug_helper(loc, 0, index, x);  }
    VertexAttrib1dv :: proc "c" (index: uint, v: [^]double, loc := #caller_location) { impl_VertexAttrib1dv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttrib1f :: proc "c" (index: uint, x: float, loc := #caller_location) { impl_VertexAttrib1f(index, x); debug_helper(loc, 0, index, x);  }
    VertexAttrib1fv :: proc "c" (index: uint, v: [^]float, loc := #caller_location) { impl_VertexAttrib1fv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttrib1s :: proc "c" (index: uint, x: short, loc := #caller_location) { impl_VertexAttrib1s(index, x); debug_helper(loc, 0, index, x);  }
    VertexAttrib1sv :: proc "c" (index: uint, v: [^]short, loc := #caller_location) { impl_VertexAttrib1sv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttrib2d :: proc "c" (index: uint, x: double, y: double, loc := #caller_location) { impl_VertexAttrib2d(index, x, y); debug_helper(loc, 0, index, x, y);  }
    VertexAttrib2dv :: proc "c" (index: uint, v: [^]double, loc := #caller_location) { impl_VertexAttrib2dv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttrib2f :: proc "c" (index: uint, x: float, y: float, loc := #caller_location) { impl_VertexAttrib2f(index, x, y); debug_helper(loc, 0, index, x, y);  }
    VertexAttrib2fv :: proc "c" (index: uint, v: [^]float, loc := #caller_location) { impl_VertexAttrib2fv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttrib2s :: proc "c" (index: uint, x: short, y: short, loc := #caller_location) { impl_VertexAttrib2s(index, x, y); debug_helper(loc, 0, index, x, y);  }
    VertexAttrib2sv :: proc "c" (index: uint, v: [^]short, loc := #caller_location) { impl_VertexAttrib2sv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttrib3d :: proc "c" (index: uint, x: double, y: double, z: double, loc := #caller_location) { impl_VertexAttrib3d(index, x, y, z); debug_helper(loc, 0, index, x, y, z);  }
    VertexAttrib3dv :: proc "c" (index: uint, v: [^]double, loc := #caller_location) { impl_VertexAttrib3dv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttrib3f :: proc "c" (index: uint, x: float, y: float, z: float, loc := #caller_location) { impl_VertexAttrib3f(index, x, y, z); debug_helper(loc, 0, index, x, y, z);  }
    VertexAttrib3fv :: proc "c" (index: uint, v: [^]float, loc := #caller_location) { impl_VertexAttrib3fv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttrib3s :: proc "c" (index: uint, x: short, y: short, z: short, loc := #caller_location) { impl_VertexAttrib3s(index, x, y, z); debug_helper(loc, 0, index, x, y, z);  }
    VertexAttrib3sv :: proc "c" (index: uint, v: [^]short, loc := #caller_location) { impl_VertexAttrib3sv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttrib4Nbv :: proc "c" (index: uint, v: [^]byte, loc := #caller_location) { impl_VertexAttrib4Nbv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttrib4Niv :: proc "c" (index: uint, v: [^]int, loc := #caller_location) { impl_VertexAttrib4Niv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttrib4Nsv :: proc "c" (index: uint, v: [^]short, loc := #caller_location) { impl_VertexAttrib4Nsv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttrib4Nub :: proc "c" (index: uint, x: ubyte, y: ubyte, z: ubyte, w: ubyte, loc := #caller_location) { impl_VertexAttrib4Nub(index, x, y, z, w); debug_helper(loc, 0, index, x, y, z, w);  }
    VertexAttrib4Nubv :: proc "c" (index: uint, v: cstring, loc := #caller_location) { impl_VertexAttrib4Nubv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttrib4Nuiv :: proc "c" (index: uint, v: [^]uint, loc := #caller_location) { impl_VertexAttrib4Nuiv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttrib4Nusv :: proc "c" (index: uint, v: [^]ushort, loc := #caller_location) { impl_VertexAttrib4Nusv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttrib4bv :: proc "c" (index: uint, v: [^]byte, loc := #caller_location) { impl_VertexAttrib4bv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttrib4d :: proc "c" (index: uint, x: double, y: double, z: double, w: double, loc := #caller_location) { impl_VertexAttrib4d(index, x, y, z, w); debug_helper(loc, 0, index, x, y, z, w);  }
    VertexAttrib4dv :: proc "c" (index: uint, v: [^]double, loc := #caller_location) { impl_VertexAttrib4dv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttrib4f :: proc "c" (index: uint, x: float, y: float, z: float, w: float, loc := #caller_location) { impl_VertexAttrib4f(index, x, y, z, w); debug_helper(loc, 0, index, x, y, z, w);  }
    VertexAttrib4fv :: proc "c" (index: uint, v: [^]float, loc := #caller_location) { impl_VertexAttrib4fv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttrib4iv :: proc "c" (index: uint, v: [^]int, loc := #caller_location) { impl_VertexAttrib4iv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttrib4s :: proc "c" (index: uint, x: short, y: short, z: short, w: short, loc := #caller_location) { impl_VertexAttrib4s(index, x, y, z, w); debug_helper(loc, 0, index, x, y, z, w);  }
    VertexAttrib4sv :: proc "c" (index: uint, v: [^]short, loc := #caller_location) { impl_VertexAttrib4sv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttrib4ubv :: proc "c" (index: uint, v: cstring, loc := #caller_location) { impl_VertexAttrib4ubv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttrib4uiv :: proc "c" (index: uint, v: [^]uint, loc := #caller_location) { impl_VertexAttrib4uiv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttrib4usv :: proc "c" (index: uint, v: [^]ushort, loc := #caller_location) { impl_VertexAttrib4usv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttribPointer :: proc "c" (index: uint, size: int, type: Enum, normalized: boolean, stride: sizei, pointer: uintptr, loc := #caller_location) { impl_VertexAttribPointer(index, size, type, normalized, stride, pointer); debug_helper(loc, 0, index, size, type, normalized, stride, pointer);  }
    UniformMatrix2x3fv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]float, loc := #caller_location) { impl_UniformMatrix2x3fv(location, count, transpose, value); debug_helper(loc, 0, location, count, transpose, value);  }
    UniformMatrix3x2fv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]float, loc := #caller_location) { impl_UniformMatrix3x2fv(location, count, transpose, value); debug_helper(loc, 0, location, count, transpose, value);  }
    UniformMatrix2x4fv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]float, loc := #caller_location) { impl_UniformMatrix2x4fv(location, count, transpose, value); debug_helper(loc, 0, location, count, transpose, value);  }
    UniformMatrix4x2fv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]float, loc := #caller_location) { impl_UniformMatrix4x2fv(location, count, transpose, value); debug_helper(loc, 0, location, count, transpose, value);  }
    UniformMatrix3x4fv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]float, loc := #caller_location) { impl_UniformMatrix3x4fv(location, count, transpose, value); debug_helper(loc, 0, location, count, transpose, value);  }
    UniformMatrix4x3fv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]float, loc := #caller_location) { impl_UniformMatrix4x3fv(location, count, transpose, value); debug_helper(loc, 0, location, count, transpose, value);  }
    ColorMaski :: proc "c" (index: uint, r: boolean, g: boolean, b: boolean, a: boolean, loc := #caller_location) { impl_ColorMaski(index, r, g, b, a); debug_helper(loc, 0, index, r, g, b, a);  }
    GetBooleani_v :: proc "c" (target: Enum, index: uint, data: [^]boolean, loc := #caller_location) { impl_GetBooleani_v(target, index, data); debug_helper(loc, 0, target, index, data);  }
    GetIntegeri_v :: proc "c" (target: Enum, index: uint, data: [^]int, loc := #caller_location) { impl_GetIntegeri_v(target, index, data); debug_helper(loc, 0, target, index, data);  }
    Enablei :: proc "c" (target: Enum, index: uint, loc := #caller_location) { impl_Enablei(target, index); debug_helper(loc, 0, target, index);  }
    Disablei :: proc "c" (target: Enum, index: uint, loc := #caller_location) { impl_Disablei(target, index); debug_helper(loc, 0, target, index);  }
    IsEnabledi :: proc "c" (target: Enum, index: uint, loc := #caller_location) -> boolean { ret := impl_IsEnabledi(target, index); debug_helper(loc, 1, ret, target, index); return ret }
    BeginTransformFeedback :: proc "c" (primitiveMode: Enum, loc := #caller_location) { impl_BeginTransformFeedback(primitiveMode); debug_helper(loc, 0, primitiveMode);  }
    EndTransformFeedback :: proc "c" (loc := #caller_location) { impl_EndTransformFeedback(); debug_helper(loc, 0);  }
    BindBufferRange :: proc "c" (target: Enum, index: uint, buffer: uint, offset: intptr, size: sizeiptr, loc := #caller_location) { impl_BindBufferRange(target, index, buffer, offset, size); debug_helper(loc, 0, target, index, buffer, offset, size);  }
    BindBufferBase :: proc "c" (target: Enum, index: uint, buffer: uint, loc := #caller_location) { impl_BindBufferBase(target, index, buffer); debug_helper(loc, 0, target, index, buffer);  }
    TransformFeedbackVaryings :: proc "c" (program: uint, count: sizei, varyings: [^]cstring, bufferMode: Enum, loc := #caller_location) { impl_TransformFeedbackVaryings(program, count, varyings, bufferMode); debug_helper(loc, 0, program, count, varyings, bufferMode);  }
    GetTransformFeedbackVarying :: proc "c" (program: uint, index: uint, bufSize: sizei, length: [^]sizei, size: [^]sizei, type: [^]Enum, name: [^]char, loc := #caller_location) { impl_GetTransformFeedbackVarying(program, index, bufSize, length, size, type, name); debug_helper(loc, 0, program, index, bufSize, length, size, type, name);  }
    ClampColor :: proc "c" (target: Enum, clamp: Enum, loc := #caller_location) { impl_ClampColor(target, clamp); debug_helper(loc, 0, target, clamp);  }
    BeginConditionalRender :: proc "c" (id: uint, mode: Enum, loc := #caller_location) { impl_BeginConditionalRender(id, mode); debug_helper(loc, 0, id, mode);  }
    EndConditionalRender :: proc "c" (loc := #caller_location) { impl_EndConditionalRender(); debug_helper(loc, 0);  }
    VertexAttribIPointer :: proc "c" (index: uint, size: int, type: Enum, stride: sizei, pointer: rawptr, loc := #caller_location) { impl_VertexAttribIPointer(index, size, type, stride, pointer); debug_helper(loc, 0, index, size, type, stride, pointer);  }
    GetVertexAttribIiv :: proc "c" (index: uint, pname: Enum, params: [^]int, loc := #caller_location) { impl_GetVertexAttribIiv(index, pname, params); debug_helper(loc, 0, index, pname, params);  }
    GetVertexAttribIuiv :: proc "c" (index: uint, pname: Enum, params: [^]uint, loc := #caller_location) { impl_GetVertexAttribIuiv(index, pname, params); debug_helper(loc, 0, index, pname, params);  }
    VertexAttribI1i :: proc "c" (index: uint, x: int, loc := #caller_location) { impl_VertexAttribI1i(index, x); debug_helper(loc, 0, index, x);  }
    VertexAttribI2i :: proc "c" (index: uint, x: int, y: int, loc := #caller_location) { impl_VertexAttribI2i(index, x, y); debug_helper(loc, 0, index, x, y);  }
    VertexAttribI3i :: proc "c" (index: uint, x: int, y: int, z: int, loc := #caller_location) { impl_VertexAttribI3i(index, x, y, z); debug_helper(loc, 0, index, x, y, z);  }
    VertexAttribI4i :: proc "c" (index: uint, x: int, y: int, z: int, w: int, loc := #caller_location) { impl_VertexAttribI4i(index, x, y, z, w); debug_helper(loc, 0, index, x, y, z, w);  }
    VertexAttribI1ui :: proc "c" (index: uint, x: uint, loc := #caller_location) { impl_VertexAttribI1ui(index, x); debug_helper(loc, 0, index, x);  }
    VertexAttribI2ui :: proc "c" (index: uint, x: uint, y: uint, loc := #caller_location) { impl_VertexAttribI2ui(index, x, y); debug_helper(loc, 0, index, x, y);  }
    VertexAttribI3ui :: proc "c" (index: uint, x: uint, y: uint, z: uint, loc := #caller_location) { impl_VertexAttribI3ui(index, x, y, z); debug_helper(loc, 0, index, x, y, z);  }
    VertexAttribI4ui :: proc "c" (index: uint, x: uint, y: uint, z: uint, w: uint, loc := #caller_location) { impl_VertexAttribI4ui(index, x, y, z, w); debug_helper(loc, 0, index, x, y, z, w);  }
    VertexAttribI1iv :: proc "c" (index: uint, v: [^]int, loc := #caller_location) { impl_VertexAttribI1iv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttribI2iv :: proc "c" (index: uint, v: [^]int, loc := #caller_location) { impl_VertexAttribI2iv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttribI3iv :: proc "c" (index: uint, v: [^]int, loc := #caller_location) { impl_VertexAttribI3iv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttribI4iv :: proc "c" (index: uint, v: [^]int, loc := #caller_location) { impl_VertexAttribI4iv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttribI1uiv :: proc "c" (index: uint, v: [^]uint, loc := #caller_location) { impl_VertexAttribI1uiv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttribI2uiv :: proc "c" (index: uint, v: [^]uint, loc := #caller_location) { impl_VertexAttribI2uiv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttribI3uiv :: proc "c" (index: uint, v: [^]uint, loc := #caller_location) { impl_VertexAttribI3uiv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttribI4uiv :: proc "c" (index: uint, v: [^]uint, loc := #caller_location) { impl_VertexAttribI4uiv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttribI4bv :: proc "c" (index: uint, v: [^]byte, loc := #caller_location) { impl_VertexAttribI4bv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttribI4sv :: proc "c" (index: uint, v: [^]short, loc := #caller_location) { impl_VertexAttribI4sv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttribI4ubv :: proc "c" (index: uint, v: cstring, loc := #caller_location) { impl_VertexAttribI4ubv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttribI4usv :: proc "c" (index: uint, v: [^]ushort, loc := #caller_location) { impl_VertexAttribI4usv(index, v); debug_helper(loc, 0, index, v);  }
    GetUniformuiv :: proc "c" (program: uint, location: int, params: [^]uint, loc := #caller_location) { impl_GetUniformuiv(program, location, params); debug_helper(loc, 0, program, location, params);  }
    BindFragDataLocation :: proc "c" (program: uint, color: uint, name: cstring, loc := #caller_location) { impl_BindFragDataLocation(program, color, name); debug_helper(loc, 0, program, color, name);  }
    GetFragDataLocation :: proc "c" (program: uint, name: cstring, loc := #caller_location) -> int { ret := impl_GetFragDataLocation(program, name); debug_helper(loc, 1, ret, program, name); return ret }
    Uniform1ui :: proc "c" (location: int, v0: uint, loc := #caller_location) { impl_Uniform1ui(location, v0); debug_helper(loc, 0, location, v0);  }
    Uniform2ui :: proc "c" (location: int, v0: uint, v1: uint, loc := #caller_location) { impl_Uniform2ui(location, v0, v1); debug_helper(loc, 0, location, v0, v1);  }
    Uniform3ui :: proc "c" (location: int, v0: uint, v1: uint, v2: uint, loc := #caller_location) { impl_Uniform3ui(location, v0, v1, v2); debug_helper(loc, 0, location, v0, v1, v2);  }
    Uniform4ui :: proc "c" (location: int, v0: uint, v1: uint, v2: uint, v3: uint, loc := #caller_location) { impl_Uniform4ui(location, v0, v1, v2, v3); debug_helper(loc, 0, location, v0, v1, v2, v3);  }
    Uniform1uiv :: proc "c" (location: int, count: sizei, value: [^]uint, loc := #caller_location) { impl_Uniform1uiv(location, count, value); debug_helper(loc, 0, location, count, value);  }
    Uniform2uiv :: proc "c" (location: int, count: sizei, value: [^]uint, loc := #caller_location) { impl_Uniform2uiv(location, count, value); debug_helper(loc, 0, location, count, value);  }
    Uniform3uiv :: proc "c" (location: int, count: sizei, value: [^]uint, loc := #caller_location) { impl_Uniform3uiv(location, count, value); debug_helper(loc, 0, location, count, value);  }
    Uniform4uiv :: proc "c" (location: int, count: sizei, value: [^]uint, loc := #caller_location) { impl_Uniform4uiv(location, count, value); debug_helper(loc, 0, location, count, value);  }
    TexParameterIiv :: proc "c" (target: Enum, pname: Enum, params: [^]int, loc := #caller_location) { impl_TexParameterIiv(target, pname, params); debug_helper(loc, 0, target, pname, params);  }
    TexParameterIuiv :: proc "c" (target: Enum, pname: Enum, params: [^]uint, loc := #caller_location) { impl_TexParameterIuiv(target, pname, params); debug_helper(loc, 0, target, pname, params);  }
    GetTexParameterIiv :: proc "c" (target: Enum, pname: Enum, params: [^]int, loc := #caller_location) { impl_GetTexParameterIiv(target, pname, params); debug_helper(loc, 0, target, pname, params);  }
    GetTexParameterIuiv :: proc "c" (target: Enum, pname: Enum, params: [^]uint, loc := #caller_location) { impl_GetTexParameterIuiv(target, pname, params); debug_helper(loc, 0, target, pname, params);  }
    ClearBufferiv :: proc "c" (buffer: Enum, drawbuffer: int, value: [^]int, loc := #caller_location) { impl_ClearBufferiv(buffer, drawbuffer, value); debug_helper(loc, 0, buffer, drawbuffer, value);  }
    ClearBufferuiv :: proc "c" (buffer: Enum, drawbuffer: int, value: [^]uint, loc := #caller_location) { impl_ClearBufferuiv(buffer, drawbuffer, value); debug_helper(loc, 0, buffer, drawbuffer, value);  }
    ClearBufferfv :: proc "c" (buffer: Enum, drawbuffer: int, value: [^]float, loc := #caller_location) { impl_ClearBufferfv(buffer, drawbuffer, value); debug_helper(loc, 0, buffer, drawbuffer, value);  }
    ClearBufferfi :: proc "c" (buffer: Enum, drawbuffer: int, depth: float, stencil: int, loc := #caller_location) { impl_ClearBufferfi(buffer, drawbuffer, depth, stencil); debug_helper(loc, 0, buffer, drawbuffer, depth, stencil);  }
    GetStringi :: proc "c" (name: Enum, index: uint, loc := #caller_location) -> cstring { ret := impl_GetStringi(name, index); debug_helper(loc, 1, ret, name, index); return ret }
    IsRenderbuffer :: proc "c" (renderbuffer: uint, loc := #caller_location) -> boolean { ret := impl_IsRenderbuffer(renderbuffer); debug_helper(loc, 1, ret, renderbuffer); return ret }
    BindRenderbuffer :: proc "c" (target: Enum, renderbuffer: uint, loc := #caller_location) { impl_BindRenderbuffer(target, renderbuffer); debug_helper(loc, 0, target, renderbuffer);  }
    DeleteRenderbuffers :: proc "c" (n: sizei, renderbuffers: [^]uint, loc := #caller_location) { impl_DeleteRenderbuffers(n, renderbuffers); debug_helper(loc, 0, n, renderbuffers);  }
    GenRenderbuffers :: proc "c" (n: sizei, renderbuffers: [^]uint, loc := #caller_location) { impl_GenRenderbuffers(n, renderbuffers); debug_helper(loc, 0, n, renderbuffers);  }
    RenderbufferStorage :: proc "c" (target: Enum, internalformat: Enum, width: sizei, height: sizei, loc := #caller_location) { impl_RenderbufferStorage(target, internalformat, width, height); debug_helper(loc, 0, target, internalformat, width, height);  }
    GetRenderbufferParameteriv :: proc "c" (target: Enum, pname: Enum, params: [^]int, loc := #caller_location) { impl_GetRenderbufferParameteriv(target, pname, params); debug_helper(loc, 0, target, pname, params);  }
    IsFramebuffer :: proc "c" (framebuffer: uint, loc := #caller_location) -> boolean { ret := impl_IsFramebuffer(framebuffer); debug_helper(loc, 1, ret, framebuffer); return ret }
    BindFramebuffer :: proc "c" (target: Enum, framebuffer: uint, loc := #caller_location) { impl_BindFramebuffer(target, framebuffer); debug_helper(loc, 0, target, framebuffer);  }
    DeleteFramebuffers :: proc "c" (n: sizei, framebuffers: [^]uint, loc := #caller_location) { impl_DeleteFramebuffers(n, framebuffers); debug_helper(loc, 0, n, framebuffers);  }
    GenFramebuffers :: proc "c" (n: sizei, framebuffers: [^]uint, loc := #caller_location) { impl_GenFramebuffers(n, framebuffers); debug_helper(loc, 0, n, framebuffers);  }
    CheckFramebufferStatus :: proc "c" (target: Enum, loc := #caller_location) -> Enum { ret := impl_CheckFramebufferStatus(target); debug_helper(loc, 1, ret, target); return ret }
    FramebufferTexture1D :: proc "c" (target: Enum, attachment: Enum, textarget: Enum, texture: uint, level: int, loc := #caller_location) { impl_FramebufferTexture1D(target, attachment, textarget, texture, level); debug_helper(loc, 0, target, attachment, textarget, texture, level);  }
    FramebufferTexture2D :: proc "c" (target: Enum, attachment: Enum, textarget: Enum, texture: uint, level: int, loc := #caller_location) { impl_FramebufferTexture2D(target, attachment, textarget, texture, level); debug_helper(loc, 0, target, attachment, textarget, texture, level);  }
    FramebufferTexture3D :: proc "c" (target: Enum, attachment: Enum, textarget: Enum, texture: uint, level: int, zoffset: int, loc := #caller_location) { impl_FramebufferTexture3D(target, attachment, textarget, texture, level, zoffset); debug_helper(loc, 0, target, attachment, textarget, texture, level, zoffset);  }
    FramebufferRenderbuffer :: proc "c" (target: Enum, attachment: Enum, renderbuffertarget: Enum, renderbuffer: uint, loc := #caller_location) { impl_FramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer); debug_helper(loc, 0, target, attachment, renderbuffertarget, renderbuffer);  }
    GetFramebufferAttachmentParameteriv :: proc "c" (target: Enum, attachment: Enum, pname: Enum, params: [^]int, loc := #caller_location) { impl_GetFramebufferAttachmentParameteriv(target, attachment, pname, params); debug_helper(loc, 0, target, attachment, pname, params);  }
    GenerateMipmap :: proc "c" (target: Enum, loc := #caller_location) { impl_GenerateMipmap(target); debug_helper(loc, 0, target);  }
    BlitFramebuffer :: proc "c" (srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: bitfield, filter: Enum, loc := #caller_location) { impl_BlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); debug_helper(loc, 0, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);  }
    RenderbufferStorageMultisample :: proc "c" (target: Enum, samples: sizei, internalformat: Enum, width: sizei, height: sizei, loc := #caller_location) { impl_RenderbufferStorageMultisample(target, samples, internalformat, width, height); debug_helper(loc, 0, target, samples, internalformat, width, height);  }
    FramebufferTextureLayer :: proc "c" (target: Enum, attachment: Enum, texture: uint, level: int, layer: int, loc := #caller_location) { impl_FramebufferTextureLayer(target, attachment, texture, level, layer); debug_helper(loc, 0, target, attachment, texture, level, layer);  }
    MapBufferRange :: proc "c" (target: Enum, offset: intptr, length: sizeiptr, access: bitfield, loc := #caller_location) -> rawptr { ret := impl_MapBufferRange(target, offset, length, access); debug_helper(loc, 1, ret, target, offset, length, access); return ret }
    FlushMappedBufferRange :: proc "c" (target: Enum, offset: intptr, length: sizeiptr, loc := #caller_location) { impl_FlushMappedBufferRange(target, offset, length); debug_helper(loc, 0, target, offset, length);  }
    BindVertexArray :: proc "c" (array: uint, loc := #caller_location) { impl_BindVertexArray(array); debug_helper(loc, 0, array);  }
    DeleteVertexArrays :: proc "c" (n: sizei, arrays: [^]uint, loc := #caller_location) { impl_DeleteVertexArrays(n, arrays); debug_helper(loc, 0, n, arrays);  }
    GenVertexArrays :: proc "c" (n: sizei, arrays: [^]uint, loc := #caller_location) { impl_GenVertexArrays(n, arrays); debug_helper(loc, 0, n, arrays);  }
    IsVertexArray :: proc "c" (array: uint, loc := #caller_location) -> boolean { ret := impl_IsVertexArray(array); debug_helper(loc, 1, ret, array); return ret }
    DrawArraysInstanced :: proc "c" (mode: Enum, first: int, count: sizei, instancecount: sizei, loc := #caller_location) { impl_DrawArraysInstanced(mode, first, count, instancecount); debug_helper(loc, 0, mode, first, count, instancecount);  }
    DrawElementsInstanced :: proc "c" (mode: Enum, count: sizei, type: Enum, indices: rawptr, instancecount: sizei, loc := #caller_location) { impl_DrawElementsInstanced(mode, count, type, indices, instancecount); debug_helper(loc, 0, mode, count, type, indices, instancecount);  }
    TexBuffer :: proc "c" (target: Enum, internalformat: Enum, buffer: uint, loc := #caller_location) { impl_TexBuffer(target, internalformat, buffer); debug_helper(loc, 0, target, internalformat, buffer);  }
    PrimitiveRestartIndex :: proc "c" (index: uint, loc := #caller_location) { impl_PrimitiveRestartIndex(index); debug_helper(loc, 0, index);  }
    CopyBufferSubData :: proc "c" (readTarget: Enum, writeTarget: Enum, readOffset: intptr, writeOffset: intptr, size: sizeiptr, loc := #caller_location) { impl_CopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size); debug_helper(loc, 0, readTarget, writeTarget, readOffset, writeOffset, size);  }
    GetUniformIndices :: proc "c" (program: uint, uniformCount: sizei, uniformNames: [^]cstring, uniformIndices: [^]uint, loc := #caller_location) { impl_GetUniformIndices(program, uniformCount, uniformNames, uniformIndices); debug_helper(loc, 0, program, uniformCount, uniformNames, uniformIndices);  }
    GetActiveUniformsiv :: proc "c" (program: uint, uniformCount: sizei, uniformIndices: [^]uint, pname: Enum, params: [^]int, loc := #caller_location) { impl_GetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params); debug_helper(loc, 0, program, uniformCount, uniformIndices, pname, params);  }
    GetActiveUniformName :: proc "c" (program: uint, uniformIndex: uint, bufSize: sizei, length: [^]sizei, uniformName: [^]char, loc := #caller_location) { impl_GetActiveUniformName(program, uniformIndex, bufSize, length, uniformName); debug_helper(loc, 0, program, uniformIndex, bufSize, length, uniformName);  }
    GetUniformBlockIndex :: proc "c" (program: uint, uniformBlockName: cstring, loc := #caller_location) -> uint { ret := impl_GetUniformBlockIndex(program, uniformBlockName); debug_helper(loc, 1, ret, program, uniformBlockName); return ret }
    GetActiveUniformBlockiv :: proc "c" (program: uint, uniformBlockIndex: uint, pname: Enum, params: [^]int, loc := #caller_location) { impl_GetActiveUniformBlockiv(program, uniformBlockIndex, pname, params); debug_helper(loc, 0, program, uniformBlockIndex, pname, params);  }
    GetActiveUniformBlockName :: proc "c" (program: uint, uniformBlockIndex: uint, bufSize: sizei, length: [^]sizei, uniformBlockName: [^]char, loc := #caller_location) { impl_GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName); debug_helper(loc, 0, program, uniformBlockIndex, bufSize, length, uniformBlockName);  }
    UniformBlockBinding :: proc "c" (program: uint, uniformBlockIndex: uint, uniformBlockBinding: uint, loc := #caller_location) { impl_UniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding); debug_helper(loc, 0, program, uniformBlockIndex, uniformBlockBinding);  }
    DrawElementsBaseVertex :: proc "c" (mode: Enum, count: sizei, type: Enum, indices: rawptr, basevertex: int, loc := #caller_location) { impl_DrawElementsBaseVertex(mode, count, type, indices, basevertex); debug_helper(loc, 0, mode, count, type, indices, basevertex);  }
    DrawRangeElementsBaseVertex :: proc "c" (mode: Enum, start: uint, end: uint, count: sizei, type: Enum, indices: rawptr, basevertex: int, loc := #caller_location) { impl_DrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex); debug_helper(loc, 0, mode, start, end, count, type, indices, basevertex);  }
    DrawElementsInstancedBaseVertex :: proc "c" (mode: Enum, count: sizei, type: Enum, indices: rawptr, instancecount: sizei, basevertex: int, loc := #caller_location) { impl_DrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex); debug_helper(loc, 0, mode, count, type, indices, instancecount, basevertex);  }
    MultiDrawElementsBaseVertex :: proc "c" (mode: Enum, count: [^]sizei, type: Enum, indices: [^]rawptr, drawcount: sizei, basevertex: [^]int, loc := #caller_location) { impl_MultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex); debug_helper(loc, 0, mode, count, type, indices, drawcount, basevertex);  }
    ProvokingVertex :: proc "c" (mode: Enum, loc := #caller_location) { impl_ProvokingVertex(mode); debug_helper(loc, 0, mode);  }
    FenceSync :: proc "c" (condition: Enum, flags: bitfield, loc := #caller_location) -> sync { ret := impl_FenceSync(condition, flags); debug_helper(loc, 1, ret, condition, flags); return ret }
    IsSync :: proc "c" (sync: sync, loc := #caller_location) -> boolean { ret := impl_IsSync(sync); debug_helper(loc, 1, ret, sync); return ret }
    DeleteSync :: proc "c" (sync: sync, loc := #caller_location) { impl_DeleteSync(sync); debug_helper(loc, 0, sync);  }
    ClientWaitSync :: proc "c" (sync: sync, flags: bitfield, timeout: uint64, loc := #caller_location) -> Enum { ret := impl_ClientWaitSync(sync, flags, timeout); debug_helper(loc, 1, ret, sync, flags, timeout); return ret }
    WaitSync :: proc "c" (sync: sync, flags: bitfield, timeout: uint64, loc := #caller_location) { impl_WaitSync(sync, flags, timeout); debug_helper(loc, 0, sync, flags, timeout);  }
    GetInteger64v :: proc "c" (pname: Enum, data: [^]int64, loc := #caller_location) { impl_GetInteger64v(pname, data); debug_helper(loc, 0, pname, data);  }
    GetSynciv :: proc "c" (sync: sync, pname: Enum, count: sizei, length: [^]sizei, values: [^]int, loc := #caller_location) { impl_GetSynciv(sync, pname, count, length, values); debug_helper(loc, 0, sync, pname, count, length, values);  }
    GetInteger64i_v :: proc "c" (target: Enum, index: uint, data: [^]int64, loc := #caller_location) { impl_GetInteger64i_v(target, index, data); debug_helper(loc, 0, target, index, data);  }
    GetBufferParameteri64v :: proc "c" (target: Enum, pname: Enum, params: [^]int64, loc := #caller_location) { impl_GetBufferParameteri64v(target, pname, params); debug_helper(loc, 0, target, pname, params);  }
    FramebufferTexture :: proc "c" (target: Enum, attachment: Enum, texture: uint, level: int, loc := #caller_location) { impl_FramebufferTexture(target, attachment, texture, level); debug_helper(loc, 0, target, attachment, texture, level);  }
    TexImage2DMultisample :: proc "c" (target: Enum, samples: sizei, internalformat: Enum, width: sizei, height: sizei, fixedsamplelocations: boolean, loc := #caller_location) { impl_TexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations); debug_helper(loc, 0, target, samples, internalformat, width, height, fixedsamplelocations);  }
    TexImage3DMultisample :: proc "c" (target: Enum, samples: sizei, internalformat: Enum, width: sizei, height: sizei, depth: sizei, fixedsamplelocations: boolean, loc := #caller_location) { impl_TexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations); debug_helper(loc, 0, target, samples, internalformat, width, height, depth, fixedsamplelocations);  }
    GetMultisamplefv :: proc "c" (pname: Enum, index: uint, val: [^]float, loc := #caller_location) { impl_GetMultisamplefv(pname, index, val); debug_helper(loc, 0, pname, index, val);  }
    SampleMaski :: proc "c" (maskNumber: uint, mask: bitfield, loc := #caller_location) { impl_SampleMaski(maskNumber, mask); debug_helper(loc, 0, maskNumber, mask);  }
    BindFragDataLocationIndexed :: proc "c" (program: uint, colorNumber: uint, index: uint, name: cstring, loc := #caller_location) { impl_BindFragDataLocationIndexed(program, colorNumber, index, name); debug_helper(loc, 0, program, colorNumber, index, name);  }
    GetFragDataIndex :: proc "c" (program: uint, name: cstring, loc := #caller_location) -> int { ret := impl_GetFragDataIndex(program, name); debug_helper(loc, 1, ret, program, name); return ret }
    GenSamplers :: proc "c" (count: sizei, samplers: [^]uint, loc := #caller_location) { impl_GenSamplers(count, samplers); debug_helper(loc, 0, count, samplers);  }
    DeleteSamplers :: proc "c" (count: sizei, samplers: [^]uint, loc := #caller_location) { impl_DeleteSamplers(count, samplers); debug_helper(loc, 0, count, samplers);  }
    IsSampler :: proc "c" (sampler: uint, loc := #caller_location) -> boolean { ret := impl_IsSampler(sampler); debug_helper(loc, 1, ret, sampler); return ret }
    BindSampler :: proc "c" (unit: uint, sampler: uint, loc := #caller_location) { impl_BindSampler(unit, sampler); debug_helper(loc, 0, unit, sampler);  }
    SamplerParameteri :: proc "c" (sampler: uint, pname: Enum, param: int, loc := #caller_location) { impl_SamplerParameteri(sampler, pname, param); debug_helper(loc, 0, sampler, pname, param);  }
    SamplerParameteriv :: proc "c" (sampler: uint, pname: Enum, param: [^]int, loc := #caller_location) { impl_SamplerParameteriv(sampler, pname, param); debug_helper(loc, 0, sampler, pname, param);  }
    SamplerParameterf :: proc "c" (sampler: uint, pname: Enum, param: float, loc := #caller_location) { impl_SamplerParameterf(sampler, pname, param); debug_helper(loc, 0, sampler, pname, param);  }
    SamplerParameterfv :: proc "c" (sampler: uint, pname: Enum, param: [^]float, loc := #caller_location) { impl_SamplerParameterfv(sampler, pname, param); debug_helper(loc, 0, sampler, pname, param);  }
    SamplerParameterIiv :: proc "c" (sampler: uint, pname: Enum, param: [^]int, loc := #caller_location) { impl_SamplerParameterIiv(sampler, pname, param); debug_helper(loc, 0, sampler, pname, param);  }
    SamplerParameterIuiv :: proc "c" (sampler: uint, pname: Enum, param: [^]uint, loc := #caller_location) { impl_SamplerParameterIuiv(sampler, pname, param); debug_helper(loc, 0, sampler, pname, param);  }
    GetSamplerParameteriv :: proc "c" (sampler: uint, pname: Enum, params: [^]int, loc := #caller_location) { impl_GetSamplerParameteriv(sampler, pname, params); debug_helper(loc, 0, sampler, pname, params);  }
    GetSamplerParameterIiv :: proc "c" (sampler: uint, pname: Enum, params: [^]int, loc := #caller_location) { impl_GetSamplerParameterIiv(sampler, pname, params); debug_helper(loc, 0, sampler, pname, params);  }
    GetSamplerParameterfv :: proc "c" (sampler: uint, pname: Enum, params: [^]float, loc := #caller_location) { impl_GetSamplerParameterfv(sampler, pname, params); debug_helper(loc, 0, sampler, pname, params);  }
    GetSamplerParameterIuiv :: proc "c" (sampler: uint, pname: Enum, params: [^]uint, loc := #caller_location) { impl_GetSamplerParameterIuiv(sampler, pname, params); debug_helper(loc, 0, sampler, pname, params);  }
    QueryCounter :: proc "c" (id: uint, target: Enum, loc := #caller_location) { impl_QueryCounter(id, target); debug_helper(loc, 0, id, target);  }
    GetQueryObjecti64v :: proc "c" (id: uint, pname: Enum, params: [^]int64, loc := #caller_location) { impl_GetQueryObjecti64v(id, pname, params); debug_helper(loc, 0, id, pname, params);  }
    GetQueryObjectui64v :: proc "c" (id: uint, pname: Enum, params: [^]uint64, loc := #caller_location) { impl_GetQueryObjectui64v(id, pname, params); debug_helper(loc, 0, id, pname, params);  }
    VertexAttribDivisor :: proc "c" (index: uint, divisor: uint, loc := #caller_location) { impl_VertexAttribDivisor(index, divisor); debug_helper(loc, 0, index, divisor);  }
    VertexAttribP1ui :: proc "c" (index: uint, type: Enum, normalized: boolean, value: uint, loc := #caller_location) { impl_VertexAttribP1ui(index, type, normalized, value); debug_helper(loc, 0, index, type, normalized, value);  }
    VertexAttribP1uiv :: proc "c" (index: uint, type: Enum, normalized: boolean, value: [^]uint, loc := #caller_location) { impl_VertexAttribP1uiv(index, type, normalized, value); debug_helper(loc, 0, index, type, normalized, value);  }
    VertexAttribP2ui :: proc "c" (index: uint, type: Enum, normalized: boolean, value: uint, loc := #caller_location) { impl_VertexAttribP2ui(index, type, normalized, value); debug_helper(loc, 0, index, type, normalized, value);  }
    VertexAttribP2uiv :: proc "c" (index: uint, type: Enum, normalized: boolean, value: [^]uint, loc := #caller_location) { impl_VertexAttribP2uiv(index, type, normalized, value); debug_helper(loc, 0, index, type, normalized, value);  }
    VertexAttribP3ui :: proc "c" (index: uint, type: Enum, normalized: boolean, value: uint, loc := #caller_location) { impl_VertexAttribP3ui(index, type, normalized, value); debug_helper(loc, 0, index, type, normalized, value);  }
    VertexAttribP3uiv :: proc "c" (index: uint, type: Enum, normalized: boolean, value: [^]uint, loc := #caller_location) { impl_VertexAttribP3uiv(index, type, normalized, value); debug_helper(loc, 0, index, type, normalized, value);  }
    VertexAttribP4ui :: proc "c" (index: uint, type: Enum, normalized: boolean, value: uint, loc := #caller_location) { impl_VertexAttribP4ui(index, type, normalized, value); debug_helper(loc, 0, index, type, normalized, value);  }
    VertexAttribP4uiv :: proc "c" (index: uint, type: Enum, normalized: boolean, value: [^]uint, loc := #caller_location) { impl_VertexAttribP4uiv(index, type, normalized, value); debug_helper(loc, 0, index, type, normalized, value);  }
    MinSampleShading :: proc "c" (value: float, loc := #caller_location) { impl_MinSampleShading(value); debug_helper(loc, 0, value);  }
    BlendEquationi :: proc "c" (buf: uint, mode: Enum, loc := #caller_location) { impl_BlendEquationi(buf, mode); debug_helper(loc, 0, buf, mode);  }
    BlendEquationSeparatei :: proc "c" (buf: uint, modeRGB: Enum, modeAlpha: Enum, loc := #caller_location) { impl_BlendEquationSeparatei(buf, modeRGB, modeAlpha); debug_helper(loc, 0, buf, modeRGB, modeAlpha);  }
    BlendFunci :: proc "c" (buf: uint, src: Enum, dst: Enum, loc := #caller_location) { impl_BlendFunci(buf, src, dst); debug_helper(loc, 0, buf, src, dst);  }
    BlendFuncSeparatei :: proc "c" (buf: uint, srcRGB: Enum, dstRGB: Enum, srcAlpha: Enum, dstAlpha: Enum, loc := #caller_location) { impl_BlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); debug_helper(loc, 0, buf, srcRGB, dstRGB, srcAlpha, dstAlpha);  }
    DrawArraysIndirect :: proc "c" (mode: Enum, indirect: rawptr, loc := #caller_location) { impl_DrawArraysIndirect(mode, indirect); debug_helper(loc, 0, mode, indirect);  }
    DrawElementsIndirect :: proc "c" (mode: Enum, type: Enum, indirect: rawptr, loc := #caller_location) { impl_DrawElementsIndirect(mode, type, indirect); debug_helper(loc, 0, mode, type, indirect);  }
    Uniform1d :: proc "c" (location: int, x: double, loc := #caller_location) { impl_Uniform1d(location, x); debug_helper(loc, 0, location, x);  }
    Uniform2d :: proc "c" (location: int, x: double, y: double, loc := #caller_location) { impl_Uniform2d(location, x, y); debug_helper(loc, 0, location, x, y);  }
    Uniform3d :: proc "c" (location: int, x: double, y: double, z: double, loc := #caller_location) { impl_Uniform3d(location, x, y, z); debug_helper(loc, 0, location, x, y, z);  }
    Uniform4d :: proc "c" (location: int, x: double, y: double, z: double, w: double, loc := #caller_location) { impl_Uniform4d(location, x, y, z, w); debug_helper(loc, 0, location, x, y, z, w);  }
    Uniform1dv :: proc "c" (location: int, count: sizei, value: [^]double, loc := #caller_location) { impl_Uniform1dv(location, count, value); debug_helper(loc, 0, location, count, value);  }
    Uniform2dv :: proc "c" (location: int, count: sizei, value: [^]double, loc := #caller_location) { impl_Uniform2dv(location, count, value); debug_helper(loc, 0, location, count, value);  }
    Uniform3dv :: proc "c" (location: int, count: sizei, value: [^]double, loc := #caller_location) { impl_Uniform3dv(location, count, value); debug_helper(loc, 0, location, count, value);  }
    Uniform4dv :: proc "c" (location: int, count: sizei, value: [^]double, loc := #caller_location) { impl_Uniform4dv(location, count, value); debug_helper(loc, 0, location, count, value);  }
    UniformMatrix2dv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]double, loc := #caller_location) { impl_UniformMatrix2dv(location, count, transpose, value); debug_helper(loc, 0, location, count, transpose, value);  }
    UniformMatrix3dv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]double, loc := #caller_location) { impl_UniformMatrix3dv(location, count, transpose, value); debug_helper(loc, 0, location, count, transpose, value);  }
    UniformMatrix4dv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]double, loc := #caller_location) { impl_UniformMatrix4dv(location, count, transpose, value); debug_helper(loc, 0, location, count, transpose, value);  }
    UniformMatrix2x3dv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]double, loc := #caller_location) { impl_UniformMatrix2x3dv(location, count, transpose, value); debug_helper(loc, 0, location, count, transpose, value);  }
    UniformMatrix2x4dv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]double, loc := #caller_location) { impl_UniformMatrix2x4dv(location, count, transpose, value); debug_helper(loc, 0, location, count, transpose, value);  }
    UniformMatrix3x2dv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]double, loc := #caller_location) { impl_UniformMatrix3x2dv(location, count, transpose, value); debug_helper(loc, 0, location, count, transpose, value);  }
    UniformMatrix3x4dv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]double, loc := #caller_location) { impl_UniformMatrix3x4dv(location, count, transpose, value); debug_helper(loc, 0, location, count, transpose, value);  }
    UniformMatrix4x2dv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]double, loc := #caller_location) { impl_UniformMatrix4x2dv(location, count, transpose, value); debug_helper(loc, 0, location, count, transpose, value);  }
    UniformMatrix4x3dv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]double, loc := #caller_location) { impl_UniformMatrix4x3dv(location, count, transpose, value); debug_helper(loc, 0, location, count, transpose, value);  }
    GetUniformdv :: proc "c" (program: uint, location: int, params: [^]double, loc := #caller_location) { impl_GetUniformdv(program, location, params); debug_helper(loc, 0, program, location, params);  }
    GetSubroutineUniformLocation :: proc "c" (program: uint, shadertype: Enum, name: cstring, loc := #caller_location) -> int { ret := impl_GetSubroutineUniformLocation(program, shadertype, name); debug_helper(loc, 1, ret, program, shadertype, name); return ret }
    GetSubroutineIndex :: proc "c" (program: uint, shadertype: Enum, name: cstring, loc := #caller_location) -> uint { ret := impl_GetSubroutineIndex(program, shadertype, name); debug_helper(loc, 1, ret, program, shadertype, name); return ret }
    GetActiveSubroutineUniformiv :: proc "c" (program: uint, shadertype: Enum, index: uint, pname: Enum, values: [^]int, loc := #caller_location) { impl_GetActiveSubroutineUniformiv(program, shadertype, index, pname, values); debug_helper(loc, 0, program, shadertype, index, pname, values);  }
    GetActiveSubroutineUniformName :: proc "c" (program: uint, shadertype: Enum, index: uint, bufSize: sizei, length: [^]sizei, name: [^]char, loc := #caller_location) { impl_GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length, name); debug_helper(loc, 0, program, shadertype, index, bufSize, length, name);  }
    GetActiveSubroutineName :: proc "c" (program: uint, shadertype: Enum, index: uint, bufSize: sizei, length: [^]sizei, name: [^]char, loc := #caller_location) { impl_GetActiveSubroutineName(program, shadertype, index, bufSize, length, name); debug_helper(loc, 0, program, shadertype, index, bufSize, length, name);  }
    UniformSubroutinesuiv :: proc "c" (shadertype: Enum, count: sizei, indices: [^]uint, loc := #caller_location) { impl_UniformSubroutinesuiv(shadertype, count, indices); debug_helper(loc, 0, shadertype, count, indices);  }
    GetUniformSubroutineuiv :: proc "c" (shadertype: Enum, location: int, params: [^]uint, loc := #caller_location) { impl_GetUniformSubroutineuiv(shadertype, location, params); debug_helper(loc, 0, shadertype, location, params);  }
    GetProgramStageiv :: proc "c" (program: uint, shadertype: Enum, pname: Enum, values: [^]int, loc := #caller_location) { impl_GetProgramStageiv(program, shadertype, pname, values); debug_helper(loc, 0, program, shadertype, pname, values);  }
    PatchParameteri :: proc "c" (pname: Enum, value: int, loc := #caller_location) { impl_PatchParameteri(pname, value); debug_helper(loc, 0, pname, value);  }
    PatchParameterfv :: proc "c" (pname: Enum, values: [^]float, loc := #caller_location) { impl_PatchParameterfv(pname, values); debug_helper(loc, 0, pname, values);  }
    BindTransformFeedback :: proc "c" (target: Enum, id: uint, loc := #caller_location) { impl_BindTransformFeedback(target, id); debug_helper(loc, 0, target, id);  }
    DeleteTransformFeedbacks :: proc "c" (n: sizei, ids: [^]uint, loc := #caller_location) { impl_DeleteTransformFeedbacks(n, ids); debug_helper(loc, 0, n, ids);  }
    GenTransformFeedbacks :: proc "c" (n: sizei, ids: [^]uint, loc := #caller_location) { impl_GenTransformFeedbacks(n, ids); debug_helper(loc, 0, n, ids);  }
    IsTransformFeedback :: proc "c" (id: uint, loc := #caller_location) -> boolean { ret := impl_IsTransformFeedback(id); debug_helper(loc, 1, ret, id); return ret }
    PauseTransformFeedback :: proc "c" (loc := #caller_location) { impl_PauseTransformFeedback(); debug_helper(loc, 0);  }
    ResumeTransformFeedback :: proc "c" (loc := #caller_location) { impl_ResumeTransformFeedback(); debug_helper(loc, 0);  }
    DrawTransformFeedback :: proc "c" (mode: Enum, id: uint, loc := #caller_location) { impl_DrawTransformFeedback(mode, id); debug_helper(loc, 0, mode, id);  }
    DrawTransformFeedbackStream :: proc "c" (mode: Enum, id: uint, stream: uint, loc := #caller_location) { impl_DrawTransformFeedbackStream(mode, id, stream); debug_helper(loc, 0, mode, id, stream);  }
    BeginQueryIndexed :: proc "c" (target: Enum, index: uint, id: uint, loc := #caller_location) { impl_BeginQueryIndexed(target, index, id); debug_helper(loc, 0, target, index, id);  }
    EndQueryIndexed :: proc "c" (target: Enum, index: uint, loc := #caller_location) { impl_EndQueryIndexed(target, index); debug_helper(loc, 0, target, index);  }
    GetQueryIndexediv :: proc "c" (target: Enum, index: uint, pname: Enum, params: [^]int, loc := #caller_location) { impl_GetQueryIndexediv(target, index, pname, params); debug_helper(loc, 0, target, index, pname, params);  }
    ReleaseShaderCompiler :: proc "c" (loc := #caller_location) { impl_ReleaseShaderCompiler(); debug_helper(loc, 0);  }
    ShaderBinary :: proc "c" (count: sizei, shaders: [^]uint, binaryFormat: Enum, binary: rawptr, length: sizei, loc := #caller_location) { impl_ShaderBinary(count, shaders, binaryFormat, binary, length); debug_helper(loc, 0, count, shaders, binaryFormat, binary, length);  }
    GetShaderPrecisionFormat :: proc "c" (shadertype: Enum, precisiontype: Enum, range: [^]int, precision: [^]int, loc := #caller_location) { impl_GetShaderPrecisionFormat(shadertype, precisiontype, range, precision); debug_helper(loc, 0, shadertype, precisiontype, range, precision);  }
    DepthRangef :: proc "c" (n: float, f: float, loc := #caller_location) { impl_DepthRangef(n, f); debug_helper(loc, 0, n, f);  }
    ClearDepthf :: proc "c" (d: float, loc := #caller_location) { impl_ClearDepthf(d); debug_helper(loc, 0, d);  }
    GetProgramBinary :: proc "c" (program: uint, bufSize: sizei, length: [^]sizei, binaryFormat: [^]Enum, binary: rawptr, loc := #caller_location) { impl_GetProgramBinary(program, bufSize, length, binaryFormat, binary); debug_helper(loc, 0, program, bufSize, length, binaryFormat, binary);  }
    ProgramBinary :: proc "c" (program: uint, binaryFormat: Enum, binary: rawptr, length: sizei, loc := #caller_location) { impl_ProgramBinary(program, binaryFormat, binary, length); debug_helper(loc, 0, program, binaryFormat, binary, length);  }
    ProgramParameteri :: proc "c" (program: uint, pname: Enum, value: int, loc := #caller_location) { impl_ProgramParameteri(program, pname, value); debug_helper(loc, 0, program, pname, value);  }
    UseProgramStages :: proc "c" (pipeline: uint, stages: bitfield, program: uint, loc := #caller_location) { impl_UseProgramStages(pipeline, stages, program); debug_helper(loc, 0, pipeline, stages, program);  }
    ActiveShaderProgram :: proc "c" (pipeline: uint, program: uint, loc := #caller_location) { impl_ActiveShaderProgram(pipeline, program); debug_helper(loc, 0, pipeline, program);  }
    CreateShaderProgramv :: proc "c" (type: Enum, count: sizei, strings: [^]cstring, loc := #caller_location) -> uint { ret := impl_CreateShaderProgramv(type, count, strings); debug_helper(loc, 1, ret, type, count, strings); return ret }
    BindProgramPipeline :: proc "c" (pipeline: uint, loc := #caller_location) { impl_BindProgramPipeline(pipeline); debug_helper(loc, 0, pipeline);  }
    DeleteProgramPipelines :: proc "c" (n: sizei, pipelines: [^]uint, loc := #caller_location) { impl_DeleteProgramPipelines(n, pipelines); debug_helper(loc, 0, n, pipelines);  }
    GenProgramPipelines :: proc "c" (n: sizei, pipelines: [^]uint, loc := #caller_location) { impl_GenProgramPipelines(n, pipelines); debug_helper(loc, 0, n, pipelines);  }
    IsProgramPipeline :: proc "c" (pipeline: uint, loc := #caller_location) -> boolean { ret := impl_IsProgramPipeline(pipeline); debug_helper(loc, 1, ret, pipeline); return ret }
    GetProgramPipelineiv :: proc "c" (pipeline: uint, pname: Enum, params: [^]int, loc := #caller_location) { impl_GetProgramPipelineiv(pipeline, pname, params); debug_helper(loc, 0, pipeline, pname, params);  }
    ProgramUniform1i :: proc "c" (program: uint, location: int, v0: int, loc := #caller_location) { impl_ProgramUniform1i(program, location, v0); debug_helper(loc, 0, program, location, v0);  }
    ProgramUniform1iv :: proc "c" (program: uint, location: int, count: sizei, value: [^]int, loc := #caller_location) { impl_ProgramUniform1iv(program, location, count, value); debug_helper(loc, 0, program, location, count, value);  }
    ProgramUniform1f :: proc "c" (program: uint, location: int, v0: float, loc := #caller_location) { impl_ProgramUniform1f(program, location, v0); debug_helper(loc, 0, program, location, v0);  }
    ProgramUniform1fv :: proc "c" (program: uint, location: int, count: sizei, value: [^]float, loc := #caller_location) { impl_ProgramUniform1fv(program, location, count, value); debug_helper(loc, 0, program, location, count, value);  }
    ProgramUniform1d :: proc "c" (program: uint, location: int, v0: double, loc := #caller_location) { impl_ProgramUniform1d(program, location, v0); debug_helper(loc, 0, program, location, v0);  }
    ProgramUniform1dv :: proc "c" (program: uint, location: int, count: sizei, value: [^]double, loc := #caller_location) { impl_ProgramUniform1dv(program, location, count, value); debug_helper(loc, 0, program, location, count, value);  }
    ProgramUniform1ui :: proc "c" (program: uint, location: int, v0: uint, loc := #caller_location) { impl_ProgramUniform1ui(program, location, v0); debug_helper(loc, 0, program, location, v0);  }
    ProgramUniform1uiv :: proc "c" (program: uint, location: int, count: sizei, value: [^]uint, loc := #caller_location) { impl_ProgramUniform1uiv(program, location, count, value); debug_helper(loc, 0, program, location, count, value);  }
    ProgramUniform2i :: proc "c" (program: uint, location: int, v0: int, v1: int, loc := #caller_location) { impl_ProgramUniform2i(program, location, v0, v1); debug_helper(loc, 0, program, location, v0, v1);  }
    ProgramUniform2iv :: proc "c" (program: uint, location: int, count: sizei, value: [^]int, loc := #caller_location) { impl_ProgramUniform2iv(program, location, count, value); debug_helper(loc, 0, program, location, count, value);  }
    ProgramUniform2f :: proc "c" (program: uint, location: int, v0: float, v1: float, loc := #caller_location) { impl_ProgramUniform2f(program, location, v0, v1); debug_helper(loc, 0, program, location, v0, v1);  }
    ProgramUniform2fv :: proc "c" (program: uint, location: int, count: sizei, value: [^]float, loc := #caller_location) { impl_ProgramUniform2fv(program, location, count, value); debug_helper(loc, 0, program, location, count, value);  }
    ProgramUniform2d :: proc "c" (program: uint, location: int, v0: double, v1: double, loc := #caller_location) { impl_ProgramUniform2d(program, location, v0, v1); debug_helper(loc, 0, program, location, v0, v1);  }
    ProgramUniform2dv :: proc "c" (program: uint, location: int, count: sizei, value: [^]double, loc := #caller_location) { impl_ProgramUniform2dv(program, location, count, value); debug_helper(loc, 0, program, location, count, value);  }
    ProgramUniform2ui :: proc "c" (program: uint, location: int, v0: uint, v1: uint, loc := #caller_location) { impl_ProgramUniform2ui(program, location, v0, v1); debug_helper(loc, 0, program, location, v0, v1);  }
    ProgramUniform2uiv :: proc "c" (program: uint, location: int, count: sizei, value: [^]uint, loc := #caller_location) { impl_ProgramUniform2uiv(program, location, count, value); debug_helper(loc, 0, program, location, count, value);  }
    ProgramUniform3i :: proc "c" (program: uint, location: int, v0: int, v1: int, v2: int, loc := #caller_location) { impl_ProgramUniform3i(program, location, v0, v1, v2); debug_helper(loc, 0, program, location, v0, v1, v2);  }
    ProgramUniform3iv :: proc "c" (program: uint, location: int, count: sizei, value: [^]int, loc := #caller_location) { impl_ProgramUniform3iv(program, location, count, value); debug_helper(loc, 0, program, location, count, value);  }
    ProgramUniform3f :: proc "c" (program: uint, location: int, v0: float, v1: float, v2: float, loc := #caller_location) { impl_ProgramUniform3f(program, location, v0, v1, v2); debug_helper(loc, 0, program, location, v0, v1, v2);  }
    ProgramUniform3fv :: proc "c" (program: uint, location: int, count: sizei, value: [^]float, loc := #caller_location) { impl_ProgramUniform3fv(program, location, count, value); debug_helper(loc, 0, program, location, count, value);  }
    ProgramUniform3d :: proc "c" (program: uint, location: int, v0: double, v1: double, v2: double, loc := #caller_location) { impl_ProgramUniform3d(program, location, v0, v1, v2); debug_helper(loc, 0, program, location, v0, v1, v2);  }
    ProgramUniform3dv :: proc "c" (program: uint, location: int, count: sizei, value: [^]double, loc := #caller_location) { impl_ProgramUniform3dv(program, location, count, value); debug_helper(loc, 0, program, location, count, value);  }
    ProgramUniform3ui :: proc "c" (program: uint, location: int, v0: uint, v1: uint, v2: uint, loc := #caller_location) { impl_ProgramUniform3ui(program, location, v0, v1, v2); debug_helper(loc, 0, program, location, v0, v1, v2);  }
    ProgramUniform3uiv :: proc "c" (program: uint, location: int, count: sizei, value: [^]uint, loc := #caller_location) { impl_ProgramUniform3uiv(program, location, count, value); debug_helper(loc, 0, program, location, count, value);  }
    ProgramUniform4i :: proc "c" (program: uint, location: int, v0: int, v1: int, v2: int, v3: int, loc := #caller_location) { impl_ProgramUniform4i(program, location, v0, v1, v2, v3); debug_helper(loc, 0, program, location, v0, v1, v2, v3);  }
    ProgramUniform4iv :: proc "c" (program: uint, location: int, count: sizei, value: [^]int, loc := #caller_location) { impl_ProgramUniform4iv(program, location, count, value); debug_helper(loc, 0, program, location, count, value);  }
    ProgramUniform4f :: proc "c" (program: uint, location: int, v0: float, v1: float, v2: float, v3: float, loc := #caller_location) { impl_ProgramUniform4f(program, location, v0, v1, v2, v3); debug_helper(loc, 0, program, location, v0, v1, v2, v3);  }
    ProgramUniform4fv :: proc "c" (program: uint, location: int, count: sizei, value: [^]float, loc := #caller_location) { impl_ProgramUniform4fv(program, location, count, value); debug_helper(loc, 0, program, location, count, value);  }
    ProgramUniform4d :: proc "c" (program: uint, location: int, v0: double, v1: double, v2: double, v3: double, loc := #caller_location) { impl_ProgramUniform4d(program, location, v0, v1, v2, v3); debug_helper(loc, 0, program, location, v0, v1, v2, v3);  }
    ProgramUniform4dv :: proc "c" (program: uint, location: int, count: sizei, value: [^]double, loc := #caller_location) { impl_ProgramUniform4dv(program, location, count, value); debug_helper(loc, 0, program, location, count, value);  }
    ProgramUniform4ui :: proc "c" (program: uint, location: int, v0: uint, v1: uint, v2: uint, v3: uint, loc := #caller_location) { impl_ProgramUniform4ui(program, location, v0, v1, v2, v3); debug_helper(loc, 0, program, location, v0, v1, v2, v3);  }
    ProgramUniform4uiv :: proc "c" (program: uint, location: int, count: sizei, value: [^]uint, loc := #caller_location) { impl_ProgramUniform4uiv(program, location, count, value); debug_helper(loc, 0, program, location, count, value);  }
    ProgramUniformMatrix2fv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]float, loc := #caller_location) { impl_ProgramUniformMatrix2fv(program, location, count, transpose, value); debug_helper(loc, 0, program, location, count, transpose, value);  }
    ProgramUniformMatrix3fv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]float, loc := #caller_location) { impl_ProgramUniformMatrix3fv(program, location, count, transpose, value); debug_helper(loc, 0, program, location, count, transpose, value);  }
    ProgramUniformMatrix4fv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]float, loc := #caller_location) { impl_ProgramUniformMatrix4fv(program, location, count, transpose, value); debug_helper(loc, 0, program, location, count, transpose, value);  }
    ProgramUniformMatrix2dv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]double, loc := #caller_location) { impl_ProgramUniformMatrix2dv(program, location, count, transpose, value); debug_helper(loc, 0, program, location, count, transpose, value);  }
    ProgramUniformMatrix3dv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]double, loc := #caller_location) { impl_ProgramUniformMatrix3dv(program, location, count, transpose, value); debug_helper(loc, 0, program, location, count, transpose, value);  }
    ProgramUniformMatrix4dv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]double, loc := #caller_location) { impl_ProgramUniformMatrix4dv(program, location, count, transpose, value); debug_helper(loc, 0, program, location, count, transpose, value);  }
    ProgramUniformMatrix2x3fv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]float, loc := #caller_location) { impl_ProgramUniformMatrix2x3fv(program, location, count, transpose, value); debug_helper(loc, 0, program, location, count, transpose, value);  }
    ProgramUniformMatrix3x2fv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]float, loc := #caller_location) { impl_ProgramUniformMatrix3x2fv(program, location, count, transpose, value); debug_helper(loc, 0, program, location, count, transpose, value);  }
    ProgramUniformMatrix2x4fv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]float, loc := #caller_location) { impl_ProgramUniformMatrix2x4fv(program, location, count, transpose, value); debug_helper(loc, 0, program, location, count, transpose, value);  }
    ProgramUniformMatrix4x2fv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]float, loc := #caller_location) { impl_ProgramUniformMatrix4x2fv(program, location, count, transpose, value); debug_helper(loc, 0, program, location, count, transpose, value);  }
    ProgramUniformMatrix3x4fv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]float, loc := #caller_location) { impl_ProgramUniformMatrix3x4fv(program, location, count, transpose, value); debug_helper(loc, 0, program, location, count, transpose, value);  }
    ProgramUniformMatrix4x3fv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]float, loc := #caller_location) { impl_ProgramUniformMatrix4x3fv(program, location, count, transpose, value); debug_helper(loc, 0, program, location, count, transpose, value);  }
    ProgramUniformMatrix2x3dv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]double, loc := #caller_location) { impl_ProgramUniformMatrix2x3dv(program, location, count, transpose, value); debug_helper(loc, 0, program, location, count, transpose, value);  }
    ProgramUniformMatrix3x2dv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]double, loc := #caller_location) { impl_ProgramUniformMatrix3x2dv(program, location, count, transpose, value); debug_helper(loc, 0, program, location, count, transpose, value);  }
    ProgramUniformMatrix2x4dv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]double, loc := #caller_location) { impl_ProgramUniformMatrix2x4dv(program, location, count, transpose, value); debug_helper(loc, 0, program, location, count, transpose, value);  }
    ProgramUniformMatrix4x2dv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]double, loc := #caller_location) { impl_ProgramUniformMatrix4x2dv(program, location, count, transpose, value); debug_helper(loc, 0, program, location, count, transpose, value);  }
    ProgramUniformMatrix3x4dv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]double, loc := #caller_location) { impl_ProgramUniformMatrix3x4dv(program, location, count, transpose, value); debug_helper(loc, 0, program, location, count, transpose, value);  }
    ProgramUniformMatrix4x3dv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]double, loc := #caller_location) { impl_ProgramUniformMatrix4x3dv(program, location, count, transpose, value); debug_helper(loc, 0, program, location, count, transpose, value);  }
    ValidateProgramPipeline :: proc "c" (pipeline: uint, loc := #caller_location) { impl_ValidateProgramPipeline(pipeline); debug_helper(loc, 0, pipeline);  }
    GetProgramPipelineInfoLog :: proc "c" (pipeline: uint, bufSize: sizei, length: [^]sizei, infoLog: [^]char, loc := #caller_location) { impl_GetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog); debug_helper(loc, 0, pipeline, bufSize, length, infoLog);  }
    VertexAttribL1d :: proc "c" (index: uint, x: double, loc := #caller_location) { impl_VertexAttribL1d(index, x); debug_helper(loc, 0, index, x);  }
    VertexAttribL2d :: proc "c" (index: uint, x: double, y: double, loc := #caller_location) { impl_VertexAttribL2d(index, x, y); debug_helper(loc, 0, index, x, y);  }
    VertexAttribL3d :: proc "c" (index: uint, x: double, y: double, z: double, loc := #caller_location) { impl_VertexAttribL3d(index, x, y, z); debug_helper(loc, 0, index, x, y, z);  }
    VertexAttribL4d :: proc "c" (index: uint, x: double, y: double, z: double, w: double, loc := #caller_location) { impl_VertexAttribL4d(index, x, y, z, w); debug_helper(loc, 0, index, x, y, z, w);  }
    VertexAttribL1dv :: proc "c" (index: uint, v: [^]double, loc := #caller_location) { impl_VertexAttribL1dv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttribL2dv :: proc "c" (index: uint, v: [^]double, loc := #caller_location) { impl_VertexAttribL2dv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttribL3dv :: proc "c" (index: uint, v: [^]double, loc := #caller_location) { impl_VertexAttribL3dv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttribL4dv :: proc "c" (index: uint, v: [^]double, loc := #caller_location) { impl_VertexAttribL4dv(index, v); debug_helper(loc, 0, index, v);  }
    VertexAttribLPointer :: proc "c" (index: uint, size: int, type: Enum, stride: sizei, pointer: rawptr, loc := #caller_location) { impl_VertexAttribLPointer(index, size, type, stride, pointer); debug_helper(loc, 0, index, size, type, stride, pointer);  }
    GetVertexAttribLdv :: proc "c" (index: uint, pname: Enum, params: [^]double, loc := #caller_location) { impl_GetVertexAttribLdv(index, pname, params); debug_helper(loc, 0, index, pname, params);  }
    ViewportArrayv :: proc "c" (first: uint, count: sizei, v: [^]float, loc := #caller_location) { impl_ViewportArrayv(first, count, v); debug_helper(loc, 0, first, count, v);  }
    ViewportIndexedf :: proc "c" (index: uint, x: float, y: float, w: float, h: float, loc := #caller_location) { impl_ViewportIndexedf(index, x, y, w, h); debug_helper(loc, 0, index, x, y, w, h);  }
    ViewportIndexedfv :: proc "c" (index: uint, v: [^]float, loc := #caller_location) { impl_ViewportIndexedfv(index, v); debug_helper(loc, 0, index, v);  }
    ScissorArrayv :: proc "c" (first: uint, count: sizei, v: [^]int, loc := #caller_location) { impl_ScissorArrayv(first, count, v); debug_helper(loc, 0, first, count, v);  }
    ScissorIndexed :: proc "c" (index: uint, left: int, bottom: int, width: sizei, height: sizei, loc := #caller_location) { impl_ScissorIndexed(index, left, bottom, width, height); debug_helper(loc, 0, index, left, bottom, width, height);  }
    ScissorIndexedv :: proc "c" (index: uint, v: [^]int, loc := #caller_location) { impl_ScissorIndexedv(index, v); debug_helper(loc, 0, index, v);  }
    DepthRangeArrayv :: proc "c" (first: uint, count: sizei, v: [^]double, loc := #caller_location) { impl_DepthRangeArrayv(first, count, v); debug_helper(loc, 0, first, count, v);  }
    DepthRangeIndexed :: proc "c" (index: uint, n: double, f: double, loc := #caller_location) { impl_DepthRangeIndexed(index, n, f); debug_helper(loc, 0, index, n, f);  }
    GetFloati_v :: proc "c" (target: Enum, index: uint, data: [^]float, loc := #caller_location) { impl_GetFloati_v(target, index, data); debug_helper(loc, 0, target, index, data);  }
    GetDoublei_v :: proc "c" (target: Enum, index: uint, data: [^]double, loc := #caller_location) { impl_GetDoublei_v(target, index, data); debug_helper(loc, 0, target, index, data);  }
    DrawArraysInstancedBaseInstance :: proc "c" (mode: Enum, first: int, count: sizei, instancecount: sizei, baseinstance: uint, loc := #caller_location) { impl_DrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance); debug_helper(loc, 0, mode, first, count, instancecount, baseinstance);  }
    DrawElementsInstancedBaseInstance :: proc "c" (mode: Enum, count: sizei, type: Enum, indices: rawptr, instancecount: sizei, baseinstance: uint, loc := #caller_location) { impl_DrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance); debug_helper(loc, 0, mode, count, type, indices, instancecount, baseinstance);  }
    DrawElementsInstancedBaseVertexBaseInstance :: proc "c" (mode: Enum, count: sizei, type: Enum, indices: rawptr, instancecount: sizei, basevertex: int, baseinstance: uint, loc := #caller_location) { impl_DrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance); debug_helper(loc, 0, mode, count, type, indices, instancecount, basevertex, baseinstance);  }
    GetInternalformativ :: proc "c" (target: Enum, internalformat: Enum, pname: Enum, count: sizei, params: [^]int, loc := #caller_location) { impl_GetInternalformativ(target, internalformat, pname, count, params); debug_helper(loc, 0, target, internalformat, pname, count, params);  }
    GetActiveAtomicCounterBufferiv :: proc "c" (program: uint, bufferIndex: uint, pname: Enum, params: [^]int, loc := #caller_location) { impl_GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params); debug_helper(loc, 0, program, bufferIndex, pname, params);  }
    BindImageTexture :: proc "c" (unit: uint, texture: uint, level: int, layered: boolean, layer: int, access: Enum, format: Enum, loc := #caller_location) { impl_BindImageTexture(unit, texture, level, layered, layer, access, format); debug_helper(loc, 0, unit, texture, level, layered, layer, access, format);  }
    MemoryBarrier :: proc "c" (barriers: bitfield, loc := #caller_location) { impl_MemoryBarrier(barriers); debug_helper(loc, 0, barriers);  }
    TexStorage1D :: proc "c" (target: Enum, levels: sizei, internalformat: Enum, width: sizei, loc := #caller_location) { impl_TexStorage1D(target, levels, internalformat, width); debug_helper(loc, 0, target, levels, internalformat, width);  }
    TexStorage2D :: proc "c" (target: Enum, levels: sizei, internalformat: Enum, width: sizei, height: sizei, loc := #caller_location) { impl_TexStorage2D(target, levels, internalformat, width, height); debug_helper(loc, 0, target, levels, internalformat, width, height);  }
    TexStorage3D :: proc "c" (target: Enum, levels: sizei, internalformat: Enum, width: sizei, height: sizei, depth: sizei, loc := #caller_location) { impl_TexStorage3D(target, levels, internalformat, width, height, depth); debug_helper(loc, 0, target, levels, internalformat, width, height, depth);  }
    DrawTransformFeedbackInstanced :: proc "c" (mode: Enum, id: uint, instancecount: sizei, loc := #caller_location) { impl_DrawTransformFeedbackInstanced(mode, id, instancecount); debug_helper(loc, 0, mode, id, instancecount);  }
    DrawTransformFeedbackStreamInstanced :: proc "c" (mode: Enum, id: uint, stream: uint, instancecount: sizei, loc := #caller_location) { impl_DrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount); debug_helper(loc, 0, mode, id, stream, instancecount);  }
    ClearBufferData :: proc "c" (target: Enum, internalformat: Enum, format: Enum, type: Enum, data: rawptr, loc := #caller_location) { impl_ClearBufferData(target, internalformat, format, type, data); debug_helper(loc, 0, target, internalformat, format, type, data);  }
    ClearBufferSubData :: proc "c" (target: Enum, internalformat: Enum, offset: intptr, size: sizeiptr, format: Enum, type: Enum, data: rawptr, loc := #caller_location) { impl_ClearBufferSubData(target, internalformat, offset, size, format, type, data); debug_helper(loc, 0, target, internalformat, offset, size, format, type, data);  }
    DispatchCompute :: proc "c" (num_groups_x: uint, num_groups_y: uint, num_groups_z: uint, loc := #caller_location) { impl_DispatchCompute(num_groups_x, num_groups_y, num_groups_z); debug_helper(loc, 0, num_groups_x, num_groups_y, num_groups_z);  }
    DispatchComputeIndirect :: proc "c" (indirect: intptr, loc := #caller_location) { impl_DispatchComputeIndirect(indirect); debug_helper(loc, 0, indirect);  }
    CopyImageSubData :: proc "c" (srcName: uint, srcTarget: Enum, srcLevel: int, srcX: int, srcY: int, srcZ: int, dstName: uint, dstTarget: Enum, dstLevel: int, dstX: int, dstY: int, dstZ: int, srcWidth: sizei, srcHeight: sizei, srcDepth: sizei, loc := #caller_location) { impl_CopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); debug_helper(loc, 0, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);  }
    FramebufferParameteri :: proc "c" (target: Enum, pname: Enum, param: int, loc := #caller_location) { impl_FramebufferParameteri(target, pname, param); debug_helper(loc, 0, target, pname, param);  }
    GetFramebufferParameteriv :: proc "c" (target: Enum, pname: Enum, params: [^]int, loc := #caller_location) { impl_GetFramebufferParameteriv(target, pname, params); debug_helper(loc, 0, target, pname, params);  }
    GetInternalformati64v :: proc "c" (target: Enum, internalformat: Enum, pname: Enum, count: sizei, params: [^]int64, loc := #caller_location) { impl_GetInternalformati64v(target, internalformat, pname, count, params); debug_helper(loc, 0, target, internalformat, pname, count, params);  }
    InvalidateTexSubImage :: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, loc := #caller_location) { impl_InvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth); debug_helper(loc, 0, texture, level, xoffset, yoffset, zoffset, width, height, depth);  }
    InvalidateTexImage :: proc "c" (texture: uint, level: int, loc := #caller_location) { impl_InvalidateTexImage(texture, level); debug_helper(loc, 0, texture, level);  }
    InvalidateBufferSubData :: proc "c" (buffer: uint, offset: intptr, length: sizeiptr, loc := #caller_location) { impl_InvalidateBufferSubData(buffer, offset, length); debug_helper(loc, 0, buffer, offset, length);  }
    InvalidateBufferData :: proc "c" (buffer: uint, loc := #caller_location) { impl_InvalidateBufferData(buffer); debug_helper(loc, 0, buffer);  }
    InvalidateFramebuffer :: proc "c" (target: Enum, numAttachments: sizei, attachments: [^]Enum, loc := #caller_location) { impl_InvalidateFramebuffer(target, numAttachments, attachments); debug_helper(loc, 0, target, numAttachments, attachments);  }
    InvalidateSubFramebuffer :: proc "c" (target: Enum, numAttachments: sizei, attachments: [^]Enum, x: int, y: int, width: sizei, height: sizei, loc := #caller_location) { impl_InvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height); debug_helper(loc, 0, target, numAttachments, attachments, x, y, width, height);  }
    MultiDrawArraysIndirect :: proc "c" (mode: Enum, indirect: rawptr, drawcount: sizei, stride: sizei, loc := #caller_location) { impl_MultiDrawArraysIndirect(mode, indirect, drawcount, stride); debug_helper(loc, 0, mode, indirect, drawcount, stride);  }
    MultiDrawElementsIndirect :: proc "c" (mode: Enum, type: Enum, indirect: rawptr, drawcount: sizei, stride: sizei, loc := #caller_location) { impl_MultiDrawElementsIndirect(mode, type, indirect, drawcount, stride); debug_helper(loc, 0, mode, type, indirect, drawcount, stride);  }
    GetProgramInterfaceiv :: proc "c" (program: uint, programInterface: Enum, pname: Enum, params: [^]int, loc := #caller_location) { impl_GetProgramInterfaceiv(program, programInterface, pname, params); debug_helper(loc, 0, program, programInterface, pname, params);  }
    GetProgramResourceIndex :: proc "c" (program: uint, programInterface: Enum, name: cstring, loc := #caller_location) -> uint { ret := impl_GetProgramResourceIndex(program, programInterface, name); debug_helper(loc, 1, ret, program, programInterface, name); return ret }
    GetProgramResourceName :: proc "c" (program: uint, programInterface: Enum, index: uint, bufSize: sizei, length: [^]sizei, name: [^]char, loc := #caller_location) { impl_GetProgramResourceName(program, programInterface, index, bufSize, length, name); debug_helper(loc, 0, program, programInterface, index, bufSize, length, name);  }
    GetProgramResourceiv :: proc "c" (program: uint, programInterface: Enum, index: uint, propCount: sizei, props: [^]Enum, count: sizei, length: [^]sizei, params: [^]int, loc := #caller_location) { impl_GetProgramResourceiv(program, programInterface, index, propCount, props, count, length, params); debug_helper(loc, 0, program, programInterface, index, propCount, props, count, length, params);  }
    GetProgramResourceLocation :: proc "c" (program: uint, programInterface: Enum, name: cstring, loc := #caller_location) -> int { ret := impl_GetProgramResourceLocation(program, programInterface, name); debug_helper(loc, 1, ret, program, programInterface, name); return ret }
    GetProgramResourceLocationIndex :: proc "c" (program: uint, programInterface: Enum, name: cstring, loc := #caller_location) -> int { ret := impl_GetProgramResourceLocationIndex(program, programInterface, name); debug_helper(loc, 1, ret, program, programInterface, name); return ret }
    ShaderStorageBlockBinding :: proc "c" (program: uint, storageBlockIndex: uint, storageBlockBinding: uint, loc := #caller_location) { impl_ShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding); debug_helper(loc, 0, program, storageBlockIndex, storageBlockBinding);  }
    TexBufferRange :: proc "c" (target: Enum, internalformat: Enum, buffer: uint, offset: intptr, size: sizeiptr, loc := #caller_location) { impl_TexBufferRange(target, internalformat, buffer, offset, size); debug_helper(loc, 0, target, internalformat, buffer, offset, size);  }
    TexStorage2DMultisample :: proc "c" (target: Enum, samples: sizei, internalformat: Enum, width: sizei, height: sizei, fixedsamplelocations: boolean, loc := #caller_location) { impl_TexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations); debug_helper(loc, 0, target, samples, internalformat, width, height, fixedsamplelocations);  }
    TexStorage3DMultisample :: proc "c" (target: Enum, samples: sizei, internalformat: Enum, width: sizei, height: sizei, depth: sizei, fixedsamplelocations: boolean, loc := #caller_location) { impl_TexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations); debug_helper(loc, 0, target, samples, internalformat, width, height, depth, fixedsamplelocations);  }
    TextureView :: proc "c" (texture: uint, target: Enum, origtexture: uint, internalformat: Enum, minlevel: uint, numlevels: uint, minlayer: uint, numlayers: uint, loc := #caller_location) { impl_TextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers); debug_helper(loc, 0, texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);  }
    BindVertexBuffer :: proc "c" (bindingindex: uint, buffer: uint, offset: intptr, stride: sizei, loc := #caller_location) { impl_BindVertexBuffer(bindingindex, buffer, offset, stride); debug_helper(loc, 0, bindingindex, buffer, offset, stride);  }
    VertexAttribFormat :: proc "c" (attribindex: uint, size: int, type: Enum, normalized: boolean, relativeoffset: uint, loc := #caller_location) { impl_VertexAttribFormat(attribindex, size, type, normalized, relativeoffset); debug_helper(loc, 0, attribindex, size, type, normalized, relativeoffset);  }
    VertexAttribIFormat :: proc "c" (attribindex: uint, size: int, type: Enum, relativeoffset: uint, loc := #caller_location) { impl_VertexAttribIFormat(attribindex, size, type, relativeoffset); debug_helper(loc, 0, attribindex, size, type, relativeoffset);  }
    VertexAttribLFormat :: proc "c" (attribindex: uint, size: int, type: Enum, relativeoffset: uint, loc := #caller_location) { impl_VertexAttribLFormat(attribindex, size, type, relativeoffset); debug_helper(loc, 0, attribindex, size, type, relativeoffset);  }
    VertexAttribBinding :: proc "c" (attribindex: uint, bindingindex: uint, loc := #caller_location) { impl_VertexAttribBinding(attribindex, bindingindex); debug_helper(loc, 0, attribindex, bindingindex);  }
    VertexBindingDivisor :: proc "c" (bindingindex: uint, divisor: uint, loc := #caller_location) { impl_VertexBindingDivisor(bindingindex, divisor); debug_helper(loc, 0, bindingindex, divisor);  }
    DebugMessageControl :: proc "c" (source: Enum, type: Enum, severity: Enum, count: sizei, ids: [^]uint, enabled: boolean, loc := #caller_location) { impl_DebugMessageControl(source, type, severity, count, ids, enabled); debug_helper(loc, 0, source, type, severity, count, ids, enabled);  }
    DebugMessageInsert :: proc "c" (source: Enum, type: Enum, id: uint, severity: Enum, length: sizei, buf: cstring, loc := #caller_location) { impl_DebugMessageInsert(source, type, id, severity, length, buf); debug_helper(loc, 0, source, type, id, severity, length, buf);  }
    DebugMessageCallback :: proc "c" (callback: DEBUGPROC, userParam: rawptr, loc := #caller_location) { impl_DebugMessageCallback(callback, userParam); debug_helper(loc, 0, callback, userParam);  }
    GetDebugMessageLog :: proc "c" (count: uint, bufSize: sizei, sources: [^]Enum, types: [^]Enum, ids: [^]uint, severities: [^]Enum, lengths: [^]sizei, messageLog: [^]char, loc := #caller_location) -> uint { ret := impl_GetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog); debug_helper(loc, 1, ret, count, bufSize, sources, types, ids, severities, lengths, messageLog); return ret }
    PushDebugGroup :: proc "c" (source: Enum, id: uint, length: sizei, message: cstring, loc := #caller_location) { impl_PushDebugGroup(source, id, length, message); debug_helper(loc, 0, source, id, length, message);  }
    PopDebugGroup :: proc "c" (loc := #caller_location) { impl_PopDebugGroup(); debug_helper(loc, 0);  }
    ObjectLabel :: proc "c" (identifier: Enum, name: uint, length: sizei, label: cstring, loc := #caller_location) { impl_ObjectLabel(identifier, name, length, label); debug_helper(loc, 0, identifier, name, length, label);  }
    GetObjectLabel :: proc "c" (identifier: Enum, name: uint, bufSize: sizei, length: [^]sizei, label: [^]char, loc := #caller_location) { impl_GetObjectLabel(identifier, name, bufSize, length, label); debug_helper(loc, 0, identifier, name, bufSize, length, label);  }
    ObjectPtrLabel :: proc "c" (ptr: rawptr, length: sizei, label: cstring, loc := #caller_location) { impl_ObjectPtrLabel(ptr, length, label); debug_helper(loc, 0, ptr, length, label);  }
    GetObjectPtrLabel :: proc "c" (ptr: rawptr, bufSize: sizei, length: [^]sizei, label: [^]char, loc := #caller_location) { impl_GetObjectPtrLabel(ptr, bufSize, length, label); debug_helper(loc, 0, ptr, bufSize, length, label);  }
    GetPointerv :: proc "c" (pname: Enum, params: [^]rawptr, loc := #caller_location) { impl_GetPointerv(pname, params); debug_helper(loc, 0, pname, params);  }
    BufferStorage :: proc "c" (target: Enum, size: sizeiptr, data: rawptr, flags: bitfield, loc := #caller_location) { impl_BufferStorage(target, size, data, flags); debug_helper(loc, 0, target, size, data, flags);  }
    ClearTexImage :: proc "c" (texture: uint, level: int, format: Enum, type: Enum, data: rawptr, loc := #caller_location) { impl_ClearTexImage(texture, level, format, type, data); debug_helper(loc, 0, texture, level, format, type, data);  }
    ClearTexSubImage :: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: Enum, type: Enum, data: rawptr, loc := #caller_location) { impl_ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data); debug_helper(loc, 0, texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);  }
    BindBuffersBase :: proc "c" (target: Enum, first: uint, count: sizei, buffers: [^]uint, loc := #caller_location) { impl_BindBuffersBase(target, first, count, buffers); debug_helper(loc, 0, target, first, count, buffers);  }
    BindBuffersRange :: proc "c" (target: Enum, first: uint, count: sizei, buffers: [^]uint, offsets: [^]intptr, sizes: [^]sizeiptr, loc := #caller_location) { impl_BindBuffersRange(target, first, count, buffers, offsets, sizes); debug_helper(loc, 0, target, first, count, buffers, offsets, sizes);  }
    BindTextures :: proc "c" (first: uint, count: sizei, textures: [^]uint, loc := #caller_location) { impl_BindTextures(first, count, textures); debug_helper(loc, 0, first, count, textures);  }
    BindSamplers :: proc "c" (first: uint, count: sizei, samplers: [^]uint, loc := #caller_location) { impl_BindSamplers(first, count, samplers); debug_helper(loc, 0, first, count, samplers);  }
    BindImageTextures :: proc "c" (first: uint, count: sizei, textures: [^]uint, loc := #caller_location) { impl_BindImageTextures(first, count, textures); debug_helper(loc, 0, first, count, textures);  }
    BindVertexBuffers :: proc "c" (first: uint, count: sizei, buffers: [^]uint, offsets: [^]intptr, strides: [^]sizei, loc := #caller_location) { impl_BindVertexBuffers(first, count, buffers, offsets, strides); debug_helper(loc, 0, first, count, buffers, offsets, strides);  }
    ClipControl :: proc "c" (origin: Enum, depth: Enum, loc := #caller_location) { impl_ClipControl(origin, depth); debug_helper(loc, 0, origin, depth);  }
    CreateTransformFeedbacks :: proc "c" (n: sizei, ids: [^]uint, loc := #caller_location) { impl_CreateTransformFeedbacks(n, ids); debug_helper(loc, 0, n, ids);  }
    TransformFeedbackBufferBase :: proc "c" (xfb: uint, index: uint, buffer: uint, loc := #caller_location) { impl_TransformFeedbackBufferBase(xfb, index, buffer); debug_helper(loc, 0, xfb, index, buffer);  }
    TransformFeedbackBufferRange :: proc "c" (xfb: uint, index: uint, buffer: uint, offset: intptr, size: sizeiptr, loc := #caller_location) { impl_TransformFeedbackBufferRange(xfb, index, buffer, offset, size); debug_helper(loc, 0, xfb, index, buffer, offset, size);  }
    GetTransformFeedbackiv :: proc "c" (xfb: uint, pname: Enum, param: [^]int, loc := #caller_location) { impl_GetTransformFeedbackiv(xfb, pname, param); debug_helper(loc, 0, xfb, pname, param);  }
    GetTransformFeedbacki_v :: proc "c" (xfb: uint, pname: Enum, index: uint, param: [^]int, loc := #caller_location) { impl_GetTransformFeedbacki_v(xfb, pname, index, param); debug_helper(loc, 0, xfb, pname, index, param);  }
    GetTransformFeedbacki64_v :: proc "c" (xfb: uint, pname: Enum, index: uint, param: [^]int64, loc := #caller_location) { impl_GetTransformFeedbacki64_v(xfb, pname, index, param); debug_helper(loc, 0, xfb, pname, index, param);  }
    CreateBuffers :: proc "c" (n: sizei, buffers: [^]uint, loc := #caller_location) { impl_CreateBuffers(n, buffers); debug_helper(loc, 0, n, buffers);  }
    NamedBufferStorage :: proc "c" (buffer: uint, size: sizeiptr, data: rawptr, flags: bitfield, loc := #caller_location) { impl_NamedBufferStorage(buffer, size, data, flags); debug_helper(loc, 0, buffer, size, data, flags);  }
    NamedBufferData :: proc "c" (buffer: uint, size: sizeiptr, data: rawptr, usage: Enum, loc := #caller_location) { impl_NamedBufferData(buffer, size, data, usage); debug_helper(loc, 0, buffer, size, data, usage);  }
    NamedBufferSubData :: proc "c" (buffer: uint, offset: intptr, size: sizeiptr, data: rawptr, loc := #caller_location) { impl_NamedBufferSubData(buffer, offset, size, data); debug_helper(loc, 0, buffer, offset, size, data);  }
    CopyNamedBufferSubData :: proc "c" (readBuffer: uint, writeBuffer: uint, readOffset: intptr, writeOffset: intptr, size: sizeiptr, loc := #caller_location) { impl_CopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size); debug_helper(loc, 0, readBuffer, writeBuffer, readOffset, writeOffset, size);  }
    ClearNamedBufferData :: proc "c" (buffer: uint, internalformat: Enum, format: Enum, type: Enum, data: rawptr, loc := #caller_location) { impl_ClearNamedBufferData(buffer, internalformat, format, type, data); debug_helper(loc, 0, buffer, internalformat, format, type, data);  }
    ClearNamedBufferSubData :: proc "c" (buffer: uint, internalformat: Enum, offset: intptr, size: sizeiptr, format: Enum, type: Enum, data: rawptr, loc := #caller_location) { impl_ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data); debug_helper(loc, 0, buffer, internalformat, offset, size, format, type, data);  }
    MapNamedBuffer :: proc "c" (buffer: uint, access: Enum, loc := #caller_location) -> rawptr { ret := impl_MapNamedBuffer(buffer, access); debug_helper(loc, 1, ret, buffer, access); return ret }
    MapNamedBufferRange :: proc "c" (buffer: uint, offset: intptr, length: sizeiptr, access: bitfield, loc := #caller_location) -> rawptr { ret := impl_MapNamedBufferRange(buffer, offset, length, access); debug_helper(loc, 1, ret, buffer, offset, length, access); return ret }
    UnmapNamedBuffer :: proc "c" (buffer: uint, loc := #caller_location) -> boolean { ret := impl_UnmapNamedBuffer(buffer); debug_helper(loc, 1, ret, buffer); return ret }
    FlushMappedNamedBufferRange :: proc "c" (buffer: uint, offset: intptr, length: sizeiptr, loc := #caller_location) { impl_FlushMappedNamedBufferRange(buffer, offset, length); debug_helper(loc, 0, buffer, offset, length);  }
    GetNamedBufferParameteriv :: proc "c" (buffer: uint, pname: Enum, params: [^]int, loc := #caller_location) { impl_GetNamedBufferParameteriv(buffer, pname, params); debug_helper(loc, 0, buffer, pname, params);  }
    GetNamedBufferParameteri64v :: proc "c" (buffer: uint, pname: Enum, params: [^]int64, loc := #caller_location) { impl_GetNamedBufferParameteri64v(buffer, pname, params); debug_helper(loc, 0, buffer, pname, params);  }
    GetNamedBufferPointerv :: proc "c" (buffer: uint, pname: Enum, params: [^]rawptr, loc := #caller_location) { impl_GetNamedBufferPointerv(buffer, pname, params); debug_helper(loc, 0, buffer, pname, params);  }
    GetNamedBufferSubData :: proc "c" (buffer: uint, offset: intptr, size: sizeiptr, data: rawptr, loc := #caller_location) { impl_GetNamedBufferSubData(buffer, offset, size, data); debug_helper(loc, 0, buffer, offset, size, data);  }
    CreateFramebuffers :: proc "c" (n: sizei, framebuffers: [^]uint, loc := #caller_location) { impl_CreateFramebuffers(n, framebuffers); debug_helper(loc, 0, n, framebuffers);  }
    NamedFramebufferRenderbuffer :: proc "c" (framebuffer: uint, attachment: Enum, renderbuffertarget: Enum, renderbuffer: uint, loc := #caller_location) { impl_NamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer); debug_helper(loc, 0, framebuffer, attachment, renderbuffertarget, renderbuffer);  }
    NamedFramebufferParameteri :: proc "c" (framebuffer: uint, pname: Enum, param: int, loc := #caller_location) { impl_NamedFramebufferParameteri(framebuffer, pname, param); debug_helper(loc, 0, framebuffer, pname, param);  }
    NamedFramebufferTexture :: proc "c" (framebuffer: uint, attachment: Enum, texture: uint, level: int, loc := #caller_location) { impl_NamedFramebufferTexture(framebuffer, attachment, texture, level); debug_helper(loc, 0, framebuffer, attachment, texture, level);  }
    NamedFramebufferTextureLayer :: proc "c" (framebuffer: uint, attachment: Enum, texture: uint, level: int, layer: int, loc := #caller_location) { impl_NamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer); debug_helper(loc, 0, framebuffer, attachment, texture, level, layer);  }
    NamedFramebufferDrawBuffer :: proc "c" (framebuffer: uint, buf: Enum, loc := #caller_location) { impl_NamedFramebufferDrawBuffer(framebuffer, buf); debug_helper(loc, 0, framebuffer, buf);  }
    NamedFramebufferDrawBuffers :: proc "c" (framebuffer: uint, n: sizei, bufs: [^]Enum, loc := #caller_location) { impl_NamedFramebufferDrawBuffers(framebuffer, n, bufs); debug_helper(loc, 0, framebuffer, n, bufs);  }
    NamedFramebufferReadBuffer :: proc "c" (framebuffer: uint, src: Enum, loc := #caller_location) { impl_NamedFramebufferReadBuffer(framebuffer, src); debug_helper(loc, 0, framebuffer, src);  }
    InvalidateNamedFramebufferData :: proc "c" (framebuffer: uint, numAttachments: sizei, attachments: [^]Enum, loc := #caller_location) { impl_InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments); debug_helper(loc, 0, framebuffer, numAttachments, attachments);  }
    InvalidateNamedFramebufferSubData :: proc "c" (framebuffer: uint, numAttachments: sizei, attachments: [^]Enum, x: int, y: int, width: sizei, height: sizei, loc := #caller_location) { impl_InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height); debug_helper(loc, 0, framebuffer, numAttachments, attachments, x, y, width, height);  }
    ClearNamedFramebufferiv :: proc "c" (framebuffer: uint, buffer: Enum, drawbuffer: int, value: [^]int, loc := #caller_location) { impl_ClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value); debug_helper(loc, 0, framebuffer, buffer, drawbuffer, value);  }
    ClearNamedFramebufferuiv :: proc "c" (framebuffer: uint, buffer: Enum, drawbuffer: int, value: [^]uint, loc := #caller_location) { impl_ClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value); debug_helper(loc, 0, framebuffer, buffer, drawbuffer, value);  }
    ClearNamedFramebufferfv :: proc "c" (framebuffer: uint, buffer: Enum, drawbuffer: int, value: [^]float, loc := #caller_location) { impl_ClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value); debug_helper(loc, 0, framebuffer, buffer, drawbuffer, value);  }
    ClearNamedFramebufferfi :: proc "c" (framebuffer: uint, buffer: Enum, drawbuffer: int, depth: float, stencil: int, loc := #caller_location) { impl_ClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil); debug_helper(loc, 0, framebuffer, buffer, drawbuffer, depth, stencil);  }
    BlitNamedFramebuffer :: proc "c" (readFramebuffer: uint, drawFramebuffer: uint, srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: bitfield, filter: Enum, loc := #caller_location) { impl_BlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); debug_helper(loc, 0, readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);  }
    CheckNamedFramebufferStatus :: proc "c" (framebuffer: uint, target: Enum, loc := #caller_location) -> Enum { ret := impl_CheckNamedFramebufferStatus(framebuffer, target); debug_helper(loc, 1, ret, framebuffer, target); return ret }
    GetNamedFramebufferParameteriv :: proc "c" (framebuffer: uint, pname: Enum, param: [^]int, loc := #caller_location) { impl_GetNamedFramebufferParameteriv(framebuffer, pname, param); debug_helper(loc, 0, framebuffer, pname, param);  }
    GetNamedFramebufferAttachmentParameteriv :: proc "c" (framebuffer: uint, attachment: Enum, pname: Enum, params: [^]int, loc := #caller_location) { impl_GetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params); debug_helper(loc, 0, framebuffer, attachment, pname, params);  }
    CreateRenderbuffers :: proc "c" (n: sizei, renderbuffers: [^]uint, loc := #caller_location) { impl_CreateRenderbuffers(n, renderbuffers); debug_helper(loc, 0, n, renderbuffers);  }
    NamedRenderbufferStorage :: proc "c" (renderbuffer: uint, internalformat: Enum, width: sizei, height: sizei, loc := #caller_location) { impl_NamedRenderbufferStorage(renderbuffer, internalformat, width, height); debug_helper(loc, 0, renderbuffer, internalformat, width, height);  }
    NamedRenderbufferStorageMultisample :: proc "c" (renderbuffer: uint, samples: sizei, internalformat: Enum, width: sizei, height: sizei, loc := #caller_location) { impl_NamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height); debug_helper(loc, 0, renderbuffer, samples, internalformat, width, height);  }
    GetNamedRenderbufferParameteriv :: proc "c" (renderbuffer: uint, pname: Enum, params: [^]int, loc := #caller_location) { impl_GetNamedRenderbufferParameteriv(renderbuffer, pname, params); debug_helper(loc, 0, renderbuffer, pname, params);  }
    CreateTextures :: proc "c" (target: Enum, n: sizei, textures: [^]uint, loc := #caller_location) { impl_CreateTextures(target, n, textures); debug_helper(loc, 0, target, n, textures);  }
    TextureBuffer :: proc "c" (texture: uint, internalformat: Enum, buffer: uint, loc := #caller_location) { impl_TextureBuffer(texture, internalformat, buffer); debug_helper(loc, 0, texture, internalformat, buffer);  }
    TextureBufferRange :: proc "c" (texture: uint, internalformat: Enum, buffer: uint, offset: intptr, size: sizeiptr, loc := #caller_location) { impl_TextureBufferRange(texture, internalformat, buffer, offset, size); debug_helper(loc, 0, texture, internalformat, buffer, offset, size);  }
    TextureStorage1D :: proc "c" (texture: uint, levels: sizei, internalformat: Enum, width: sizei, loc := #caller_location) { impl_TextureStorage1D(texture, levels, internalformat, width); debug_helper(loc, 0, texture, levels, internalformat, width);  }
    TextureStorage2D :: proc "c" (texture: uint, levels: sizei, internalformat: Enum, width: sizei, height: sizei, loc := #caller_location) { impl_TextureStorage2D(texture, levels, internalformat, width, height); debug_helper(loc, 0, texture, levels, internalformat, width, height);  }
    TextureStorage3D :: proc "c" (texture: uint, levels: sizei, internalformat: Enum, width: sizei, height: sizei, depth: sizei, loc := #caller_location) { impl_TextureStorage3D(texture, levels, internalformat, width, height, depth); debug_helper(loc, 0, texture, levels, internalformat, width, height, depth);  }
    TextureStorage2DMultisample :: proc "c" (texture: uint, samples: sizei, internalformat: Enum, width: sizei, height: sizei, fixedsamplelocations: boolean, loc := #caller_location) { impl_TextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations); debug_helper(loc, 0, texture, samples, internalformat, width, height, fixedsamplelocations);  }
    TextureStorage3DMultisample :: proc "c" (texture: uint, samples: sizei, internalformat: Enum, width: sizei, height: sizei, depth: sizei, fixedsamplelocations: boolean, loc := #caller_location) { impl_TextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations); debug_helper(loc, 0, texture, samples, internalformat, width, height, depth, fixedsamplelocations);  }
    TextureSubImage1D :: proc "c" (texture: uint, level: int, xoffset: int, width: sizei, format: Enum, type: Enum, pixels: rawptr, loc := #caller_location) { impl_TextureSubImage1D(texture, level, xoffset, width, format, type, pixels); debug_helper(loc, 0, texture, level, xoffset, width, format, type, pixels);  }
    TextureSubImage2D :: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, width: sizei, height: sizei, format: Enum, type: Enum, pixels: rawptr, loc := #caller_location) { impl_TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels); debug_helper(loc, 0, texture, level, xoffset, yoffset, width, height, format, type, pixels);  }
    TextureSubImage3D :: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: Enum, type: Enum, pixels: rawptr, loc := #caller_location) { impl_TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); debug_helper(loc, 0, texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);  }
    CompressedTextureSubImage1D :: proc "c" (texture: uint, level: int, xoffset: int, width: sizei, format: Enum, imageSize: sizei, data: rawptr, loc := #caller_location) { impl_CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data); debug_helper(loc, 0, texture, level, xoffset, width, format, imageSize, data);  }
    CompressedTextureSubImage2D :: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, width: sizei, height: sizei, format: Enum, imageSize: sizei, data: rawptr, loc := #caller_location) { impl_CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data); debug_helper(loc, 0, texture, level, xoffset, yoffset, width, height, format, imageSize, data);  }
    CompressedTextureSubImage3D :: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: Enum, imageSize: sizei, data: rawptr, loc := #caller_location) { impl_CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); debug_helper(loc, 0, texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);  }
    CopyTextureSubImage1D :: proc "c" (texture: uint, level: int, xoffset: int, x: int, y: int, width: sizei, loc := #caller_location) { impl_CopyTextureSubImage1D(texture, level, xoffset, x, y, width); debug_helper(loc, 0, texture, level, xoffset, x, y, width);  }
    CopyTextureSubImage2D :: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, x: int, y: int, width: sizei, height: sizei, loc := #caller_location) { impl_CopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height); debug_helper(loc, 0, texture, level, xoffset, yoffset, x, y, width, height);  }
    CopyTextureSubImage3D :: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: sizei, height: sizei, loc := #caller_location) { impl_CopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height); debug_helper(loc, 0, texture, level, xoffset, yoffset, zoffset, x, y, width, height);  }
    TextureParameterf :: proc "c" (texture: uint, pname: Enum, param: float, loc := #caller_location) { impl_TextureParameterf(texture, pname, param); debug_helper(loc, 0, texture, pname, param);  }
    TextureParameterfv :: proc "c" (texture: uint, pname: Enum, param: [^]float, loc := #caller_location) { impl_TextureParameterfv(texture, pname, param); debug_helper(loc, 0, texture, pname, param);  }
    TextureParameteri :: proc "c" (texture: uint, pname: Enum, param: int, loc := #caller_location) { impl_TextureParameteri(texture, pname, param); debug_helper(loc, 0, texture, pname, param);  }
    TextureParameterIiv :: proc "c" (texture: uint, pname: Enum, params: [^]int, loc := #caller_location) { impl_TextureParameterIiv(texture, pname, params); debug_helper(loc, 0, texture, pname, params);  }
    TextureParameterIuiv :: proc "c" (texture: uint, pname: Enum, params: [^]uint, loc := #caller_location) { impl_TextureParameterIuiv(texture, pname, params); debug_helper(loc, 0, texture, pname, params);  }
    TextureParameteriv :: proc "c" (texture: uint, pname: Enum, param: [^]int, loc := #caller_location) { impl_TextureParameteriv(texture, pname, param); debug_helper(loc, 0, texture, pname, param);  }
    GenerateTextureMipmap :: proc "c" (texture: uint, loc := #caller_location) { impl_GenerateTextureMipmap(texture); debug_helper(loc, 0, texture);  }
    BindTextureUnit :: proc "c" (unit: uint, texture: uint, loc := #caller_location) { impl_BindTextureUnit(unit, texture); debug_helper(loc, 0, unit, texture);  }
    GetTextureImage :: proc "c" (texture: uint, level: int, format: Enum, type: Enum, bufSize: sizei, pixels: rawptr, loc := #caller_location) { impl_GetTextureImage(texture, level, format, type, bufSize, pixels); debug_helper(loc, 0, texture, level, format, type, bufSize, pixels);  }
    GetCompressedTextureImage :: proc "c" (texture: uint, level: int, bufSize: sizei, pixels: rawptr, loc := #caller_location) { impl_GetCompressedTextureImage(texture, level, bufSize, pixels); debug_helper(loc, 0, texture, level, bufSize, pixels);  }
    GetTextureLevelParameterfv :: proc "c" (texture: uint, level: int, pname: Enum, params: [^]float, loc := #caller_location) { impl_GetTextureLevelParameterfv(texture, level, pname, params); debug_helper(loc, 0, texture, level, pname, params);  }
    GetTextureLevelParameteriv :: proc "c" (texture: uint, level: int, pname: Enum, params: [^]int, loc := #caller_location) { impl_GetTextureLevelParameteriv(texture, level, pname, params); debug_helper(loc, 0, texture, level, pname, params);  }
    GetTextureParameterfv :: proc "c" (texture: uint, pname: Enum, params: [^]float, loc := #caller_location) { impl_GetTextureParameterfv(texture, pname, params); debug_helper(loc, 0, texture, pname, params);  }
    GetTextureParameterIiv :: proc "c" (texture: uint, pname: Enum, params: [^]int, loc := #caller_location) { impl_GetTextureParameterIiv(texture, pname, params); debug_helper(loc, 0, texture, pname, params);  }
    GetTextureParameterIuiv :: proc "c" (texture: uint, pname: Enum, params: [^]uint, loc := #caller_location) { impl_GetTextureParameterIuiv(texture, pname, params); debug_helper(loc, 0, texture, pname, params);  }
    GetTextureParameteriv :: proc "c" (texture: uint, pname: Enum, params: [^]int, loc := #caller_location) { impl_GetTextureParameteriv(texture, pname, params); debug_helper(loc, 0, texture, pname, params);  }
    CreateVertexArrays :: proc "c" (n: sizei, arrays: [^]uint, loc := #caller_location) { impl_CreateVertexArrays(n, arrays); debug_helper(loc, 0, n, arrays);  }
    DisableVertexArrayAttrib :: proc "c" (vaobj: uint, index: uint, loc := #caller_location) { impl_DisableVertexArrayAttrib(vaobj, index); debug_helper(loc, 0, vaobj, index);  }
    EnableVertexArrayAttrib :: proc "c" (vaobj: uint, index: uint, loc := #caller_location) { impl_EnableVertexArrayAttrib(vaobj, index); debug_helper(loc, 0, vaobj, index);  }
    VertexArrayElementBuffer :: proc "c" (vaobj: uint, buffer: uint, loc := #caller_location) { impl_VertexArrayElementBuffer(vaobj, buffer); debug_helper(loc, 0, vaobj, buffer);  }
    VertexArrayVertexBuffer :: proc "c" (vaobj: uint, bindingindex: uint, buffer: uint, offset: intptr, stride: sizei, loc := #caller_location) { impl_VertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride); debug_helper(loc, 0, vaobj, bindingindex, buffer, offset, stride);  }
    VertexArrayVertexBuffers :: proc "c" (vaobj: uint, first: uint, count: sizei, buffers: [^]uint, offsets: [^]intptr, strides: [^]sizei, loc := #caller_location) { impl_VertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides); debug_helper(loc, 0, vaobj, first, count, buffers, offsets, strides);  }
    VertexArrayAttribBinding :: proc "c" (vaobj: uint, attribindex: uint, bindingindex: uint, loc := #caller_location) { impl_VertexArrayAttribBinding(vaobj, attribindex, bindingindex); debug_helper(loc, 0, vaobj, attribindex, bindingindex);  }
    VertexArrayAttribFormat :: proc "c" (vaobj: uint, attribindex: uint, size: int, type: Enum, normalized: boolean, relativeoffset: uint, loc := #caller_location) { impl_VertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset); debug_helper(loc, 0, vaobj, attribindex, size, type, normalized, relativeoffset);  }
    VertexArrayAttribIFormat :: proc "c" (vaobj: uint, attribindex: uint, size: int, type: Enum, relativeoffset: uint, loc := #caller_location) { impl_VertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset); debug_helper(loc, 0, vaobj, attribindex, size, type, relativeoffset);  }
    VertexArrayAttribLFormat :: proc "c" (vaobj: uint, attribindex: uint, size: int, type: Enum, relativeoffset: uint, loc := #caller_location) { impl_VertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset); debug_helper(loc, 0, vaobj, attribindex, size, type, relativeoffset);  }
    VertexArrayBindingDivisor :: proc "c" (vaobj: uint, bindingindex: uint, divisor: uint, loc := #caller_location) { impl_VertexArrayBindingDivisor(vaobj, bindingindex, divisor); debug_helper(loc, 0, vaobj, bindingindex, divisor);  }
    GetVertexArrayiv :: proc "c" (vaobj: uint, pname: Enum, param: [^]int, loc := #caller_location) { impl_GetVertexArrayiv(vaobj, pname, param); debug_helper(loc, 0, vaobj, pname, param);  }
    GetVertexArrayIndexediv :: proc "c" (vaobj: uint, index: uint, pname: Enum, param: [^]int, loc := #caller_location) { impl_GetVertexArrayIndexediv(vaobj, index, pname, param); debug_helper(loc, 0, vaobj, index, pname, param);  }
    GetVertexArrayIndexed64iv :: proc "c" (vaobj: uint, index: uint, pname: Enum, param: [^]int64, loc := #caller_location) { impl_GetVertexArrayIndexed64iv(vaobj, index, pname, param); debug_helper(loc, 0, vaobj, index, pname, param);  }
    CreateSamplers :: proc "c" (n: sizei, samplers: [^]uint, loc := #caller_location) { impl_CreateSamplers(n, samplers); debug_helper(loc, 0, n, samplers);  }
    CreateProgramPipelines :: proc "c" (n: sizei, pipelines: [^]uint, loc := #caller_location) { impl_CreateProgramPipelines(n, pipelines); debug_helper(loc, 0, n, pipelines);  }
    CreateQueries :: proc "c" (target: Enum, n: sizei, ids: [^]uint, loc := #caller_location) { impl_CreateQueries(target, n, ids); debug_helper(loc, 0, target, n, ids);  }
    GetQueryBufferObjecti64v :: proc "c" (id: uint, buffer: uint, pname: Enum, offset: intptr, loc := #caller_location) { impl_GetQueryBufferObjecti64v(id, buffer, pname, offset); debug_helper(loc, 0, id, buffer, pname, offset);  }
    GetQueryBufferObjectiv :: proc "c" (id: uint, buffer: uint, pname: Enum, offset: intptr, loc := #caller_location) { impl_GetQueryBufferObjectiv(id, buffer, pname, offset); debug_helper(loc, 0, id, buffer, pname, offset);  }
    GetQueryBufferObjectui64v :: proc "c" (id: uint, buffer: uint, pname: Enum, offset: intptr, loc := #caller_location) { impl_GetQueryBufferObjectui64v(id, buffer, pname, offset); debug_helper(loc, 0, id, buffer, pname, offset);  }
    GetQueryBufferObjectuiv :: proc "c" (id: uint, buffer: uint, pname: Enum, offset: intptr, loc := #caller_location) { impl_GetQueryBufferObjectuiv(id, buffer, pname, offset); debug_helper(loc, 0, id, buffer, pname, offset);  }
    MemoryBarrierByRegion :: proc "c" (barriers: bitfield, loc := #caller_location) { impl_MemoryBarrierByRegion(barriers); debug_helper(loc, 0, barriers);  }
    GetTextureSubImage :: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: Enum, type: Enum, bufSize: sizei, pixels: rawptr, loc := #caller_location) { impl_GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels); debug_helper(loc, 0, texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);  }
    GetCompressedTextureSubImage :: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, bufSize: sizei, pixels: rawptr, loc := #caller_location) { impl_GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels); debug_helper(loc, 0, texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);  }
    GetGraphicsResetStatus :: proc "c" (loc := #caller_location) -> Enum { ret := impl_GetGraphicsResetStatus(); debug_helper(loc, 1, ret); return ret }
    GetnCompressedTexImage :: proc "c" (target: Enum, lod: int, bufSize: sizei, pixels: rawptr, loc := #caller_location) { impl_GetnCompressedTexImage(target, lod, bufSize, pixels); debug_helper(loc, 0, target, lod, bufSize, pixels);  }
    GetnTexImage :: proc "c" (target: Enum, level: int, format: Enum, type: Enum, bufSize: sizei, pixels: rawptr, loc := #caller_location) { impl_GetnTexImage(target, level, format, type, bufSize, pixels); debug_helper(loc, 0, target, level, format, type, bufSize, pixels);  }
    GetnUniformdv :: proc "c" (program: uint, location: int, bufSize: sizei, params: [^]double, loc := #caller_location) { impl_GetnUniformdv(program, location, bufSize, params); debug_helper(loc, 0, program, location, bufSize, params);  }
    GetnUniformfv :: proc "c" (program: uint, location: int, bufSize: sizei, params: [^]float, loc := #caller_location) { impl_GetnUniformfv(program, location, bufSize, params); debug_helper(loc, 0, program, location, bufSize, params);  }
    GetnUniformiv :: proc "c" (program: uint, location: int, bufSize: sizei, params: [^]int, loc := #caller_location) { impl_GetnUniformiv(program, location, bufSize, params); debug_helper(loc, 0, program, location, bufSize, params);  }
    GetnUniformuiv :: proc "c" (program: uint, location: int, bufSize: sizei, params: [^]uint, loc := #caller_location) { impl_GetnUniformuiv(program, location, bufSize, params); debug_helper(loc, 0, program, location, bufSize, params);  }
    ReadnPixels :: proc "c" (x: int, y: int, width: sizei, height: sizei, format: Enum, type: Enum, bufSize: sizei, data: rawptr, loc := #caller_location) { impl_ReadnPixels(x, y, width, height, format, type, bufSize, data); debug_helper(loc, 0, x, y, width, height, format, type, bufSize, data);  }
    TextureBarrier :: proc "c" (loc := #caller_location) { impl_TextureBarrier(); debug_helper(loc, 0);  }
    SpecializeShader :: proc "c" (shader: uint, pEntryPoint: cstring, numSpecializationConstants: uint, pConstantIndex: [^]uint, pConstantValue: [^]uint, loc := #caller_location) { impl_SpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue); debug_helper(loc, 0, shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);  }
    MultiDrawArraysIndirectCount :: proc "c" (mode: Enum, indirect: rawptr, drawcount: intptr, maxdrawcount: sizei, stride: sizei, loc := #caller_location) { impl_MultiDrawArraysIndirectCount(mode, indirect, drawcount, maxdrawcount, stride); debug_helper(loc, 0, mode, indirect, drawcount, maxdrawcount, stride);  }
    MultiDrawElementsIndirectCount :: proc "c" (mode: Enum, type: Enum, indirect: rawptr, drawcount: intptr, maxdrawcount: sizei, stride: sizei, loc := #caller_location) { impl_MultiDrawElementsIndirectCount(mode, type, indirect, drawcount, maxdrawcount, stride); debug_helper(loc, 0, mode, type, indirect, drawcount, maxdrawcount, stride);  }
    PolygonOffsetClamp :: proc "c" (factor: float, units: float, clamp: float, loc := #caller_location) { impl_PolygonOffsetClamp(factor, units, clamp); debug_helper(loc, 0, factor, units, clamp);  }
    MaxShaderCompilerThreadsKHR :: proc "c" (count: uint, loc := #caller_location) { impl_MaxShaderCompilerThreadsKHR(count); debug_helper(loc, 0, count);  }
} else {
    CullFace :: proc "c" (mode: Enum) { impl_CullFace(mode) }
    FrontFace :: proc "c" (mode: Enum) { impl_FrontFace(mode) }
    Hint :: proc "c" (target: Enum, mode: Enum) { impl_Hint(target, mode) }
    LineWidth :: proc "c" (width: float) { impl_LineWidth(width) }
    PointSize :: proc "c" (size: float) { impl_PointSize(size) }
    PolygonMode :: proc "c" (face: Enum, mode: Enum) { impl_PolygonMode(face, mode) }
    Scissor :: proc "c" (x: int, y: int, width: sizei, height: sizei) { impl_Scissor(x, y, width, height) }
    TexParameterf :: proc "c" (target: Enum, pname: Enum, param: float) { impl_TexParameterf(target, pname, param) }
    TexParameterfv :: proc "c" (target: Enum, pname: Enum, params: [^]float) { impl_TexParameterfv(target, pname, params) }
    TexParameteri :: proc "c" (target: Enum, pname: Enum, param: int) { impl_TexParameteri(target, pname, param) }
    TexParameteriv :: proc "c" (target: Enum, pname: Enum, params: [^]int) { impl_TexParameteriv(target, pname, params) }
    TexImage1D :: proc "c" (target: Enum, level: int, internalformat: int, width: sizei, border: int, format: Enum, type: Enum, pixels: rawptr) { impl_TexImage1D(target, level, internalformat, width, border, format, type, pixels) }
    TexImage2D :: proc "c" (target: Enum, level: int, internalformat: int, width: sizei, height: sizei, border: int, format: Enum, type: Enum, pixels: rawptr) { impl_TexImage2D(target, level, internalformat, width, height, border, format, type, pixels) }
    DrawBuffer :: proc "c" (buf: Enum) { impl_DrawBuffer(buf) }
    Clear :: proc "c" (mask: bitfield) { impl_Clear(mask) }
    ClearColor :: proc "c" (red: float, green: float, blue: float, alpha: float) { impl_ClearColor(red, green, blue, alpha) }
    ClearStencil :: proc "c" (s: int) { impl_ClearStencil(s) }
    ClearDepth :: proc "c" (depth: double) { impl_ClearDepth(depth) }
    StencilMask :: proc "c" (mask: uint) { impl_StencilMask(mask) }
    ColorMask :: proc "c" (red: boolean, green: boolean, blue: boolean, alpha: boolean) { impl_ColorMask(red, green, blue, alpha) }
    DepthMask :: proc "c" (flag: boolean) { impl_DepthMask(flag) }
    Disable :: proc "c" (cap: Enum) { impl_Disable(cap) }
    Enable :: proc "c" (cap: Enum) { impl_Enable(cap) }
    Finish :: proc "c" () { impl_Finish() }
    Flush :: proc "c" () { impl_Flush() }
    BlendFunc :: proc "c" (sfactor: Enum, dfactor: Enum) { impl_BlendFunc(sfactor, dfactor) }
    LogicOp :: proc "c" (opcode: Enum) { impl_LogicOp(opcode) }
    StencilFunc :: proc "c" (func: Enum, ref: int, mask: uint) { impl_StencilFunc(func, ref, mask) }
    StencilOp :: proc "c" (fail: Enum, zfail: Enum, zpass: Enum) { impl_StencilOp(fail, zfail, zpass) }
    DepthFunc :: proc "c" (func: Enum) { impl_DepthFunc(func) }
    PixelStoref :: proc "c" (pname: Enum, param: float) { impl_PixelStoref(pname, param) }
    PixelStorei :: proc "c" (pname: Enum, param: int) { impl_PixelStorei(pname, param) }
    ReadBuffer :: proc "c" (src: Enum) { impl_ReadBuffer(src) }
    ReadPixels :: proc "c" (x: int, y: int, width: sizei, height: sizei, format: Enum, type: Enum, pixels: rawptr) { impl_ReadPixels(x, y, width, height, format, type, pixels) }
    GetBooleanv :: proc "c" (pname: Enum, data: [^]boolean) { impl_GetBooleanv(pname, data) }
    GetDoublev :: proc "c" (pname: Enum, data: [^]double) { impl_GetDoublev(pname, data) }
    GetError :: proc "c" () -> Enum { return impl_GetError() }
    GetFloatv :: proc "c" (pname: Enum, data: [^]float) { impl_GetFloatv(pname, data) }
    GetIntegerv :: proc "c" (pname: Enum, data: [^]int) { impl_GetIntegerv(pname, data) }
    GetString :: proc "c" (name: Enum) -> cstring { return impl_GetString(name) }
    GetTexImage :: proc "c" (target: Enum, level: int, format: Enum, type: Enum, pixels: rawptr) { impl_GetTexImage(target, level, format, type, pixels) }
    GetTexParameterfv :: proc "c" (target: Enum, pname: Enum, params: [^]float) { impl_GetTexParameterfv(target, pname, params) }
    GetTexParameteriv :: proc "c" (target: Enum, pname: Enum, params: [^]int) { impl_GetTexParameteriv(target, pname, params) }
    GetTexLevelParameterfv :: proc "c" (target: Enum, level: int, pname: Enum, params: [^]float) { impl_GetTexLevelParameterfv(target, level, pname, params) }
    GetTexLevelParameteriv :: proc "c" (target: Enum, level: int, pname: Enum, params: [^]int) { impl_GetTexLevelParameteriv(target, level, pname, params) }
    IsEnabled :: proc "c" (cap: Enum) -> boolean { return impl_IsEnabled(cap) }
    DepthRange :: proc "c" (n: double, f: double) { impl_DepthRange(n, f) }
    Viewport :: proc "c" (x: int, y: int, width: sizei, height: sizei) { impl_Viewport(x, y, width, height) }
    DrawArrays :: proc "c" (mode: Enum, first: int, count: sizei) { impl_DrawArrays(mode, first, count) }
    DrawElements :: proc "c" (mode: Enum, count: sizei, type: Enum, indices: rawptr) { impl_DrawElements(mode, count, type, indices) }
    PolygonOffset :: proc "c" (factor: float, units: float) { impl_PolygonOffset(factor, units) }
    CopyTexImage1D :: proc "c" (target: Enum, level: int, internalformat: Enum, x: int, y: int, width: sizei, border: int) { impl_CopyTexImage1D(target, level, internalformat, x, y, width, border) }
    CopyTexImage2D :: proc "c" (target: Enum, level: int, internalformat: Enum, x: int, y: int, width: sizei, height: sizei, border: int) { impl_CopyTexImage2D(target, level, internalformat, x, y, width, height, border) }
    CopyTexSubImage1D :: proc "c" (target: Enum, level: int, xoffset: int, x: int, y: int, width: sizei) { impl_CopyTexSubImage1D(target, level, xoffset, x, y, width) }
    CopyTexSubImage2D :: proc "c" (target: Enum, level: int, xoffset: int, yoffset: int, x: int, y: int, width: sizei, height: sizei) { impl_CopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) }
    TexSubImage1D :: proc "c" (target: Enum, level: int, xoffset: int, width: sizei, format: Enum, type: Enum, pixels: rawptr) { impl_TexSubImage1D(target, level, xoffset, width, format, type, pixels) }
    TexSubImage2D :: proc "c" (target: Enum, level: int, xoffset: int, yoffset: int, width: sizei, height: sizei, format: Enum, type: Enum, pixels: rawptr) { impl_TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) }
    BindTexture :: proc "c" (target: Enum, texture: uint) { impl_BindTexture(target, texture) }
    DeleteTextures :: proc "c" (n: sizei, textures: [^]uint) { impl_DeleteTextures(n, textures) }
    GenTextures :: proc "c" (n: sizei, textures: [^]uint) { impl_GenTextures(n, textures) }
    IsTexture :: proc "c" (texture: uint) -> boolean { return impl_IsTexture(texture) }
    DrawRangeElements :: proc "c" (mode: Enum, start: uint, end: uint, count: sizei, type: Enum, indices: rawptr) { impl_DrawRangeElements(mode, start, end, count, type, indices) }
    TexImage3D :: proc "c" (target: Enum, level: int, internalformat: int, width: sizei, height: sizei, depth: sizei, border: int, format: Enum, type: Enum, pixels: rawptr) { impl_TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels) }
    TexSubImage3D :: proc "c" (target: Enum, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: Enum, type: Enum, pixels: rawptr) { impl_TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) }
    CopyTexSubImage3D :: proc "c" (target: Enum, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: sizei, height: sizei) { impl_CopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) }
    ActiveTexture :: proc "c" (texture: Enum) { impl_ActiveTexture(texture) }
    SampleCoverage :: proc "c" (value: float, invert: boolean) { impl_SampleCoverage(value, invert) }
    CompressedTexImage3D :: proc "c" (target: Enum, level: int, internalformat: Enum, width: sizei, height: sizei, depth: sizei, border: int, imageSize: sizei, data: rawptr) { impl_CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) }
    CompressedTexImage2D :: proc "c" (target: Enum, level: int, internalformat: Enum, width: sizei, height: sizei, border: int, imageSize: sizei, data: rawptr) { impl_CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) }
    CompressedTexImage1D :: proc "c" (target: Enum, level: int, internalformat: Enum, width: sizei, border: int, imageSize: sizei, data: rawptr) { impl_CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data) }
    CompressedTexSubImage3D :: proc "c" (target: Enum, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: Enum, imageSize: sizei, data: rawptr) { impl_CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) }
    CompressedTexSubImage2D :: proc "c" (target: Enum, level: int, xoffset: int, yoffset: int, width: sizei, height: sizei, format: Enum, imageSize: sizei, data: rawptr) { impl_CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) }
    CompressedTexSubImage1D :: proc "c" (target: Enum, level: int, xoffset: int, width: sizei, format: Enum, imageSize: sizei, data: rawptr) { impl_CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data) }
    GetCompressedTexImage :: proc "c" (target: Enum, level: int, img: rawptr) { impl_GetCompressedTexImage(target, level, img) }
    BlendFuncSeparate :: proc "c" (sfactorRGB: Enum, dfactorRGB: Enum, sfactorAlpha: Enum, dfactorAlpha: Enum) { impl_BlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) }
    MultiDrawArrays :: proc "c" (mode: Enum, first: [^]int, count: [^]sizei, drawcount: sizei) { impl_MultiDrawArrays(mode, first, count, drawcount) }
    MultiDrawElements :: proc "c" (mode: Enum, count: [^]sizei, type: Enum, indices: [^]rawptr, drawcount: sizei) { impl_MultiDrawElements(mode, count, type, indices, drawcount) }
    PointParameterf :: proc "c" (pname: Enum, param: float) { impl_PointParameterf(pname, param) }
    PointParameterfv :: proc "c" (pname: Enum, params: [^]float) { impl_PointParameterfv(pname, params) }
    PointParameteri :: proc "c" (pname: Enum, param: int) { impl_PointParameteri(pname, param) }
    PointParameteriv :: proc "c" (pname: Enum, params: [^]int) { impl_PointParameteriv(pname, params) }
    BlendColor :: proc "c" (red: float, green: float, blue: float, alpha: float) { impl_BlendColor(red, green, blue, alpha) }
    BlendEquation :: proc "c" (mode: Enum) { impl_BlendEquation(mode) }
    GenQueries :: proc "c" (n: sizei, ids: [^]uint) { impl_GenQueries(n, ids) }
    DeleteQueries :: proc "c" (n: sizei, ids: [^]uint) { impl_DeleteQueries(n, ids) }
    IsQuery :: proc "c" (id: uint) -> boolean { return impl_IsQuery(id) }
    BeginQuery :: proc "c" (target: Enum, id: uint) { impl_BeginQuery(target, id) }
    EndQuery :: proc "c" (target: Enum) { impl_EndQuery(target) }
    GetQueryiv :: proc "c" (target: Enum, pname: Enum, params: [^]int) { impl_GetQueryiv(target, pname, params) }
    GetQueryObjectiv :: proc "c" (id: uint, pname: Enum, params: [^]int) { impl_GetQueryObjectiv(id, pname, params) }
    GetQueryObjectuiv :: proc "c" (id: uint, pname: Enum, params: [^]uint) { impl_GetQueryObjectuiv(id, pname, params) }
    BindBuffer :: proc "c" (target: Enum, buffer: uint) { impl_BindBuffer(target, buffer) }
    DeleteBuffers :: proc "c" (n: sizei, buffers: [^]uint) { impl_DeleteBuffers(n, buffers) }
    GenBuffers :: proc "c" (n: sizei, buffers: [^]uint) { impl_GenBuffers(n, buffers) }
    IsBuffer :: proc "c" (buffer: uint) -> boolean { return impl_IsBuffer(buffer) }
    BufferData :: proc "c" (target: Enum, size: sizeiptr, data: rawptr, usage: Enum) { impl_BufferData(target, size, data, usage) }
    BufferSubData :: proc "c" (target: Enum, offset: intptr, size: sizeiptr, data: rawptr) { impl_BufferSubData(target, offset, size, data) }
    GetBufferSubData :: proc "c" (target: Enum, offset: intptr, size: sizeiptr, data: rawptr) { impl_GetBufferSubData(target, offset, size, data) }
    MapBuffer :: proc "c" (target: Enum, access: Enum) -> rawptr { return impl_MapBuffer(target, access) }
    UnmapBuffer :: proc "c" (target: Enum) -> boolean { return impl_UnmapBuffer(target) }
    GetBufferParameteriv :: proc "c" (target: Enum, pname: Enum, params: [^]int) { impl_GetBufferParameteriv(target, pname, params) }
    GetBufferPointerv :: proc "c" (target: Enum, pname: Enum, params: [^]rawptr) { impl_GetBufferPointerv(target, pname, params) }
    BlendEquationSeparate :: proc "c" (modeRGB: Enum, modeAlpha: Enum) { impl_BlendEquationSeparate(modeRGB, modeAlpha) }
    DrawBuffers :: proc "c" (n: sizei, bufs: [^]Enum) { impl_DrawBuffers(n, bufs) }
    StencilOpSeparate :: proc "c" (face: Enum, sfail: Enum, dpfail: Enum, dppass: Enum) { impl_StencilOpSeparate(face, sfail, dpfail, dppass) }
    StencilFuncSeparate :: proc "c" (face: Enum, func: Enum, ref: int, mask: uint) { impl_StencilFuncSeparate(face, func, ref, mask) }
    StencilMaskSeparate :: proc "c" (face: Enum, mask: uint) { impl_StencilMaskSeparate(face, mask) }
    AttachShader :: proc "c" (program: uint, shader: uint) { impl_AttachShader(program, shader) }
    BindAttribLocation :: proc "c" (program: uint, index: uint, name: cstring) { impl_BindAttribLocation(program, index, name) }
    CompileShader :: proc "c" (shader: uint) { impl_CompileShader(shader) }
    CreateProgram :: proc "c" () -> uint { return impl_CreateProgram() }
    CreateShader :: proc "c" (type: Enum) -> uint { return impl_CreateShader(type) }
    DeleteProgram :: proc "c" (program: uint) { impl_DeleteProgram(program) }
    DeleteShader :: proc "c" (shader: uint) { impl_DeleteShader(shader) }
    DetachShader :: proc "c" (program: uint, shader: uint) { impl_DetachShader(program, shader) }
    DisableVertexAttribArray :: proc "c" (index: uint) { impl_DisableVertexAttribArray(index) }
    EnableVertexAttribArray :: proc "c" (index: uint) { impl_EnableVertexAttribArray(index) }
    GetActiveAttrib :: proc "c" (program: uint, index: uint, bufSize: sizei, length: [^]sizei, size: [^]int, type: [^]Enum, name: [^]char) { impl_GetActiveAttrib(program, index, bufSize, length, size, type, name) }
    GetActiveUniform :: proc "c" (program: uint, index: uint, bufSize: sizei, length: [^]sizei, size: [^]int, type: [^]Enum, name: [^]char) { impl_GetActiveUniform(program, index, bufSize, length, size, type, name) }
    GetAttachedShaders :: proc "c" (program: uint, maxCount: sizei, count: [^]sizei, shaders: [^]uint) { impl_GetAttachedShaders(program, maxCount, count, shaders) }
    GetAttribLocation :: proc "c" (program: uint, name: cstring) -> int { return impl_GetAttribLocation(program, name) }
    GetProgramiv :: proc "c" (program: uint, pname: Enum, params: [^]int) { impl_GetProgramiv(program, pname, params) }
    GetProgramInfoLog :: proc "c" (program: uint, bufSize: sizei, length: [^]sizei, infoLog: [^]char) { impl_GetProgramInfoLog(program, bufSize, length, infoLog) }
    GetShaderiv :: proc "c" (shader: uint, pname: Enum, params: [^]int) { impl_GetShaderiv(shader, pname, params) }
    GetShaderInfoLog :: proc "c" (shader: uint, bufSize: sizei, length: [^]sizei, infoLog: [^]char) { impl_GetShaderInfoLog(shader, bufSize, length, infoLog) }
    GetShaderSource :: proc "c" (shader: uint, bufSize: sizei, length: [^]sizei, source: [^]char) { impl_GetShaderSource(shader, bufSize, length, source) }
    GetUniformLocation :: proc "c" (program: uint, name: cstring) -> int { return impl_GetUniformLocation(program, name) }
    GetUniformfv :: proc "c" (program: uint, location: int, params: [^]float) { impl_GetUniformfv(program, location, params) }
    GetUniformiv :: proc "c" (program: uint, location: int, params: [^]int) { impl_GetUniformiv(program, location, params) }
    GetVertexAttribdv :: proc "c" (index: uint, pname: Enum, params: [^]double) { impl_GetVertexAttribdv(index, pname, params) }
    GetVertexAttribfv :: proc "c" (index: uint, pname: Enum, params: [^]float) { impl_GetVertexAttribfv(index, pname, params) }
    GetVertexAttribiv :: proc "c" (index: uint, pname: Enum, params: [^]int) { impl_GetVertexAttribiv(index, pname, params) }
    GetVertexAttribPointerv :: proc "c" (index: uint, pname: Enum, pointer: [^]rawptr) { impl_GetVertexAttribPointerv(index, pname, pointer) }
    IsProgram :: proc "c" (program: uint) -> boolean { return impl_IsProgram(program) }
    IsShader :: proc "c" (shader: uint) -> boolean { return impl_IsShader(shader) }
    LinkProgram :: proc "c" (program: uint) { impl_LinkProgram(program) }
    ShaderSource :: proc "c" (shader: uint, count: sizei, string: [^]cstring, length: [^]int) { impl_ShaderSource(shader, count, string, length) }
    UseProgram :: proc "c" (program: uint) { impl_UseProgram(program) }
    Uniform1f :: proc "c" (location: int, v0: float) { impl_Uniform1f(location, v0) }
    Uniform2f :: proc "c" (location: int, v0: float, v1: float) { impl_Uniform2f(location, v0, v1) }
    Uniform3f :: proc "c" (location: int, v0: float, v1: float, v2: float) { impl_Uniform3f(location, v0, v1, v2) }
    Uniform4f :: proc "c" (location: int, v0: float, v1: float, v2: float, v3: float) { impl_Uniform4f(location, v0, v1, v2, v3) }
    Uniform1i :: proc "c" (location: int, v0: int) { impl_Uniform1i(location, v0) }
    Uniform2i :: proc "c" (location: int, v0: int, v1: int) { impl_Uniform2i(location, v0, v1) }
    Uniform3i :: proc "c" (location: int, v0: int, v1: int, v2: int) { impl_Uniform3i(location, v0, v1, v2) }
    Uniform4i :: proc "c" (location: int, v0: int, v1: int, v2: int, v3: int) { impl_Uniform4i(location, v0, v1, v2, v3) }
    Uniform1fv :: proc "c" (location: int, count: sizei, value: [^]float) { impl_Uniform1fv(location, count, value) }
    Uniform2fv :: proc "c" (location: int, count: sizei, value: [^]float) { impl_Uniform2fv(location, count, value) }
    Uniform3fv :: proc "c" (location: int, count: sizei, value: [^]float) { impl_Uniform3fv(location, count, value) }
    Uniform4fv :: proc "c" (location: int, count: sizei, value: [^]float) { impl_Uniform4fv(location, count, value) }
    Uniform1iv :: proc "c" (location: int, count: sizei, value: [^]int) { impl_Uniform1iv(location, count, value) }
    Uniform2iv :: proc "c" (location: int, count: sizei, value: [^]int) { impl_Uniform2iv(location, count, value) }
    Uniform3iv :: proc "c" (location: int, count: sizei, value: [^]int) { impl_Uniform3iv(location, count, value) }
    Uniform4iv :: proc "c" (location: int, count: sizei, value: [^]int) { impl_Uniform4iv(location, count, value) }
    UniformMatrix2fv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]float) { impl_UniformMatrix2fv(location, count, transpose, value) }
    UniformMatrix3fv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]float) { impl_UniformMatrix3fv(location, count, transpose, value) }
    UniformMatrix4fv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]float) { impl_UniformMatrix4fv(location, count, transpose, value) }
    ValidateProgram :: proc "c" (program: uint) { impl_ValidateProgram(program) }
    VertexAttrib1d :: proc "c" (index: uint, x: double) { impl_VertexAttrib1d(index, x) }
    VertexAttrib1dv :: proc "c" (index: uint, v: [^]double) { impl_VertexAttrib1dv(index, v) }
    VertexAttrib1f :: proc "c" (index: uint, x: float) { impl_VertexAttrib1f(index, x) }
    VertexAttrib1fv :: proc "c" (index: uint, v: [^]float) { impl_VertexAttrib1fv(index, v) }
    VertexAttrib1s :: proc "c" (index: uint, x: short) { impl_VertexAttrib1s(index, x) }
    VertexAttrib1sv :: proc "c" (index: uint, v: [^]short) { impl_VertexAttrib1sv(index, v) }
    VertexAttrib2d :: proc "c" (index: uint, x: double, y: double) { impl_VertexAttrib2d(index, x, y) }
    VertexAttrib2dv :: proc "c" (index: uint, v: [^]double) { impl_VertexAttrib2dv(index, v) }
    VertexAttrib2f :: proc "c" (index: uint, x: float, y: float) { impl_VertexAttrib2f(index, x, y) }
    VertexAttrib2fv :: proc "c" (index: uint, v: [^]float) { impl_VertexAttrib2fv(index, v) }
    VertexAttrib2s :: proc "c" (index: uint, x: short, y: short) { impl_VertexAttrib2s(index, x, y) }
    VertexAttrib2sv :: proc "c" (index: uint, v: [^]short) { impl_VertexAttrib2sv(index, v) }
    VertexAttrib3d :: proc "c" (index: uint, x: double, y: double, z: double) { impl_VertexAttrib3d(index, x, y, z) }
    VertexAttrib3dv :: proc "c" (index: uint, v: [^]double) { impl_VertexAttrib3dv(index, v) }
    VertexAttrib3f :: proc "c" (index: uint, x: float, y: float, z: float) { impl_VertexAttrib3f(index, x, y, z) }
    VertexAttrib3fv :: proc "c" (index: uint, v: [^]float) { impl_VertexAttrib3fv(index, v) }
    VertexAttrib3s :: proc "c" (index: uint, x: short, y: short, z: short) { impl_VertexAttrib3s(index, x, y, z) }
    VertexAttrib3sv :: proc "c" (index: uint, v: [^]short) { impl_VertexAttrib3sv(index, v) }
    VertexAttrib4Nbv :: proc "c" (index: uint, v: [^]byte) { impl_VertexAttrib4Nbv(index, v) }
    VertexAttrib4Niv :: proc "c" (index: uint, v: [^]int) { impl_VertexAttrib4Niv(index, v) }
    VertexAttrib4Nsv :: proc "c" (index: uint, v: [^]short) { impl_VertexAttrib4Nsv(index, v) }
    VertexAttrib4Nub :: proc "c" (index: uint, x: ubyte, y: ubyte, z: ubyte, w: ubyte) { impl_VertexAttrib4Nub(index, x, y, z, w) }
    VertexAttrib4Nubv :: proc "c" (index: uint, v: cstring) { impl_VertexAttrib4Nubv(index, v) }
    VertexAttrib4Nuiv :: proc "c" (index: uint, v: [^]uint) { impl_VertexAttrib4Nuiv(index, v) }
    VertexAttrib4Nusv :: proc "c" (index: uint, v: [^]ushort) { impl_VertexAttrib4Nusv(index, v) }
    VertexAttrib4bv :: proc "c" (index: uint, v: [^]byte) { impl_VertexAttrib4bv(index, v) }
    VertexAttrib4d :: proc "c" (index: uint, x: double, y: double, z: double, w: double) { impl_VertexAttrib4d(index, x, y, z, w) }
    VertexAttrib4dv :: proc "c" (index: uint, v: [^]double) { impl_VertexAttrib4dv(index, v) }
    VertexAttrib4f :: proc "c" (index: uint, x: float, y: float, z: float, w: float) { impl_VertexAttrib4f(index, x, y, z, w) }
    VertexAttrib4fv :: proc "c" (index: uint, v: [^]float) { impl_VertexAttrib4fv(index, v) }
    VertexAttrib4iv :: proc "c" (index: uint, v: [^]int) { impl_VertexAttrib4iv(index, v) }
    VertexAttrib4s :: proc "c" (index: uint, x: short, y: short, z: short, w: short) { impl_VertexAttrib4s(index, x, y, z, w) }
    VertexAttrib4sv :: proc "c" (index: uint, v: [^]short) { impl_VertexAttrib4sv(index, v) }
    VertexAttrib4ubv :: proc "c" (index: uint, v: cstring) { impl_VertexAttrib4ubv(index, v) }
    VertexAttrib4uiv :: proc "c" (index: uint, v: [^]uint) { impl_VertexAttrib4uiv(index, v) }
    VertexAttrib4usv :: proc "c" (index: uint, v: [^]ushort) { impl_VertexAttrib4usv(index, v) }
    VertexAttribPointer :: proc "c" (index: uint, size: int, type: Enum, normalized: boolean, stride: sizei, pointer: uintptr) { impl_VertexAttribPointer(index, size, type, normalized, stride, pointer) }
    UniformMatrix2x3fv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]float) { impl_UniformMatrix2x3fv(location, count, transpose, value) }
    UniformMatrix3x2fv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]float) { impl_UniformMatrix3x2fv(location, count, transpose, value) }
    UniformMatrix2x4fv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]float) { impl_UniformMatrix2x4fv(location, count, transpose, value) }
    UniformMatrix4x2fv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]float) { impl_UniformMatrix4x2fv(location, count, transpose, value) }
    UniformMatrix3x4fv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]float) { impl_UniformMatrix3x4fv(location, count, transpose, value) }
    UniformMatrix4x3fv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]float) { impl_UniformMatrix4x3fv(location, count, transpose, value) }
    ColorMaski :: proc "c" (index: uint, r: boolean, g: boolean, b: boolean, a: boolean) { impl_ColorMaski(index, r, g, b, a) }
    GetBooleani_v :: proc "c" (target: Enum, index: uint, data: [^]boolean) { impl_GetBooleani_v(target, index, data) }
    GetIntegeri_v :: proc "c" (target: Enum, index: uint, data: [^]int) { impl_GetIntegeri_v(target, index, data) }
    Enablei :: proc "c" (target: Enum, index: uint) { impl_Enablei(target, index) }
    Disablei :: proc "c" (target: Enum, index: uint) { impl_Disablei(target, index) }
    IsEnabledi :: proc "c" (target: Enum, index: uint) -> boolean { return impl_IsEnabledi(target, index) }
    BeginTransformFeedback :: proc "c" (primitiveMode: Enum) { impl_BeginTransformFeedback(primitiveMode) }
    EndTransformFeedback :: proc "c" () { impl_EndTransformFeedback() }
    BindBufferRange :: proc "c" (target: Enum, index: uint, buffer: uint, offset: intptr, size: sizeiptr) { impl_BindBufferRange(target, index, buffer, offset, size) }
    BindBufferBase :: proc "c" (target: Enum, index: uint, buffer: uint) { impl_BindBufferBase(target, index, buffer) }
    TransformFeedbackVaryings :: proc "c" (program: uint, count: sizei, varyings: [^]cstring, bufferMode: Enum) { impl_TransformFeedbackVaryings(program, count, varyings, bufferMode) }
    GetTransformFeedbackVarying :: proc "c" (program: uint, index: uint, bufSize: sizei, length: [^]sizei, size: [^]sizei, type: [^]Enum, name: [^]char) { impl_GetTransformFeedbackVarying(program, index, bufSize, length, size, type, name) }
    ClampColor :: proc "c" (target: Enum, clamp: Enum) { impl_ClampColor(target, clamp) }
    BeginConditionalRender :: proc "c" (id: uint, mode: Enum) { impl_BeginConditionalRender(id, mode) }
    EndConditionalRender :: proc "c" () { impl_EndConditionalRender() }
    VertexAttribIPointer :: proc "c" (index: uint, size: int, type: Enum, stride: sizei, pointer: rawptr) { impl_VertexAttribIPointer(index, size, type, stride, pointer) }
    GetVertexAttribIiv :: proc "c" (index: uint, pname: Enum, params: [^]int) { impl_GetVertexAttribIiv(index, pname, params) }
    GetVertexAttribIuiv :: proc "c" (index: uint, pname: Enum, params: [^]uint) { impl_GetVertexAttribIuiv(index, pname, params) }
    VertexAttribI1i :: proc "c" (index: uint, x: int) { impl_VertexAttribI1i(index, x) }
    VertexAttribI2i :: proc "c" (index: uint, x: int, y: int) { impl_VertexAttribI2i(index, x, y) }
    VertexAttribI3i :: proc "c" (index: uint, x: int, y: int, z: int) { impl_VertexAttribI3i(index, x, y, z) }
    VertexAttribI4i :: proc "c" (index: uint, x: int, y: int, z: int, w: int) { impl_VertexAttribI4i(index, x, y, z, w) }
    VertexAttribI1ui :: proc "c" (index: uint, x: uint) { impl_VertexAttribI1ui(index, x) }
    VertexAttribI2ui :: proc "c" (index: uint, x: uint, y: uint) { impl_VertexAttribI2ui(index, x, y) }
    VertexAttribI3ui :: proc "c" (index: uint, x: uint, y: uint, z: uint) { impl_VertexAttribI3ui(index, x, y, z) }
    VertexAttribI4ui :: proc "c" (index: uint, x: uint, y: uint, z: uint, w: uint) { impl_VertexAttribI4ui(index, x, y, z, w) }
    VertexAttribI1iv :: proc "c" (index: uint, v: [^]int) { impl_VertexAttribI1iv(index, v) }
    VertexAttribI2iv :: proc "c" (index: uint, v: [^]int) { impl_VertexAttribI2iv(index, v) }
    VertexAttribI3iv :: proc "c" (index: uint, v: [^]int) { impl_VertexAttribI3iv(index, v) }
    VertexAttribI4iv :: proc "c" (index: uint, v: [^]int) { impl_VertexAttribI4iv(index, v) }
    VertexAttribI1uiv :: proc "c" (index: uint, v: [^]uint) { impl_VertexAttribI1uiv(index, v) }
    VertexAttribI2uiv :: proc "c" (index: uint, v: [^]uint) { impl_VertexAttribI2uiv(index, v) }
    VertexAttribI3uiv :: proc "c" (index: uint, v: [^]uint) { impl_VertexAttribI3uiv(index, v) }
    VertexAttribI4uiv :: proc "c" (index: uint, v: [^]uint) { impl_VertexAttribI4uiv(index, v) }
    VertexAttribI4bv :: proc "c" (index: uint, v: [^]byte) { impl_VertexAttribI4bv(index, v) }
    VertexAttribI4sv :: proc "c" (index: uint, v: [^]short) { impl_VertexAttribI4sv(index, v) }
    VertexAttribI4ubv :: proc "c" (index: uint, v: cstring) { impl_VertexAttribI4ubv(index, v) }
    VertexAttribI4usv :: proc "c" (index: uint, v: [^]ushort) { impl_VertexAttribI4usv(index, v) }
    GetUniformuiv :: proc "c" (program: uint, location: int, params: [^]uint) { impl_GetUniformuiv(program, location, params) }
    BindFragDataLocation :: proc "c" (program: uint, color: uint, name: cstring) { impl_BindFragDataLocation(program, color, name) }
    GetFragDataLocation :: proc "c" (program: uint, name: cstring) -> int { return impl_GetFragDataLocation(program, name) }
    Uniform1ui :: proc "c" (location: int, v0: uint) { impl_Uniform1ui(location, v0) }
    Uniform2ui :: proc "c" (location: int, v0: uint, v1: uint) { impl_Uniform2ui(location, v0, v1) }
    Uniform3ui :: proc "c" (location: int, v0: uint, v1: uint, v2: uint) { impl_Uniform3ui(location, v0, v1, v2) }
    Uniform4ui :: proc "c" (location: int, v0: uint, v1: uint, v2: uint, v3: uint) { impl_Uniform4ui(location, v0, v1, v2, v3) }
    Uniform1uiv :: proc "c" (location: int, count: sizei, value: [^]uint) { impl_Uniform1uiv(location, count, value) }
    Uniform2uiv :: proc "c" (location: int, count: sizei, value: [^]uint) { impl_Uniform2uiv(location, count, value) }
    Uniform3uiv :: proc "c" (location: int, count: sizei, value: [^]uint) { impl_Uniform3uiv(location, count, value) }
    Uniform4uiv :: proc "c" (location: int, count: sizei, value: [^]uint) { impl_Uniform4uiv(location, count, value) }
    TexParameterIiv :: proc "c" (target: Enum, pname: Enum, params: [^]int) { impl_TexParameterIiv(target, pname, params) }
    TexParameterIuiv :: proc "c" (target: Enum, pname: Enum, params: [^]uint) { impl_TexParameterIuiv(target, pname, params) }
    GetTexParameterIiv :: proc "c" (target: Enum, pname: Enum, params: [^]int) { impl_GetTexParameterIiv(target, pname, params) }
    GetTexParameterIuiv :: proc "c" (target: Enum, pname: Enum, params: [^]uint) { impl_GetTexParameterIuiv(target, pname, params) }
    ClearBufferiv :: proc "c" (buffer: Enum, drawbuffer: int, value: [^]int) { impl_ClearBufferiv(buffer, drawbuffer, value) }
    ClearBufferuiv :: proc "c" (buffer: Enum, drawbuffer: int, value: [^]uint) { impl_ClearBufferuiv(buffer, drawbuffer, value) }
    ClearBufferfv :: proc "c" (buffer: Enum, drawbuffer: int, value: [^]float) { impl_ClearBufferfv(buffer, drawbuffer, value) }
    ClearBufferfi :: proc "c" (buffer: Enum, drawbuffer: int, depth: float, stencil: int) { impl_ClearBufferfi(buffer, drawbuffer, depth, stencil) }
    GetStringi :: proc "c" (name: Enum, index: uint) -> cstring { return impl_GetStringi(name, index) }
    IsRenderbuffer :: proc "c" (renderbuffer: uint) -> boolean { return impl_IsRenderbuffer(renderbuffer) }
    BindRenderbuffer :: proc "c" (target: Enum, renderbuffer: uint) { impl_BindRenderbuffer(target, renderbuffer) }
    DeleteRenderbuffers :: proc "c" (n: sizei, renderbuffers: [^]uint) { impl_DeleteRenderbuffers(n, renderbuffers) }
    GenRenderbuffers :: proc "c" (n: sizei, renderbuffers: [^]uint) { impl_GenRenderbuffers(n, renderbuffers) }
    RenderbufferStorage :: proc "c" (target: Enum, internalformat: Enum, width: sizei, height: sizei) { impl_RenderbufferStorage(target, internalformat, width, height) }
    GetRenderbufferParameteriv :: proc "c" (target: Enum, pname: Enum, params: [^]int) { impl_GetRenderbufferParameteriv(target, pname, params) }
    IsFramebuffer :: proc "c" (framebuffer: uint) -> boolean { return impl_IsFramebuffer(framebuffer) }
    BindFramebuffer :: proc "c" (target: Enum, framebuffer: uint) { impl_BindFramebuffer(target, framebuffer) }
    DeleteFramebuffers :: proc "c" (n: sizei, framebuffers: [^]uint) { impl_DeleteFramebuffers(n, framebuffers) }
    GenFramebuffers :: proc "c" (n: sizei, framebuffers: [^]uint) { impl_GenFramebuffers(n, framebuffers) }
    CheckFramebufferStatus :: proc "c" (target: Enum) -> Enum { return impl_CheckFramebufferStatus(target) }
    FramebufferTexture1D :: proc "c" (target: Enum, attachment: Enum, textarget: Enum, texture: uint, level: int) { impl_FramebufferTexture1D(target, attachment, textarget, texture, level) }
    FramebufferTexture2D :: proc "c" (target: Enum, attachment: Enum, textarget: Enum, texture: uint, level: int) { impl_FramebufferTexture2D(target, attachment, textarget, texture, level) }
    FramebufferTexture3D :: proc "c" (target: Enum, attachment: Enum, textarget: Enum, texture: uint, level: int, zoffset: int) { impl_FramebufferTexture3D(target, attachment, textarget, texture, level, zoffset) }
    FramebufferRenderbuffer :: proc "c" (target: Enum, attachment: Enum, renderbuffertarget: Enum, renderbuffer: uint) { impl_FramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) }
    GetFramebufferAttachmentParameteriv :: proc "c" (target: Enum, attachment: Enum, pname: Enum, params: [^]int) { impl_GetFramebufferAttachmentParameteriv(target, attachment, pname, params) }
    GenerateMipmap :: proc "c" (target: Enum) { impl_GenerateMipmap(target) }
    BlitFramebuffer :: proc "c" (srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: bitfield, filter: Enum) { impl_BlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) }
    RenderbufferStorageMultisample :: proc "c" (target: Enum, samples: sizei, internalformat: Enum, width: sizei, height: sizei) { impl_RenderbufferStorageMultisample(target, samples, internalformat, width, height) }
    FramebufferTextureLayer :: proc "c" (target: Enum, attachment: Enum, texture: uint, level: int, layer: int) { impl_FramebufferTextureLayer(target, attachment, texture, level, layer) }
    MapBufferRange :: proc "c" (target: Enum, offset: intptr, length: sizeiptr, access: bitfield) -> rawptr { return impl_MapBufferRange(target, offset, length, access) }
    FlushMappedBufferRange :: proc "c" (target: Enum, offset: intptr, length: sizeiptr) { impl_FlushMappedBufferRange(target, offset, length) }
    BindVertexArray :: proc "c" (array: uint) { impl_BindVertexArray(array) }
    DeleteVertexArrays :: proc "c" (n: sizei, arrays: [^]uint) { impl_DeleteVertexArrays(n, arrays) }
    GenVertexArrays :: proc "c" (n: sizei, arrays: [^]uint) { impl_GenVertexArrays(n, arrays) }
    IsVertexArray :: proc "c" (array: uint) -> boolean { return impl_IsVertexArray(array) }
    DrawArraysInstanced :: proc "c" (mode: Enum, first: int, count: sizei, instancecount: sizei) { impl_DrawArraysInstanced(mode, first, count, instancecount) }
    DrawElementsInstanced :: proc "c" (mode: Enum, count: sizei, type: Enum, indices: rawptr, instancecount: sizei) { impl_DrawElementsInstanced(mode, count, type, indices, instancecount) }
    TexBuffer :: proc "c" (target: Enum, internalformat: Enum, buffer: uint) { impl_TexBuffer(target, internalformat, buffer) }
    PrimitiveRestartIndex :: proc "c" (index: uint) { impl_PrimitiveRestartIndex(index) }
    CopyBufferSubData :: proc "c" (readTarget: Enum, writeTarget: Enum, readOffset: intptr, writeOffset: intptr, size: sizeiptr) { impl_CopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) }
    GetUniformIndices :: proc "c" (program: uint, uniformCount: sizei, uniformNames: [^]cstring, uniformIndices: [^]uint) { impl_GetUniformIndices(program, uniformCount, uniformNames, uniformIndices) }
    GetActiveUniformsiv :: proc "c" (program: uint, uniformCount: sizei, uniformIndices: [^]uint, pname: Enum, params: [^]int) { impl_GetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) }
    GetActiveUniformName :: proc "c" (program: uint, uniformIndex: uint, bufSize: sizei, length: [^]sizei, uniformName: [^]char) { impl_GetActiveUniformName(program, uniformIndex, bufSize, length, uniformName) }
    GetUniformBlockIndex :: proc "c" (program: uint, uniformBlockName: cstring) -> uint { return impl_GetUniformBlockIndex(program, uniformBlockName) }
    GetActiveUniformBlockiv :: proc "c" (program: uint, uniformBlockIndex: uint, pname: Enum, params: [^]int) { impl_GetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) }
    GetActiveUniformBlockName :: proc "c" (program: uint, uniformBlockIndex: uint, bufSize: sizei, length: [^]sizei, uniformBlockName: [^]char) { impl_GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) }
    UniformBlockBinding :: proc "c" (program: uint, uniformBlockIndex: uint, uniformBlockBinding: uint) { impl_UniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) }
    DrawElementsBaseVertex :: proc "c" (mode: Enum, count: sizei, type: Enum, indices: rawptr, basevertex: int) { impl_DrawElementsBaseVertex(mode, count, type, indices, basevertex) }
    DrawRangeElementsBaseVertex :: proc "c" (mode: Enum, start: uint, end: uint, count: sizei, type: Enum, indices: rawptr, basevertex: int) { impl_DrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex) }
    DrawElementsInstancedBaseVertex :: proc "c" (mode: Enum, count: sizei, type: Enum, indices: rawptr, instancecount: sizei, basevertex: int) { impl_DrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex) }
    MultiDrawElementsBaseVertex :: proc "c" (mode: Enum, count: [^]sizei, type: Enum, indices: [^]rawptr, drawcount: sizei, basevertex: [^]int) { impl_MultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex) }
    ProvokingVertex :: proc "c" (mode: Enum) { impl_ProvokingVertex(mode) }
    FenceSync :: proc "c" (condition: Enum, flags: bitfield) -> sync { return impl_FenceSync(condition, flags) }
    IsSync :: proc "c" (sync: sync) -> boolean { return impl_IsSync(sync) }
    DeleteSync :: proc "c" (sync: sync) { impl_DeleteSync(sync) }
    ClientWaitSync :: proc "c" (sync: sync, flags: bitfield, timeout: uint64) -> Enum { return impl_ClientWaitSync(sync, flags, timeout) }
    WaitSync :: proc "c" (sync: sync, flags: bitfield, timeout: uint64) { impl_WaitSync(sync, flags, timeout) }
    GetInteger64v :: proc "c" (pname: Enum, data: [^]int64) { impl_GetInteger64v(pname, data) }
    GetSynciv :: proc "c" (sync: sync, pname: Enum, count: sizei, length: [^]sizei, values: [^]int) { impl_GetSynciv(sync, pname, count, length, values) }
    GetInteger64i_v :: proc "c" (target: Enum, index: uint, data: [^]int64) { impl_GetInteger64i_v(target, index, data) }
    GetBufferParameteri64v :: proc "c" (target: Enum, pname: Enum, params: [^]int64) { impl_GetBufferParameteri64v(target, pname, params) }
    FramebufferTexture :: proc "c" (target: Enum, attachment: Enum, texture: uint, level: int) { impl_FramebufferTexture(target, attachment, texture, level) }
    TexImage2DMultisample :: proc "c" (target: Enum, samples: sizei, internalformat: Enum, width: sizei, height: sizei, fixedsamplelocations: boolean) { impl_TexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) }
    TexImage3DMultisample :: proc "c" (target: Enum, samples: sizei, internalformat: Enum, width: sizei, height: sizei, depth: sizei, fixedsamplelocations: boolean) { impl_TexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) }
    GetMultisamplefv :: proc "c" (pname: Enum, index: uint, val: [^]float) { impl_GetMultisamplefv(pname, index, val) }
    SampleMaski :: proc "c" (maskNumber: uint, mask: bitfield) { impl_SampleMaski(maskNumber, mask) }
    BindFragDataLocationIndexed :: proc "c" (program: uint, colorNumber: uint, index: uint, name: cstring) { impl_BindFragDataLocationIndexed(program, colorNumber, index, name) }
    GetFragDataIndex :: proc "c" (program: uint, name: cstring) -> int { return impl_GetFragDataIndex(program, name) }
    GenSamplers :: proc "c" (count: sizei, samplers: [^]uint) { impl_GenSamplers(count, samplers) }
    DeleteSamplers :: proc "c" (count: sizei, samplers: [^]uint) { impl_DeleteSamplers(count, samplers) }
    IsSampler :: proc "c" (sampler: uint) -> boolean { return impl_IsSampler(sampler) }
    BindSampler :: proc "c" (unit: uint, sampler: uint) { impl_BindSampler(unit, sampler) }
    SamplerParameteri :: proc "c" (sampler: uint, pname: Enum, param: int) { impl_SamplerParameteri(sampler, pname, param) }
    SamplerParameteriv :: proc "c" (sampler: uint, pname: Enum, param: [^]int) { impl_SamplerParameteriv(sampler, pname, param) }
    SamplerParameterf :: proc "c" (sampler: uint, pname: Enum, param: float) { impl_SamplerParameterf(sampler, pname, param) }
    SamplerParameterfv :: proc "c" (sampler: uint, pname: Enum, param: [^]float) { impl_SamplerParameterfv(sampler, pname, param) }
    SamplerParameterIiv :: proc "c" (sampler: uint, pname: Enum, param: [^]int) { impl_SamplerParameterIiv(sampler, pname, param) }
    SamplerParameterIuiv :: proc "c" (sampler: uint, pname: Enum, param: [^]uint) { impl_SamplerParameterIuiv(sampler, pname, param) }
    GetSamplerParameteriv :: proc "c" (sampler: uint, pname: Enum, params: [^]int) { impl_GetSamplerParameteriv(sampler, pname, params) }
    GetSamplerParameterIiv :: proc "c" (sampler: uint, pname: Enum, params: [^]int) { impl_GetSamplerParameterIiv(sampler, pname, params) }
    GetSamplerParameterfv :: proc "c" (sampler: uint, pname: Enum, params: [^]float) { impl_GetSamplerParameterfv(sampler, pname, params) }
    GetSamplerParameterIuiv :: proc "c" (sampler: uint, pname: Enum, params: [^]uint) { impl_GetSamplerParameterIuiv(sampler, pname, params) }
    QueryCounter :: proc "c" (id: uint, target: Enum) { impl_QueryCounter(id, target) }
    GetQueryObjecti64v :: proc "c" (id: uint, pname: Enum, params: [^]int64) { impl_GetQueryObjecti64v(id, pname, params) }
    GetQueryObjectui64v :: proc "c" (id: uint, pname: Enum, params: [^]uint64) { impl_GetQueryObjectui64v(id, pname, params) }
    VertexAttribDivisor :: proc "c" (index: uint, divisor: uint) { impl_VertexAttribDivisor(index, divisor) }
    VertexAttribP1ui :: proc "c" (index: uint, type: Enum, normalized: boolean, value: uint) { impl_VertexAttribP1ui(index, type, normalized, value) }
    VertexAttribP1uiv :: proc "c" (index: uint, type: Enum, normalized: boolean, value: [^]uint) { impl_VertexAttribP1uiv(index, type, normalized, value) }
    VertexAttribP2ui :: proc "c" (index: uint, type: Enum, normalized: boolean, value: uint) { impl_VertexAttribP2ui(index, type, normalized, value) }
    VertexAttribP2uiv :: proc "c" (index: uint, type: Enum, normalized: boolean, value: [^]uint) { impl_VertexAttribP2uiv(index, type, normalized, value) }
    VertexAttribP3ui :: proc "c" (index: uint, type: Enum, normalized: boolean, value: uint) { impl_VertexAttribP3ui(index, type, normalized, value) }
    VertexAttribP3uiv :: proc "c" (index: uint, type: Enum, normalized: boolean, value: [^]uint) { impl_VertexAttribP3uiv(index, type, normalized, value) }
    VertexAttribP4ui :: proc "c" (index: uint, type: Enum, normalized: boolean, value: uint) { impl_VertexAttribP4ui(index, type, normalized, value) }
    VertexAttribP4uiv :: proc "c" (index: uint, type: Enum, normalized: boolean, value: [^]uint) { impl_VertexAttribP4uiv(index, type, normalized, value) }
    MinSampleShading :: proc "c" (value: float) { impl_MinSampleShading(value) }
    BlendEquationi :: proc "c" (buf: uint, mode: Enum) { impl_BlendEquationi(buf, mode) }
    BlendEquationSeparatei :: proc "c" (buf: uint, modeRGB: Enum, modeAlpha: Enum) { impl_BlendEquationSeparatei(buf, modeRGB, modeAlpha) }
    BlendFunci :: proc "c" (buf: uint, src: Enum, dst: Enum) { impl_BlendFunci(buf, src, dst) }
    BlendFuncSeparatei :: proc "c" (buf: uint, srcRGB: Enum, dstRGB: Enum, srcAlpha: Enum, dstAlpha: Enum) { impl_BlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) }
    DrawArraysIndirect :: proc "c" (mode: Enum, indirect: rawptr) { impl_DrawArraysIndirect(mode, indirect) }
    DrawElementsIndirect :: proc "c" (mode: Enum, type: Enum, indirect: rawptr) { impl_DrawElementsIndirect(mode, type, indirect) }
    Uniform1d :: proc "c" (location: int, x: double) { impl_Uniform1d(location, x) }
    Uniform2d :: proc "c" (location: int, x: double, y: double) { impl_Uniform2d(location, x, y) }
    Uniform3d :: proc "c" (location: int, x: double, y: double, z: double) { impl_Uniform3d(location, x, y, z) }
    Uniform4d :: proc "c" (location: int, x: double, y: double, z: double, w: double) { impl_Uniform4d(location, x, y, z, w) }
    Uniform1dv :: proc "c" (location: int, count: sizei, value: [^]double) { impl_Uniform1dv(location, count, value) }
    Uniform2dv :: proc "c" (location: int, count: sizei, value: [^]double) { impl_Uniform2dv(location, count, value) }
    Uniform3dv :: proc "c" (location: int, count: sizei, value: [^]double) { impl_Uniform3dv(location, count, value) }
    Uniform4dv :: proc "c" (location: int, count: sizei, value: [^]double) { impl_Uniform4dv(location, count, value) }
    UniformMatrix2dv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]double) { impl_UniformMatrix2dv(location, count, transpose, value) }
    UniformMatrix3dv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]double) { impl_UniformMatrix3dv(location, count, transpose, value) }
    UniformMatrix4dv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]double) { impl_UniformMatrix4dv(location, count, transpose, value) }
    UniformMatrix2x3dv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]double) { impl_UniformMatrix2x3dv(location, count, transpose, value) }
    UniformMatrix2x4dv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]double) { impl_UniformMatrix2x4dv(location, count, transpose, value) }
    UniformMatrix3x2dv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]double) { impl_UniformMatrix3x2dv(location, count, transpose, value) }
    UniformMatrix3x4dv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]double) { impl_UniformMatrix3x4dv(location, count, transpose, value) }
    UniformMatrix4x2dv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]double) { impl_UniformMatrix4x2dv(location, count, transpose, value) }
    UniformMatrix4x3dv :: proc "c" (location: int, count: sizei, transpose: boolean, value: [^]double) { impl_UniformMatrix4x3dv(location, count, transpose, value) }
    GetUniformdv :: proc "c" (program: uint, location: int, params: [^]double) { impl_GetUniformdv(program, location, params) }
    GetSubroutineUniformLocation :: proc "c" (program: uint, shadertype: Enum, name: cstring) -> int { return impl_GetSubroutineUniformLocation(program, shadertype, name) }
    GetSubroutineIndex :: proc "c" (program: uint, shadertype: Enum, name: cstring) -> uint { return impl_GetSubroutineIndex(program, shadertype, name) }
    GetActiveSubroutineUniformiv :: proc "c" (program: uint, shadertype: Enum, index: uint, pname: Enum, values: [^]int) { impl_GetActiveSubroutineUniformiv(program, shadertype, index, pname, values) }
    GetActiveSubroutineUniformName :: proc "c" (program: uint, shadertype: Enum, index: uint, bufSize: sizei, length: [^]sizei, name: [^]char) { impl_GetActiveSubroutineUniformName(program, shadertype, index, bufSize, length, name) }
    GetActiveSubroutineName :: proc "c" (program: uint, shadertype: Enum, index: uint, bufSize: sizei, length: [^]sizei, name: [^]char) { impl_GetActiveSubroutineName(program, shadertype, index, bufSize, length, name) }
    UniformSubroutinesuiv :: proc "c" (shadertype: Enum, count: sizei, indices: [^]uint) { impl_UniformSubroutinesuiv(shadertype, count, indices) }
    GetUniformSubroutineuiv :: proc "c" (shadertype: Enum, location: int, params: [^]uint) { impl_GetUniformSubroutineuiv(shadertype, location, params) }
    GetProgramStageiv :: proc "c" (program: uint, shadertype: Enum, pname: Enum, values: [^]int) { impl_GetProgramStageiv(program, shadertype, pname, values) }
    PatchParameteri :: proc "c" (pname: Enum, value: int) { impl_PatchParameteri(pname, value) }
    PatchParameterfv :: proc "c" (pname: Enum, values: [^]float) { impl_PatchParameterfv(pname, values) }
    BindTransformFeedback :: proc "c" (target: Enum, id: uint) { impl_BindTransformFeedback(target, id) }
    DeleteTransformFeedbacks :: proc "c" (n: sizei, ids: [^]uint) { impl_DeleteTransformFeedbacks(n, ids) }
    GenTransformFeedbacks :: proc "c" (n: sizei, ids: [^]uint) { impl_GenTransformFeedbacks(n, ids) }
    IsTransformFeedback :: proc "c" (id: uint) -> boolean { return impl_IsTransformFeedback(id) }
    PauseTransformFeedback :: proc "c" () { impl_PauseTransformFeedback() }
    ResumeTransformFeedback :: proc "c" () { impl_ResumeTransformFeedback() }
    DrawTransformFeedback :: proc "c" (mode: Enum, id: uint) { impl_DrawTransformFeedback(mode, id) }
    DrawTransformFeedbackStream :: proc "c" (mode: Enum, id: uint, stream: uint) { impl_DrawTransformFeedbackStream(mode, id, stream) }
    BeginQueryIndexed :: proc "c" (target: Enum, index: uint, id: uint) { impl_BeginQueryIndexed(target, index, id) }
    EndQueryIndexed :: proc "c" (target: Enum, index: uint) { impl_EndQueryIndexed(target, index) }
    GetQueryIndexediv :: proc "c" (target: Enum, index: uint, pname: Enum, params: [^]int) { impl_GetQueryIndexediv(target, index, pname, params) }
    ReleaseShaderCompiler :: proc "c" () { impl_ReleaseShaderCompiler() }
    ShaderBinary :: proc "c" (count: sizei, shaders: [^]uint, binaryFormat: Enum, binary: rawptr, length: sizei) { impl_ShaderBinary(count, shaders, binaryFormat, binary, length) }
    GetShaderPrecisionFormat :: proc "c" (shadertype: Enum, precisiontype: Enum, range: [^]int, precision: [^]int) { impl_GetShaderPrecisionFormat(shadertype, precisiontype, range, precision) }
    DepthRangef :: proc "c" (n: float, f: float) { impl_DepthRangef(n, f) }
    ClearDepthf :: proc "c" (d: float) { impl_ClearDepthf(d) }
    GetProgramBinary :: proc "c" (program: uint, bufSize: sizei, length: [^]sizei, binaryFormat: [^]Enum, binary: rawptr) { impl_GetProgramBinary(program, bufSize, length, binaryFormat, binary) }
    ProgramBinary :: proc "c" (program: uint, binaryFormat: Enum, binary: rawptr, length: sizei) { impl_ProgramBinary(program, binaryFormat, binary, length) }
    ProgramParameteri :: proc "c" (program: uint, pname: Enum, value: int) { impl_ProgramParameteri(program, pname, value) }
    UseProgramStages :: proc "c" (pipeline: uint, stages: bitfield, program: uint) { impl_UseProgramStages(pipeline, stages, program) }
    ActiveShaderProgram :: proc "c" (pipeline: uint, program: uint) { impl_ActiveShaderProgram(pipeline, program) }
    CreateShaderProgramv :: proc "c" (type: Enum, count: sizei, strings: [^]cstring) -> uint { return impl_CreateShaderProgramv(type, count, strings) }
    BindProgramPipeline :: proc "c" (pipeline: uint) { impl_BindProgramPipeline(pipeline) }
    DeleteProgramPipelines :: proc "c" (n: sizei, pipelines: [^]uint) { impl_DeleteProgramPipelines(n, pipelines) }
    GenProgramPipelines :: proc "c" (n: sizei, pipelines: [^]uint) { impl_GenProgramPipelines(n, pipelines) }
    IsProgramPipeline :: proc "c" (pipeline: uint) -> boolean { return impl_IsProgramPipeline(pipeline) }
    GetProgramPipelineiv :: proc "c" (pipeline: uint, pname: Enum, params: [^]int) { impl_GetProgramPipelineiv(pipeline, pname, params) }
    ProgramUniform1i :: proc "c" (program: uint, location: int, v0: int) { impl_ProgramUniform1i(program, location, v0) }
    ProgramUniform1iv :: proc "c" (program: uint, location: int, count: sizei, value: [^]int) { impl_ProgramUniform1iv(program, location, count, value) }
    ProgramUniform1f :: proc "c" (program: uint, location: int, v0: float) { impl_ProgramUniform1f(program, location, v0) }
    ProgramUniform1fv :: proc "c" (program: uint, location: int, count: sizei, value: [^]float) { impl_ProgramUniform1fv(program, location, count, value) }
    ProgramUniform1d :: proc "c" (program: uint, location: int, v0: double) { impl_ProgramUniform1d(program, location, v0) }
    ProgramUniform1dv :: proc "c" (program: uint, location: int, count: sizei, value: [^]double) { impl_ProgramUniform1dv(program, location, count, value) }
    ProgramUniform1ui :: proc "c" (program: uint, location: int, v0: uint) { impl_ProgramUniform1ui(program, location, v0) }
    ProgramUniform1uiv :: proc "c" (program: uint, location: int, count: sizei, value: [^]uint) { impl_ProgramUniform1uiv(program, location, count, value) }
    ProgramUniform2i :: proc "c" (program: uint, location: int, v0: int, v1: int) { impl_ProgramUniform2i(program, location, v0, v1) }
    ProgramUniform2iv :: proc "c" (program: uint, location: int, count: sizei, value: [^]int) { impl_ProgramUniform2iv(program, location, count, value) }
    ProgramUniform2f :: proc "c" (program: uint, location: int, v0: float, v1: float) { impl_ProgramUniform2f(program, location, v0, v1) }
    ProgramUniform2fv :: proc "c" (program: uint, location: int, count: sizei, value: [^]float) { impl_ProgramUniform2fv(program, location, count, value) }
    ProgramUniform2d :: proc "c" (program: uint, location: int, v0: double, v1: double) { impl_ProgramUniform2d(program, location, v0, v1) }
    ProgramUniform2dv :: proc "c" (program: uint, location: int, count: sizei, value: [^]double) { impl_ProgramUniform2dv(program, location, count, value) }
    ProgramUniform2ui :: proc "c" (program: uint, location: int, v0: uint, v1: uint) { impl_ProgramUniform2ui(program, location, v0, v1) }
    ProgramUniform2uiv :: proc "c" (program: uint, location: int, count: sizei, value: [^]uint) { impl_ProgramUniform2uiv(program, location, count, value) }
    ProgramUniform3i :: proc "c" (program: uint, location: int, v0: int, v1: int, v2: int) { impl_ProgramUniform3i(program, location, v0, v1, v2) }
    ProgramUniform3iv :: proc "c" (program: uint, location: int, count: sizei, value: [^]int) { impl_ProgramUniform3iv(program, location, count, value) }
    ProgramUniform3f :: proc "c" (program: uint, location: int, v0: float, v1: float, v2: float) { impl_ProgramUniform3f(program, location, v0, v1, v2) }
    ProgramUniform3fv :: proc "c" (program: uint, location: int, count: sizei, value: [^]float) { impl_ProgramUniform3fv(program, location, count, value) }
    ProgramUniform3d :: proc "c" (program: uint, location: int, v0: double, v1: double, v2: double) { impl_ProgramUniform3d(program, location, v0, v1, v2) }
    ProgramUniform3dv :: proc "c" (program: uint, location: int, count: sizei, value: [^]double) { impl_ProgramUniform3dv(program, location, count, value) }
    ProgramUniform3ui :: proc "c" (program: uint, location: int, v0: uint, v1: uint, v2: uint) { impl_ProgramUniform3ui(program, location, v0, v1, v2) }
    ProgramUniform3uiv :: proc "c" (program: uint, location: int, count: sizei, value: [^]uint) { impl_ProgramUniform3uiv(program, location, count, value) }
    ProgramUniform4i :: proc "c" (program: uint, location: int, v0: int, v1: int, v2: int, v3: int) { impl_ProgramUniform4i(program, location, v0, v1, v2, v3) }
    ProgramUniform4iv :: proc "c" (program: uint, location: int, count: sizei, value: [^]int) { impl_ProgramUniform4iv(program, location, count, value) }
    ProgramUniform4f :: proc "c" (program: uint, location: int, v0: float, v1: float, v2: float, v3: float) { impl_ProgramUniform4f(program, location, v0, v1, v2, v3) }
    ProgramUniform4fv :: proc "c" (program: uint, location: int, count: sizei, value: [^]float) { impl_ProgramUniform4fv(program, location, count, value) }
    ProgramUniform4d :: proc "c" (program: uint, location: int, v0: double, v1: double, v2: double, v3: double) { impl_ProgramUniform4d(program, location, v0, v1, v2, v3) }
    ProgramUniform4dv :: proc "c" (program: uint, location: int, count: sizei, value: [^]double) { impl_ProgramUniform4dv(program, location, count, value) }
    ProgramUniform4ui :: proc "c" (program: uint, location: int, v0: uint, v1: uint, v2: uint, v3: uint) { impl_ProgramUniform4ui(program, location, v0, v1, v2, v3) }
    ProgramUniform4uiv :: proc "c" (program: uint, location: int, count: sizei, value: [^]uint) { impl_ProgramUniform4uiv(program, location, count, value) }
    ProgramUniformMatrix2fv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]float) { impl_ProgramUniformMatrix2fv(program, location, count, transpose, value) }
    ProgramUniformMatrix3fv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]float) { impl_ProgramUniformMatrix3fv(program, location, count, transpose, value) }
    ProgramUniformMatrix4fv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]float) { impl_ProgramUniformMatrix4fv(program, location, count, transpose, value) }
    ProgramUniformMatrix2dv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]double) { impl_ProgramUniformMatrix2dv(program, location, count, transpose, value) }
    ProgramUniformMatrix3dv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]double) { impl_ProgramUniformMatrix3dv(program, location, count, transpose, value) }
    ProgramUniformMatrix4dv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]double) { impl_ProgramUniformMatrix4dv(program, location, count, transpose, value) }
    ProgramUniformMatrix2x3fv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]float) { impl_ProgramUniformMatrix2x3fv(program, location, count, transpose, value) }
    ProgramUniformMatrix3x2fv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]float) { impl_ProgramUniformMatrix3x2fv(program, location, count, transpose, value) }
    ProgramUniformMatrix2x4fv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]float) { impl_ProgramUniformMatrix2x4fv(program, location, count, transpose, value) }
    ProgramUniformMatrix4x2fv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]float) { impl_ProgramUniformMatrix4x2fv(program, location, count, transpose, value) }
    ProgramUniformMatrix3x4fv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]float) { impl_ProgramUniformMatrix3x4fv(program, location, count, transpose, value) }
    ProgramUniformMatrix4x3fv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]float) { impl_ProgramUniformMatrix4x3fv(program, location, count, transpose, value) }
    ProgramUniformMatrix2x3dv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]double) { impl_ProgramUniformMatrix2x3dv(program, location, count, transpose, value) }
    ProgramUniformMatrix3x2dv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]double) { impl_ProgramUniformMatrix3x2dv(program, location, count, transpose, value) }
    ProgramUniformMatrix2x4dv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]double) { impl_ProgramUniformMatrix2x4dv(program, location, count, transpose, value) }
    ProgramUniformMatrix4x2dv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]double) { impl_ProgramUniformMatrix4x2dv(program, location, count, transpose, value) }
    ProgramUniformMatrix3x4dv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]double) { impl_ProgramUniformMatrix3x4dv(program, location, count, transpose, value) }
    ProgramUniformMatrix4x3dv :: proc "c" (program: uint, location: int, count: sizei, transpose: boolean, value: [^]double) { impl_ProgramUniformMatrix4x3dv(program, location, count, transpose, value) }
    ValidateProgramPipeline :: proc "c" (pipeline: uint) { impl_ValidateProgramPipeline(pipeline) }
    GetProgramPipelineInfoLog :: proc "c" (pipeline: uint, bufSize: sizei, length: [^]sizei, infoLog: [^]char) { impl_GetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog) }
    VertexAttribL1d :: proc "c" (index: uint, x: double) { impl_VertexAttribL1d(index, x) }
    VertexAttribL2d :: proc "c" (index: uint, x: double, y: double) { impl_VertexAttribL2d(index, x, y) }
    VertexAttribL3d :: proc "c" (index: uint, x: double, y: double, z: double) { impl_VertexAttribL3d(index, x, y, z) }
    VertexAttribL4d :: proc "c" (index: uint, x: double, y: double, z: double, w: double) { impl_VertexAttribL4d(index, x, y, z, w) }
    VertexAttribL1dv :: proc "c" (index: uint, v: [^]double) { impl_VertexAttribL1dv(index, v) }
    VertexAttribL2dv :: proc "c" (index: uint, v: [^]double) { impl_VertexAttribL2dv(index, v) }
    VertexAttribL3dv :: proc "c" (index: uint, v: [^]double) { impl_VertexAttribL3dv(index, v) }
    VertexAttribL4dv :: proc "c" (index: uint, v: [^]double) { impl_VertexAttribL4dv(index, v) }
    VertexAttribLPointer :: proc "c" (index: uint, size: int, type: Enum, stride: sizei, pointer: rawptr) { impl_VertexAttribLPointer(index, size, type, stride, pointer) }
    GetVertexAttribLdv :: proc "c" (index: uint, pname: Enum, params: [^]double) { impl_GetVertexAttribLdv(index, pname, params) }
    ViewportArrayv :: proc "c" (first: uint, count: sizei, v: [^]float) { impl_ViewportArrayv(first, count, v) }
    ViewportIndexedf :: proc "c" (index: uint, x: float, y: float, w: float, h: float) { impl_ViewportIndexedf(index, x, y, w, h) }
    ViewportIndexedfv :: proc "c" (index: uint, v: [^]float) { impl_ViewportIndexedfv(index, v) }
    ScissorArrayv :: proc "c" (first: uint, count: sizei, v: [^]int) { impl_ScissorArrayv(first, count, v) }
    ScissorIndexed :: proc "c" (index: uint, left: int, bottom: int, width: sizei, height: sizei) { impl_ScissorIndexed(index, left, bottom, width, height) }
    ScissorIndexedv :: proc "c" (index: uint, v: [^]int) { impl_ScissorIndexedv(index, v) }
    DepthRangeArrayv :: proc "c" (first: uint, count: sizei, v: [^]double) { impl_DepthRangeArrayv(first, count, v) }
    DepthRangeIndexed :: proc "c" (index: uint, n: double, f: double) { impl_DepthRangeIndexed(index, n, f) }
    GetFloati_v :: proc "c" (target: Enum, index: uint, data: [^]float) { impl_GetFloati_v(target, index, data) }
    GetDoublei_v :: proc "c" (target: Enum, index: uint, data: [^]double) { impl_GetDoublei_v(target, index, data) }
    DrawArraysInstancedBaseInstance :: proc "c" (mode: Enum, first: int, count: sizei, instancecount: sizei, baseinstance: uint) { impl_DrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance) }
    DrawElementsInstancedBaseInstance :: proc "c" (mode: Enum, count: sizei, type: Enum, indices: rawptr, instancecount: sizei, baseinstance: uint) { impl_DrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance) }
    DrawElementsInstancedBaseVertexBaseInstance :: proc "c" (mode: Enum, count: sizei, type: Enum, indices: rawptr, instancecount: sizei, basevertex: int, baseinstance: uint) { impl_DrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance) }
    GetInternalformativ :: proc "c" (target: Enum, internalformat: Enum, pname: Enum, count: sizei, params: [^]int) { impl_GetInternalformativ(target, internalformat, pname, count, params) }
    GetActiveAtomicCounterBufferiv :: proc "c" (program: uint, bufferIndex: uint, pname: Enum, params: [^]int) { impl_GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params) }
    BindImageTexture :: proc "c" (unit: uint, texture: uint, level: int, layered: boolean, layer: int, access: Enum, format: Enum) { impl_BindImageTexture(unit, texture, level, layered, layer, access, format) }
    MemoryBarrier :: proc "c" (barriers: bitfield) { impl_MemoryBarrier(barriers) }
    TexStorage1D :: proc "c" (target: Enum, levels: sizei, internalformat: Enum, width: sizei) { impl_TexStorage1D(target, levels, internalformat, width) }
    TexStorage2D :: proc "c" (target: Enum, levels: sizei, internalformat: Enum, width: sizei, height: sizei) { impl_TexStorage2D(target, levels, internalformat, width, height) }
    TexStorage3D :: proc "c" (target: Enum, levels: sizei, internalformat: Enum, width: sizei, height: sizei, depth: sizei) { impl_TexStorage3D(target, levels, internalformat, width, height, depth) }
    DrawTransformFeedbackInstanced :: proc "c" (mode: Enum, id: uint, instancecount: sizei) { impl_DrawTransformFeedbackInstanced(mode, id, instancecount) }
    DrawTransformFeedbackStreamInstanced :: proc "c" (mode: Enum, id: uint, stream: uint, instancecount: sizei) { impl_DrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount) }
    ClearBufferData :: proc "c" (target: Enum, internalformat: Enum, format: Enum, type: Enum, data: rawptr) { impl_ClearBufferData(target, internalformat, format, type, data) }
    ClearBufferSubData :: proc "c" (target: Enum, internalformat: Enum, offset: intptr, size: sizeiptr, format: Enum, type: Enum, data: rawptr) { impl_ClearBufferSubData(target, internalformat, offset, size, format, type, data) }
    DispatchCompute :: proc "c" (num_groups_x: uint, num_groups_y: uint, num_groups_z: uint) { impl_DispatchCompute(num_groups_x, num_groups_y, num_groups_z) }
    DispatchComputeIndirect :: proc "c" (indirect: intptr) { impl_DispatchComputeIndirect(indirect) }
    CopyImageSubData :: proc "c" (srcName: uint, srcTarget: Enum, srcLevel: int, srcX: int, srcY: int, srcZ: int, dstName: uint, dstTarget: Enum, dstLevel: int, dstX: int, dstY: int, dstZ: int, srcWidth: sizei, srcHeight: sizei, srcDepth: sizei) { impl_CopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) }
    FramebufferParameteri :: proc "c" (target: Enum, pname: Enum, param: int) { impl_FramebufferParameteri(target, pname, param) }
    GetFramebufferParameteriv :: proc "c" (target: Enum, pname: Enum, params: [^]int) { impl_GetFramebufferParameteriv(target, pname, params) }
    GetInternalformati64v :: proc "c" (target: Enum, internalformat: Enum, pname: Enum, count: sizei, params: [^]int64) { impl_GetInternalformati64v(target, internalformat, pname, count, params) }
    InvalidateTexSubImage :: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei) { impl_InvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth) }
    InvalidateTexImage :: proc "c" (texture: uint, level: int) { impl_InvalidateTexImage(texture, level) }
    InvalidateBufferSubData :: proc "c" (buffer: uint, offset: intptr, length: sizeiptr) { impl_InvalidateBufferSubData(buffer, offset, length) }
    InvalidateBufferData :: proc "c" (buffer: uint) { impl_InvalidateBufferData(buffer) }
    InvalidateFramebuffer :: proc "c" (target: Enum, numAttachments: sizei, attachments: [^]Enum) { impl_InvalidateFramebuffer(target, numAttachments, attachments) }
    InvalidateSubFramebuffer :: proc "c" (target: Enum, numAttachments: sizei, attachments: [^]Enum, x: int, y: int, width: sizei, height: sizei) { impl_InvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) }
    MultiDrawArraysIndirect :: proc "c" (mode: Enum, indirect: rawptr, drawcount: sizei, stride: sizei) { impl_MultiDrawArraysIndirect(mode, indirect, drawcount, stride) }
    MultiDrawElementsIndirect :: proc "c" (mode: Enum, type: Enum, indirect: rawptr, drawcount: sizei, stride: sizei) { impl_MultiDrawElementsIndirect(mode, type, indirect, drawcount, stride) }
    GetProgramInterfaceiv :: proc "c" (program: uint, programInterface: Enum, pname: Enum, params: [^]int) { impl_GetProgramInterfaceiv(program, programInterface, pname, params) }
    GetProgramResourceIndex :: proc "c" (program: uint, programInterface: Enum, name: cstring) -> uint { return impl_GetProgramResourceIndex(program, programInterface, name) }
    GetProgramResourceName :: proc "c" (program: uint, programInterface: Enum, index: uint, bufSize: sizei, length: [^]sizei, name: [^]char) { impl_GetProgramResourceName(program, programInterface, index, bufSize, length, name) }
    GetProgramResourceiv :: proc "c" (program: uint, programInterface: Enum, index: uint, propCount: sizei, props: [^]Enum, count: sizei, length: [^]sizei, params: [^]int) { impl_GetProgramResourceiv(program, programInterface, index, propCount, props, count, length, params) }
    GetProgramResourceLocation :: proc "c" (program: uint, programInterface: Enum, name: cstring) -> int { return impl_GetProgramResourceLocation(program, programInterface, name) }
    GetProgramResourceLocationIndex :: proc "c" (program: uint, programInterface: Enum, name: cstring) -> int { return impl_GetProgramResourceLocationIndex(program, programInterface, name) }
    ShaderStorageBlockBinding :: proc "c" (program: uint, storageBlockIndex: uint, storageBlockBinding: uint) { impl_ShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding) }
    TexBufferRange :: proc "c" (target: Enum, internalformat: Enum, buffer: uint, offset: intptr, size: sizeiptr) { impl_TexBufferRange(target, internalformat, buffer, offset, size) }
    TexStorage2DMultisample :: proc "c" (target: Enum, samples: sizei, internalformat: Enum, width: sizei, height: sizei, fixedsamplelocations: boolean) { impl_TexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) }
    TexStorage3DMultisample :: proc "c" (target: Enum, samples: sizei, internalformat: Enum, width: sizei, height: sizei, depth: sizei, fixedsamplelocations: boolean) { impl_TexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) }
    TextureView :: proc "c" (texture: uint, target: Enum, origtexture: uint, internalformat: Enum, minlevel: uint, numlevels: uint, minlayer: uint, numlayers: uint) { impl_TextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) }
    BindVertexBuffer :: proc "c" (bindingindex: uint, buffer: uint, offset: intptr, stride: sizei) { impl_BindVertexBuffer(bindingindex, buffer, offset, stride) }
    VertexAttribFormat :: proc "c" (attribindex: uint, size: int, type: Enum, normalized: boolean, relativeoffset: uint) { impl_VertexAttribFormat(attribindex, size, type, normalized, relativeoffset) }
    VertexAttribIFormat :: proc "c" (attribindex: uint, size: int, type: Enum, relativeoffset: uint) { impl_VertexAttribIFormat(attribindex, size, type, relativeoffset) }
    VertexAttribLFormat :: proc "c" (attribindex: uint, size: int, type: Enum, relativeoffset: uint) { impl_VertexAttribLFormat(attribindex, size, type, relativeoffset) }
    VertexAttribBinding :: proc "c" (attribindex: uint, bindingindex: uint) { impl_VertexAttribBinding(attribindex, bindingindex) }
    VertexBindingDivisor :: proc "c" (bindingindex: uint, divisor: uint) { impl_VertexBindingDivisor(bindingindex, divisor) }
    DebugMessageControl :: proc "c" (source: Enum, type: Enum, severity: Enum, count: sizei, ids: [^]uint, enabled: boolean) { impl_DebugMessageControl(source, type, severity, count, ids, enabled) }
    DebugMessageInsert :: proc "c" (source: Enum, type: Enum, id: uint, severity: Enum, length: sizei, buf: cstring) { impl_DebugMessageInsert(source, type, id, severity, length, buf) }
    DebugMessageCallback :: proc "c" (callback: DEBUGPROC, userParam: rawptr) { impl_DebugMessageCallback(callback, userParam) }
    GetDebugMessageLog :: proc "c" (count: uint, bufSize: sizei, sources: [^]Enum, types: [^]Enum, ids: [^]uint, severities: [^]Enum, lengths: [^]sizei, messageLog: [^]char) -> uint { return impl_GetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog) }
    PushDebugGroup :: proc "c" (source: Enum, id: uint, length: sizei, message: cstring) { impl_PushDebugGroup(source, id, length, message) }
    PopDebugGroup :: proc "c" () { impl_PopDebugGroup() }
    ObjectLabel :: proc "c" (identifier: Enum, name: uint, length: sizei, label: cstring) { impl_ObjectLabel(identifier, name, length, label) }
    GetObjectLabel :: proc "c" (identifier: Enum, name: uint, bufSize: sizei, length: [^]sizei, label: [^]char) { impl_GetObjectLabel(identifier, name, bufSize, length, label) }
    ObjectPtrLabel :: proc "c" (ptr: rawptr, length: sizei, label: cstring) { impl_ObjectPtrLabel(ptr, length, label) }
    GetObjectPtrLabel :: proc "c" (ptr: rawptr, bufSize: sizei, length: [^]sizei, label: [^]char) { impl_GetObjectPtrLabel(ptr, bufSize, length, label) }
    GetPointerv :: proc "c" (pname: Enum, params: [^]rawptr) { impl_GetPointerv(pname, params) }
    BufferStorage :: proc "c" (target: Enum, size: sizeiptr, data: rawptr, flags: bitfield) { impl_BufferStorage(target, size, data, flags) }
    ClearTexImage :: proc "c" (texture: uint, level: int, format: Enum, type: Enum, data: rawptr) { impl_ClearTexImage(texture, level, format, type, data) }
    ClearTexSubImage :: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: Enum, type: Enum, data: rawptr) { impl_ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data) }
    BindBuffersBase :: proc "c" (target: Enum, first: uint, count: sizei, buffers: [^]uint) { impl_BindBuffersBase(target, first, count, buffers) }
    BindBuffersRange :: proc "c" (target: Enum, first: uint, count: sizei, buffers: [^]uint, offsets: [^]intptr, sizes: [^]sizeiptr) { impl_BindBuffersRange(target, first, count, buffers, offsets, sizes) }
    BindTextures :: proc "c" (first: uint, count: sizei, textures: [^]uint) { impl_BindTextures(first, count, textures) }
    BindSamplers :: proc "c" (first: uint, count: sizei, samplers: [^]uint) { impl_BindSamplers(first, count, samplers) }
    BindImageTextures :: proc "c" (first: uint, count: sizei, textures: [^]uint) { impl_BindImageTextures(first, count, textures) }
    BindVertexBuffers :: proc "c" (first: uint, count: sizei, buffers: [^]uint, offsets: [^]intptr, strides: [^]sizei) { impl_BindVertexBuffers(first, count, buffers, offsets, strides) }
    ClipControl :: proc "c" (origin: Enum, depth: Enum) { impl_ClipControl(origin, depth) }
    CreateTransformFeedbacks :: proc "c" (n: sizei, ids: [^]uint) { impl_CreateTransformFeedbacks(n, ids) }
    TransformFeedbackBufferBase :: proc "c" (xfb: uint, index: uint, buffer: uint) { impl_TransformFeedbackBufferBase(xfb, index, buffer) }
    TransformFeedbackBufferRange :: proc "c" (xfb: uint, index: uint, buffer: uint, offset: intptr, size: sizeiptr) { impl_TransformFeedbackBufferRange(xfb, index, buffer, offset, size) }
    GetTransformFeedbackiv :: proc "c" (xfb: uint, pname: Enum, param: [^]int) { impl_GetTransformFeedbackiv(xfb, pname, param) }
    GetTransformFeedbacki_v :: proc "c" (xfb: uint, pname: Enum, index: uint, param: [^]int) { impl_GetTransformFeedbacki_v(xfb, pname, index, param) }
    GetTransformFeedbacki64_v :: proc "c" (xfb: uint, pname: Enum, index: uint, param: [^]int64) { impl_GetTransformFeedbacki64_v(xfb, pname, index, param) }
    CreateBuffers :: proc "c" (n: sizei, buffers: [^]uint) { impl_CreateBuffers(n, buffers) }
    NamedBufferStorage :: proc "c" (buffer: uint, size: sizeiptr, data: rawptr, flags: bitfield) { impl_NamedBufferStorage(buffer, size, data, flags) }
    NamedBufferData :: proc "c" (buffer: uint, size: sizeiptr, data: rawptr, usage: Enum) { impl_NamedBufferData(buffer, size, data, usage) }
    NamedBufferSubData :: proc "c" (buffer: uint, offset: intptr, size: sizeiptr, data: rawptr) { impl_NamedBufferSubData(buffer, offset, size, data) }
    CopyNamedBufferSubData :: proc "c" (readBuffer: uint, writeBuffer: uint, readOffset: intptr, writeOffset: intptr, size: sizeiptr) { impl_CopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size) }
    ClearNamedBufferData :: proc "c" (buffer: uint, internalformat: Enum, format: Enum, type: Enum, data: rawptr) { impl_ClearNamedBufferData(buffer, internalformat, format, type, data) }
    ClearNamedBufferSubData :: proc "c" (buffer: uint, internalformat: Enum, offset: intptr, size: sizeiptr, format: Enum, type: Enum, data: rawptr) { impl_ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data) }
    MapNamedBuffer :: proc "c" (buffer: uint, access: Enum) -> rawptr { return impl_MapNamedBuffer(buffer, access) }
    MapNamedBufferRange :: proc "c" (buffer: uint, offset: intptr, length: sizeiptr, access: bitfield) -> rawptr { return impl_MapNamedBufferRange(buffer, offset, length, access) }
    UnmapNamedBuffer :: proc "c" (buffer: uint) -> boolean { return impl_UnmapNamedBuffer(buffer) }
    FlushMappedNamedBufferRange :: proc "c" (buffer: uint, offset: intptr, length: sizeiptr) { impl_FlushMappedNamedBufferRange(buffer, offset, length) }
    GetNamedBufferParameteriv :: proc "c" (buffer: uint, pname: Enum, params: [^]int) { impl_GetNamedBufferParameteriv(buffer, pname, params) }
    GetNamedBufferParameteri64v :: proc "c" (buffer: uint, pname: Enum, params: [^]int64) { impl_GetNamedBufferParameteri64v(buffer, pname, params) }
    GetNamedBufferPointerv :: proc "c" (buffer: uint, pname: Enum, params: [^]rawptr) { impl_GetNamedBufferPointerv(buffer, pname, params) }
    GetNamedBufferSubData :: proc "c" (buffer: uint, offset: intptr, size: sizeiptr, data: rawptr) { impl_GetNamedBufferSubData(buffer, offset, size, data) }
    CreateFramebuffers :: proc "c" (n: sizei, framebuffers: [^]uint) { impl_CreateFramebuffers(n, framebuffers) }
    NamedFramebufferRenderbuffer :: proc "c" (framebuffer: uint, attachment: Enum, renderbuffertarget: Enum, renderbuffer: uint) { impl_NamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer) }
    NamedFramebufferParameteri :: proc "c" (framebuffer: uint, pname: Enum, param: int) { impl_NamedFramebufferParameteri(framebuffer, pname, param) }
    NamedFramebufferTexture :: proc "c" (framebuffer: uint, attachment: Enum, texture: uint, level: int) { impl_NamedFramebufferTexture(framebuffer, attachment, texture, level) }
    NamedFramebufferTextureLayer :: proc "c" (framebuffer: uint, attachment: Enum, texture: uint, level: int, layer: int) { impl_NamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer) }
    NamedFramebufferDrawBuffer :: proc "c" (framebuffer: uint, buf: Enum) { impl_NamedFramebufferDrawBuffer(framebuffer, buf) }
    NamedFramebufferDrawBuffers :: proc "c" (framebuffer: uint, n: sizei, bufs: [^]Enum) { impl_NamedFramebufferDrawBuffers(framebuffer, n, bufs) }
    NamedFramebufferReadBuffer :: proc "c" (framebuffer: uint, src: Enum) { impl_NamedFramebufferReadBuffer(framebuffer, src) }
    InvalidateNamedFramebufferData :: proc "c" (framebuffer: uint, numAttachments: sizei, attachments: [^]Enum) { impl_InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments) }
    InvalidateNamedFramebufferSubData :: proc "c" (framebuffer: uint, numAttachments: sizei, attachments: [^]Enum, x: int, y: int, width: sizei, height: sizei) { impl_InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height) }
    ClearNamedFramebufferiv :: proc "c" (framebuffer: uint, buffer: Enum, drawbuffer: int, value: [^]int) { impl_ClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value) }
    ClearNamedFramebufferuiv :: proc "c" (framebuffer: uint, buffer: Enum, drawbuffer: int, value: [^]uint) { impl_ClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value) }
    ClearNamedFramebufferfv :: proc "c" (framebuffer: uint, buffer: Enum, drawbuffer: int, value: [^]float) { impl_ClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value) }
    ClearNamedFramebufferfi :: proc "c" (framebuffer: uint, buffer: Enum, drawbuffer: int, depth: float, stencil: int) { impl_ClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil) }
    BlitNamedFramebuffer :: proc "c" (readFramebuffer: uint, drawFramebuffer: uint, srcX0: int, srcY0: int, srcX1: int, srcY1: int, dstX0: int, dstY0: int, dstX1: int, dstY1: int, mask: bitfield, filter: Enum) { impl_BlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) }
    CheckNamedFramebufferStatus :: proc "c" (framebuffer: uint, target: Enum) -> Enum { return impl_CheckNamedFramebufferStatus(framebuffer, target) }
    GetNamedFramebufferParameteriv :: proc "c" (framebuffer: uint, pname: Enum, param: [^]int) { impl_GetNamedFramebufferParameteriv(framebuffer, pname, param) }
    GetNamedFramebufferAttachmentParameteriv :: proc "c" (framebuffer: uint, attachment: Enum, pname: Enum, params: [^]int) { impl_GetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params) }
    CreateRenderbuffers :: proc "c" (n: sizei, renderbuffers: [^]uint) { impl_CreateRenderbuffers(n, renderbuffers) }
    NamedRenderbufferStorage :: proc "c" (renderbuffer: uint, internalformat: Enum, width: sizei, height: sizei) { impl_NamedRenderbufferStorage(renderbuffer, internalformat, width, height) }
    NamedRenderbufferStorageMultisample :: proc "c" (renderbuffer: uint, samples: sizei, internalformat: Enum, width: sizei, height: sizei) { impl_NamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height) }
    GetNamedRenderbufferParameteriv :: proc "c" (renderbuffer: uint, pname: Enum, params: [^]int) { impl_GetNamedRenderbufferParameteriv(renderbuffer, pname, params) }
    CreateTextures :: proc "c" (target: Enum, n: sizei, textures: [^]uint) { impl_CreateTextures(target, n, textures) }
    TextureBuffer :: proc "c" (texture: uint, internalformat: Enum, buffer: uint) { impl_TextureBuffer(texture, internalformat, buffer) }
    TextureBufferRange :: proc "c" (texture: uint, internalformat: Enum, buffer: uint, offset: intptr, size: sizeiptr) { impl_TextureBufferRange(texture, internalformat, buffer, offset, size) }
    TextureStorage1D :: proc "c" (texture: uint, levels: sizei, internalformat: Enum, width: sizei) { impl_TextureStorage1D(texture, levels, internalformat, width) }
    TextureStorage2D :: proc "c" (texture: uint, levels: sizei, internalformat: Enum, width: sizei, height: sizei) { impl_TextureStorage2D(texture, levels, internalformat, width, height) }
    TextureStorage3D :: proc "c" (texture: uint, levels: sizei, internalformat: Enum, width: sizei, height: sizei, depth: sizei) { impl_TextureStorage3D(texture, levels, internalformat, width, height, depth) }
    TextureStorage2DMultisample :: proc "c" (texture: uint, samples: sizei, internalformat: Enum, width: sizei, height: sizei, fixedsamplelocations: boolean) { impl_TextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations) }
    TextureStorage3DMultisample :: proc "c" (texture: uint, samples: sizei, internalformat: Enum, width: sizei, height: sizei, depth: sizei, fixedsamplelocations: boolean) { impl_TextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations) }
    TextureSubImage1D :: proc "c" (texture: uint, level: int, xoffset: int, width: sizei, format: Enum, type: Enum, pixels: rawptr) { impl_TextureSubImage1D(texture, level, xoffset, width, format, type, pixels) }
    TextureSubImage2D :: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, width: sizei, height: sizei, format: Enum, type: Enum, pixels: rawptr) { impl_TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels) }
    TextureSubImage3D :: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: Enum, type: Enum, pixels: rawptr) { impl_TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels) }
    CompressedTextureSubImage1D :: proc "c" (texture: uint, level: int, xoffset: int, width: sizei, format: Enum, imageSize: sizei, data: rawptr) { impl_CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data) }
    CompressedTextureSubImage2D :: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, width: sizei, height: sizei, format: Enum, imageSize: sizei, data: rawptr) { impl_CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data) }
    CompressedTextureSubImage3D :: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: Enum, imageSize: sizei, data: rawptr) { impl_CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) }
    CopyTextureSubImage1D :: proc "c" (texture: uint, level: int, xoffset: int, x: int, y: int, width: sizei) { impl_CopyTextureSubImage1D(texture, level, xoffset, x, y, width) }
    CopyTextureSubImage2D :: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, x: int, y: int, width: sizei, height: sizei) { impl_CopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height) }
    CopyTextureSubImage3D :: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, x: int, y: int, width: sizei, height: sizei) { impl_CopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height) }
    TextureParameterf :: proc "c" (texture: uint, pname: Enum, param: float) { impl_TextureParameterf(texture, pname, param) }
    TextureParameterfv :: proc "c" (texture: uint, pname: Enum, param: [^]float) { impl_TextureParameterfv(texture, pname, param) }
    TextureParameteri :: proc "c" (texture: uint, pname: Enum, param: int) { impl_TextureParameteri(texture, pname, param) }
    TextureParameterIiv :: proc "c" (texture: uint, pname: Enum, params: [^]int) { impl_TextureParameterIiv(texture, pname, params) }
    TextureParameterIuiv :: proc "c" (texture: uint, pname: Enum, params: [^]uint) { impl_TextureParameterIuiv(texture, pname, params) }
    TextureParameteriv :: proc "c" (texture: uint, pname: Enum, param: [^]int) { impl_TextureParameteriv(texture, pname, param) }
    GenerateTextureMipmap :: proc "c" (texture: uint) { impl_GenerateTextureMipmap(texture) }
    BindTextureUnit :: proc "c" (unit: uint, texture: uint) { impl_BindTextureUnit(unit, texture) }
    GetTextureImage :: proc "c" (texture: uint, level: int, format: Enum, type: Enum, bufSize: sizei, pixels: rawptr) { impl_GetTextureImage(texture, level, format, type, bufSize, pixels) }
    GetCompressedTextureImage :: proc "c" (texture: uint, level: int, bufSize: sizei, pixels: rawptr) { impl_GetCompressedTextureImage(texture, level, bufSize, pixels) }
    GetTextureLevelParameterfv :: proc "c" (texture: uint, level: int, pname: Enum, params: [^]float) { impl_GetTextureLevelParameterfv(texture, level, pname, params) }
    GetTextureLevelParameteriv :: proc "c" (texture: uint, level: int, pname: Enum, params: [^]int) { impl_GetTextureLevelParameteriv(texture, level, pname, params) }
    GetTextureParameterfv :: proc "c" (texture: uint, pname: Enum, params: [^]float) { impl_GetTextureParameterfv(texture, pname, params) }
    GetTextureParameterIiv :: proc "c" (texture: uint, pname: Enum, params: [^]int) { impl_GetTextureParameterIiv(texture, pname, params) }
    GetTextureParameterIuiv :: proc "c" (texture: uint, pname: Enum, params: [^]uint) { impl_GetTextureParameterIuiv(texture, pname, params) }
    GetTextureParameteriv :: proc "c" (texture: uint, pname: Enum, params: [^]int) { impl_GetTextureParameteriv(texture, pname, params) }
    CreateVertexArrays :: proc "c" (n: sizei, arrays: [^]uint) { impl_CreateVertexArrays(n, arrays) }
    DisableVertexArrayAttrib :: proc "c" (vaobj: uint, index: uint) { impl_DisableVertexArrayAttrib(vaobj, index) }
    EnableVertexArrayAttrib :: proc "c" (vaobj: uint, index: uint) { impl_EnableVertexArrayAttrib(vaobj, index) }
    VertexArrayElementBuffer :: proc "c" (vaobj: uint, buffer: uint) { impl_VertexArrayElementBuffer(vaobj, buffer) }
    VertexArrayVertexBuffer :: proc "c" (vaobj: uint, bindingindex: uint, buffer: uint, offset: intptr, stride: sizei) { impl_VertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride) }
    VertexArrayVertexBuffers :: proc "c" (vaobj: uint, first: uint, count: sizei, buffers: [^]uint, offsets: [^]intptr, strides: [^]sizei) { impl_VertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides) }
    VertexArrayAttribBinding :: proc "c" (vaobj: uint, attribindex: uint, bindingindex: uint) { impl_VertexArrayAttribBinding(vaobj, attribindex, bindingindex) }
    VertexArrayAttribFormat :: proc "c" (vaobj: uint, attribindex: uint, size: int, type: Enum, normalized: boolean, relativeoffset: uint) { impl_VertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset) }
    VertexArrayAttribIFormat :: proc "c" (vaobj: uint, attribindex: uint, size: int, type: Enum, relativeoffset: uint) { impl_VertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset) }
    VertexArrayAttribLFormat :: proc "c" (vaobj: uint, attribindex: uint, size: int, type: Enum, relativeoffset: uint) { impl_VertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset) }
    VertexArrayBindingDivisor :: proc "c" (vaobj: uint, bindingindex: uint, divisor: uint) { impl_VertexArrayBindingDivisor(vaobj, bindingindex, divisor) }
    GetVertexArrayiv :: proc "c" (vaobj: uint, pname: Enum, param: [^]int) { impl_GetVertexArrayiv(vaobj, pname, param) }
    GetVertexArrayIndexediv :: proc "c" (vaobj: uint, index: uint, pname: Enum, param: [^]int) { impl_GetVertexArrayIndexediv(vaobj, index, pname, param) }
    GetVertexArrayIndexed64iv :: proc "c" (vaobj: uint, index: uint, pname: Enum, param: [^]int64) { impl_GetVertexArrayIndexed64iv(vaobj, index, pname, param) }
    CreateSamplers :: proc "c" (n: sizei, samplers: [^]uint) { impl_CreateSamplers(n, samplers) }
    CreateProgramPipelines :: proc "c" (n: sizei, pipelines: [^]uint) { impl_CreateProgramPipelines(n, pipelines) }
    CreateQueries :: proc "c" (target: Enum, n: sizei, ids: [^]uint) { impl_CreateQueries(target, n, ids) }
    GetQueryBufferObjecti64v :: proc "c" (id: uint, buffer: uint, pname: Enum, offset: intptr) { impl_GetQueryBufferObjecti64v(id, buffer, pname, offset) }
    GetQueryBufferObjectiv :: proc "c" (id: uint, buffer: uint, pname: Enum, offset: intptr) { impl_GetQueryBufferObjectiv(id, buffer, pname, offset) }
    GetQueryBufferObjectui64v :: proc "c" (id: uint, buffer: uint, pname: Enum, offset: intptr) { impl_GetQueryBufferObjectui64v(id, buffer, pname, offset) }
    GetQueryBufferObjectuiv :: proc "c" (id: uint, buffer: uint, pname: Enum, offset: intptr) { impl_GetQueryBufferObjectuiv(id, buffer, pname, offset) }
    MemoryBarrierByRegion :: proc "c" (barriers: bitfield) { impl_MemoryBarrierByRegion(barriers) }
    GetTextureSubImage :: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, format: Enum, type: Enum, bufSize: sizei, pixels: rawptr) { impl_GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels) }
    GetCompressedTextureSubImage :: proc "c" (texture: uint, level: int, xoffset: int, yoffset: int, zoffset: int, width: sizei, height: sizei, depth: sizei, bufSize: sizei, pixels: rawptr) { impl_GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels) }
    GetGraphicsResetStatus :: proc "c" () -> Enum { return impl_GetGraphicsResetStatus() }
    GetnCompressedTexImage :: proc "c" (target: Enum, lod: int, bufSize: sizei, pixels: rawptr) { impl_GetnCompressedTexImage(target, lod, bufSize, pixels) }
    GetnTexImage :: proc "c" (target: Enum, level: int, format: Enum, type: Enum, bufSize: sizei, pixels: rawptr) { impl_GetnTexImage(target, level, format, type, bufSize, pixels) }
    GetnUniformdv :: proc "c" (program: uint, location: int, bufSize: sizei, params: [^]double) { impl_GetnUniformdv(program, location, bufSize, params) }
    GetnUniformfv :: proc "c" (program: uint, location: int, bufSize: sizei, params: [^]float) { impl_GetnUniformfv(program, location, bufSize, params) }
    GetnUniformiv :: proc "c" (program: uint, location: int, bufSize: sizei, params: [^]int) { impl_GetnUniformiv(program, location, bufSize, params) }
    GetnUniformuiv :: proc "c" (program: uint, location: int, bufSize: sizei, params: [^]uint) { impl_GetnUniformuiv(program, location, bufSize, params) }
    ReadnPixels :: proc "c" (x: int, y: int, width: sizei, height: sizei, format: Enum, type: Enum, bufSize: sizei, data: rawptr) { impl_ReadnPixels(x, y, width, height, format, type, bufSize, data) }
    TextureBarrier :: proc "c" () { impl_TextureBarrier() }
    SpecializeShader :: proc "c" (shader: uint, pEntryPoint: cstring, numSpecializationConstants: uint, pConstantIndex: [^]uint, pConstantValue: [^]uint) { impl_SpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue) }
    MultiDrawArraysIndirectCount :: proc "c" (mode: Enum, indirect: rawptr, drawcount: intptr, maxdrawcount: sizei, stride: sizei) { impl_MultiDrawArraysIndirectCount(mode, indirect, drawcount, maxdrawcount, stride) }
    MultiDrawElementsIndirectCount :: proc "c" (mode: Enum, type: Enum, indirect: rawptr, drawcount: intptr, maxdrawcount: sizei, stride: sizei) { impl_MultiDrawElementsIndirectCount(mode, type, indirect, drawcount, maxdrawcount, stride) }
    PolygonOffsetClamp :: proc "c" (factor: float, units: float, clamp: float) { impl_PolygonOffsetClamp(factor, units, clamp) }
    MaxShaderCompilerThreadsKHR :: proc "c" (count: uint) { impl_MaxShaderCompilerThreadsKHR(count) }
}


Set_Proc_Address :: #type proc(p: rawptr, name: cstring)

load_KHR_parallel_shader_compile :: proc(set_proc_address: Set_Proc_Address) {
    set_proc_address(&impl_MaxShaderCompilerThreadsKHR, "glMaxShaderCompilerThreadsKHR")
}

load_gl :: proc(set_proc_address: Set_Proc_Address) {
    // GL_VERSION_1_0
    set_proc_address(&impl_CullFace, "glCullFace")
    set_proc_address(&impl_FrontFace, "glFrontFace")
    set_proc_address(&impl_Hint, "glHint")
    set_proc_address(&impl_LineWidth, "glLineWidth")
    set_proc_address(&impl_PointSize, "glPointSize")
    set_proc_address(&impl_PolygonMode, "glPolygonMode")
    set_proc_address(&impl_Scissor, "glScissor")
    set_proc_address(&impl_TexParameterf, "glTexParameterf")
    set_proc_address(&impl_TexParameterfv, "glTexParameterfv")
    set_proc_address(&impl_TexParameteri, "glTexParameteri")
    set_proc_address(&impl_TexParameteriv, "glTexParameteriv")
    set_proc_address(&impl_TexImage1D, "glTexImage1D")
    set_proc_address(&impl_TexImage2D, "glTexImage2D")
    set_proc_address(&impl_DrawBuffer, "glDrawBuffer")
    set_proc_address(&impl_Clear, "glClear")
    set_proc_address(&impl_ClearColor, "glClearColor")
    set_proc_address(&impl_ClearStencil, "glClearStencil")
    set_proc_address(&impl_ClearDepth, "glClearDepth")
    set_proc_address(&impl_StencilMask, "glStencilMask")
    set_proc_address(&impl_ColorMask, "glColorMask")
    set_proc_address(&impl_DepthMask, "glDepthMask")
    set_proc_address(&impl_Disable, "glDisable")
    set_proc_address(&impl_Enable, "glEnable")
    set_proc_address(&impl_Finish, "glFinish")
    set_proc_address(&impl_Flush, "glFlush")
    set_proc_address(&impl_BlendFunc, "glBlendFunc")
    set_proc_address(&impl_LogicOp, "glLogicOp")
    set_proc_address(&impl_StencilFunc, "glStencilFunc")
    set_proc_address(&impl_StencilOp, "glStencilOp")
    set_proc_address(&impl_DepthFunc, "glDepthFunc")
    set_proc_address(&impl_PixelStoref, "glPixelStoref")
    set_proc_address(&impl_PixelStorei, "glPixelStorei")
    set_proc_address(&impl_ReadBuffer, "glReadBuffer")
    set_proc_address(&impl_ReadPixels, "glReadPixels")
    set_proc_address(&impl_GetBooleanv, "glGetBooleanv")
    set_proc_address(&impl_GetDoublev, "glGetDoublev")
    set_proc_address(&impl_GetError, "glGetError")
    set_proc_address(&impl_GetFloatv, "glGetFloatv")
    set_proc_address(&impl_GetIntegerv, "glGetIntegerv")
    set_proc_address(&impl_GetString, "glGetString")
    set_proc_address(&impl_GetTexImage, "glGetTexImage")
    set_proc_address(&impl_GetTexParameterfv, "glGetTexParameterfv")
    set_proc_address(&impl_GetTexParameteriv, "glGetTexParameteriv")
    set_proc_address(&impl_GetTexLevelParameterfv, "glGetTexLevelParameterfv")
    set_proc_address(&impl_GetTexLevelParameteriv, "glGetTexLevelParameteriv")
    set_proc_address(&impl_IsEnabled, "glIsEnabled")
    set_proc_address(&impl_DepthRange, "glDepthRange")
    set_proc_address(&impl_Viewport, "glViewport")
    // GL_VERSION_1_1
    set_proc_address(&impl_DrawArrays, "glDrawArrays")
    set_proc_address(&impl_DrawElements, "glDrawElements")
    set_proc_address(&impl_PolygonOffset, "glPolygonOffset")
    set_proc_address(&impl_CopyTexImage1D, "glCopyTexImage1D")
    set_proc_address(&impl_CopyTexImage2D, "glCopyTexImage2D")
    set_proc_address(&impl_CopyTexSubImage1D, "glCopyTexSubImage1D")
    set_proc_address(&impl_CopyTexSubImage2D, "glCopyTexSubImage2D")
    set_proc_address(&impl_TexSubImage1D, "glTexSubImage1D")
    set_proc_address(&impl_TexSubImage2D, "glTexSubImage2D")
    set_proc_address(&impl_BindTexture, "glBindTexture")
    set_proc_address(&impl_DeleteTextures, "glDeleteTextures")
    set_proc_address(&impl_GenTextures, "glGenTextures")
    set_proc_address(&impl_IsTexture, "glIsTexture")
    // GL_VERSION_1_2
    set_proc_address(&impl_DrawRangeElements, "glDrawRangeElements")
    set_proc_address(&impl_TexImage3D, "glTexImage3D")
    set_proc_address(&impl_TexSubImage3D, "glTexSubImage3D")
    set_proc_address(&impl_CopyTexSubImage3D, "glCopyTexSubImage3D")
    // GL_VERSION_1_3
    set_proc_address(&impl_ActiveTexture, "glActiveTexture")
    set_proc_address(&impl_SampleCoverage, "glSampleCoverage")
    set_proc_address(&impl_CompressedTexImage3D, "glCompressedTexImage3D")
    set_proc_address(&impl_CompressedTexImage2D, "glCompressedTexImage2D")
    set_proc_address(&impl_CompressedTexImage1D, "glCompressedTexImage1D")
    set_proc_address(&impl_CompressedTexSubImage3D, "glCompressedTexSubImage3D")
    set_proc_address(&impl_CompressedTexSubImage2D, "glCompressedTexSubImage2D")
    set_proc_address(&impl_CompressedTexSubImage1D, "glCompressedTexSubImage1D")
    set_proc_address(&impl_GetCompressedTexImage, "glGetCompressedTexImage")
    // GL_VERSION_1_4
    set_proc_address(&impl_BlendFuncSeparate, "glBlendFuncSeparate")
    set_proc_address(&impl_MultiDrawArrays, "glMultiDrawArrays")
    set_proc_address(&impl_MultiDrawElements, "glMultiDrawElements")
    set_proc_address(&impl_PointParameterf, "glPointParameterf")
    set_proc_address(&impl_PointParameterfv, "glPointParameterfv")
    set_proc_address(&impl_PointParameteri, "glPointParameteri")
    set_proc_address(&impl_PointParameteriv, "glPointParameteriv")
    set_proc_address(&impl_BlendColor, "glBlendColor")
    set_proc_address(&impl_BlendEquation, "glBlendEquation")
    // GL_VERSION_1_5
    set_proc_address(&impl_GenQueries, "glGenQueries")
    set_proc_address(&impl_DeleteQueries, "glDeleteQueries")
    set_proc_address(&impl_IsQuery, "glIsQuery")
    set_proc_address(&impl_BeginQuery, "glBeginQuery")
    set_proc_address(&impl_EndQuery, "glEndQuery")
    set_proc_address(&impl_GetQueryiv, "glGetQueryiv")
    set_proc_address(&impl_GetQueryObjectiv, "glGetQueryObjectiv")
    set_proc_address(&impl_GetQueryObjectuiv, "glGetQueryObjectuiv")
    set_proc_address(&impl_BindBuffer, "glBindBuffer")
    set_proc_address(&impl_DeleteBuffers, "glDeleteBuffers")
    set_proc_address(&impl_GenBuffers, "glGenBuffers")
    set_proc_address(&impl_IsBuffer, "glIsBuffer")
    set_proc_address(&impl_BufferData, "glBufferData")
    set_proc_address(&impl_BufferSubData, "glBufferSubData")
    set_proc_address(&impl_GetBufferSubData, "glGetBufferSubData")
    set_proc_address(&impl_MapBuffer, "glMapBuffer")
    set_proc_address(&impl_UnmapBuffer, "glUnmapBuffer")
    set_proc_address(&impl_GetBufferParameteriv, "glGetBufferParameteriv")
    set_proc_address(&impl_GetBufferPointerv, "glGetBufferPointerv")
    // GL_VERSION_2_0
    set_proc_address(&impl_BlendEquationSeparate, "glBlendEquationSeparate")
    set_proc_address(&impl_DrawBuffers, "glDrawBuffers")
    set_proc_address(&impl_StencilOpSeparate, "glStencilOpSeparate")
    set_proc_address(&impl_StencilFuncSeparate, "glStencilFuncSeparate")
    set_proc_address(&impl_StencilMaskSeparate, "glStencilMaskSeparate")
    set_proc_address(&impl_AttachShader, "glAttachShader")
    set_proc_address(&impl_BindAttribLocation, "glBindAttribLocation")
    set_proc_address(&impl_CompileShader, "glCompileShader")
    set_proc_address(&impl_CreateProgram, "glCreateProgram")
    set_proc_address(&impl_CreateShader, "glCreateShader")
    set_proc_address(&impl_DeleteProgram, "glDeleteProgram")
    set_proc_address(&impl_DeleteShader, "glDeleteShader")
    set_proc_address(&impl_DetachShader, "glDetachShader")
    set_proc_address(&impl_DisableVertexAttribArray, "glDisableVertexAttribArray")
    set_proc_address(&impl_EnableVertexAttribArray, "glEnableVertexAttribArray")
    set_proc_address(&impl_GetActiveAttrib, "glGetActiveAttrib")
    set_proc_address(&impl_GetActiveUniform, "glGetActiveUniform")
    set_proc_address(&impl_GetAttachedShaders, "glGetAttachedShaders")
    set_proc_address(&impl_GetAttribLocation, "glGetAttribLocation")
    set_proc_address(&impl_GetProgramiv, "glGetProgramiv")
    set_proc_address(&impl_GetProgramInfoLog, "glGetProgramInfoLog")
    set_proc_address(&impl_GetShaderiv, "glGetShaderiv")
    set_proc_address(&impl_GetShaderInfoLog, "glGetShaderInfoLog")
    set_proc_address(&impl_GetShaderSource, "glGetShaderSource")
    set_proc_address(&impl_GetUniformLocation, "glGetUniformLocation")
    set_proc_address(&impl_GetUniformfv, "glGetUniformfv")
    set_proc_address(&impl_GetUniformiv, "glGetUniformiv")
    set_proc_address(&impl_GetVertexAttribdv, "glGetVertexAttribdv")
    set_proc_address(&impl_GetVertexAttribfv, "glGetVertexAttribfv")
    set_proc_address(&impl_GetVertexAttribiv, "glGetVertexAttribiv")
    set_proc_address(&impl_GetVertexAttribPointerv, "glGetVertexAttribPointerv")
    set_proc_address(&impl_IsProgram, "glIsProgram")
    set_proc_address(&impl_IsShader, "glIsShader")
    set_proc_address(&impl_LinkProgram, "glLinkProgram")
    set_proc_address(&impl_ShaderSource, "glShaderSource")
    set_proc_address(&impl_UseProgram, "glUseProgram")
    set_proc_address(&impl_Uniform1f, "glUniform1f")
    set_proc_address(&impl_Uniform2f, "glUniform2f")
    set_proc_address(&impl_Uniform3f, "glUniform3f")
    set_proc_address(&impl_Uniform4f, "glUniform4f")
    set_proc_address(&impl_Uniform1i, "glUniform1i")
    set_proc_address(&impl_Uniform2i, "glUniform2i")
    set_proc_address(&impl_Uniform3i, "glUniform3i")
    set_proc_address(&impl_Uniform4i, "glUniform4i")
    set_proc_address(&impl_Uniform1fv, "glUniform1fv")
    set_proc_address(&impl_Uniform2fv, "glUniform2fv")
    set_proc_address(&impl_Uniform3fv, "glUniform3fv")
    set_proc_address(&impl_Uniform4fv, "glUniform4fv")
    set_proc_address(&impl_Uniform1iv, "glUniform1iv")
    set_proc_address(&impl_Uniform2iv, "glUniform2iv")
    set_proc_address(&impl_Uniform3iv, "glUniform3iv")
    set_proc_address(&impl_Uniform4iv, "glUniform4iv")
    set_proc_address(&impl_UniformMatrix2fv, "glUniformMatrix2fv")
    set_proc_address(&impl_UniformMatrix3fv, "glUniformMatrix3fv")
    set_proc_address(&impl_UniformMatrix4fv, "glUniformMatrix4fv")
    set_proc_address(&impl_ValidateProgram, "glValidateProgram")
    set_proc_address(&impl_VertexAttrib1d, "glVertexAttrib1d")
    set_proc_address(&impl_VertexAttrib1dv, "glVertexAttrib1dv")
    set_proc_address(&impl_VertexAttrib1f, "glVertexAttrib1f")
    set_proc_address(&impl_VertexAttrib1fv, "glVertexAttrib1fv")
    set_proc_address(&impl_VertexAttrib1s, "glVertexAttrib1s")
    set_proc_address(&impl_VertexAttrib1sv, "glVertexAttrib1sv")
    set_proc_address(&impl_VertexAttrib2d, "glVertexAttrib2d")
    set_proc_address(&impl_VertexAttrib2dv, "glVertexAttrib2dv")
    set_proc_address(&impl_VertexAttrib2f, "glVertexAttrib2f")
    set_proc_address(&impl_VertexAttrib2fv, "glVertexAttrib2fv")
    set_proc_address(&impl_VertexAttrib2s, "glVertexAttrib2s")
    set_proc_address(&impl_VertexAttrib2sv, "glVertexAttrib2sv")
    set_proc_address(&impl_VertexAttrib3d, "glVertexAttrib3d")
    set_proc_address(&impl_VertexAttrib3dv, "glVertexAttrib3dv")
    set_proc_address(&impl_VertexAttrib3f, "glVertexAttrib3f")
    set_proc_address(&impl_VertexAttrib3fv, "glVertexAttrib3fv")
    set_proc_address(&impl_VertexAttrib3s, "glVertexAttrib3s")
    set_proc_address(&impl_VertexAttrib3sv, "glVertexAttrib3sv")
    set_proc_address(&impl_VertexAttrib4Nbv, "glVertexAttrib4Nbv")
    set_proc_address(&impl_VertexAttrib4Niv, "glVertexAttrib4Niv")
    set_proc_address(&impl_VertexAttrib4Nsv, "glVertexAttrib4Nsv")
    set_proc_address(&impl_VertexAttrib4Nub, "glVertexAttrib4Nub")
    set_proc_address(&impl_VertexAttrib4Nubv, "glVertexAttrib4Nubv")
    set_proc_address(&impl_VertexAttrib4Nuiv, "glVertexAttrib4Nuiv")
    set_proc_address(&impl_VertexAttrib4Nusv, "glVertexAttrib4Nusv")
    set_proc_address(&impl_VertexAttrib4bv, "glVertexAttrib4bv")
    set_proc_address(&impl_VertexAttrib4d, "glVertexAttrib4d")
    set_proc_address(&impl_VertexAttrib4dv, "glVertexAttrib4dv")
    set_proc_address(&impl_VertexAttrib4f, "glVertexAttrib4f")
    set_proc_address(&impl_VertexAttrib4fv, "glVertexAttrib4fv")
    set_proc_address(&impl_VertexAttrib4iv, "glVertexAttrib4iv")
    set_proc_address(&impl_VertexAttrib4s, "glVertexAttrib4s")
    set_proc_address(&impl_VertexAttrib4sv, "glVertexAttrib4sv")
    set_proc_address(&impl_VertexAttrib4ubv, "glVertexAttrib4ubv")
    set_proc_address(&impl_VertexAttrib4uiv, "glVertexAttrib4uiv")
    set_proc_address(&impl_VertexAttrib4usv, "glVertexAttrib4usv")
    set_proc_address(&impl_VertexAttribPointer, "glVertexAttribPointer")
    // GL_VERSION_2_1
    set_proc_address(&impl_UniformMatrix2x3fv, "glUniformMatrix2x3fv")
    set_proc_address(&impl_UniformMatrix3x2fv, "glUniformMatrix3x2fv")
    set_proc_address(&impl_UniformMatrix2x4fv, "glUniformMatrix2x4fv")
    set_proc_address(&impl_UniformMatrix4x2fv, "glUniformMatrix4x2fv")
    set_proc_address(&impl_UniformMatrix3x4fv, "glUniformMatrix3x4fv")
    set_proc_address(&impl_UniformMatrix4x3fv, "glUniformMatrix4x3fv")
    // GL_VERSION_3_0
    set_proc_address(&impl_ColorMaski, "glColorMaski")
    set_proc_address(&impl_GetBooleani_v, "glGetBooleani_v")
    set_proc_address(&impl_GetIntegeri_v, "glGetIntegeri_v")
    set_proc_address(&impl_Enablei, "glEnablei")
    set_proc_address(&impl_Disablei, "glDisablei")
    set_proc_address(&impl_IsEnabledi, "glIsEnabledi")
    set_proc_address(&impl_BeginTransformFeedback, "glBeginTransformFeedback")
    set_proc_address(&impl_EndTransformFeedback, "glEndTransformFeedback")
    set_proc_address(&impl_BindBufferRange, "glBindBufferRange")
    set_proc_address(&impl_BindBufferBase, "glBindBufferBase")
    set_proc_address(&impl_TransformFeedbackVaryings, "glTransformFeedbackVaryings")
    set_proc_address(&impl_GetTransformFeedbackVarying, "glGetTransformFeedbackVarying")
    set_proc_address(&impl_ClampColor, "glClampColor")
    set_proc_address(&impl_BeginConditionalRender, "glBeginConditionalRender")
    set_proc_address(&impl_EndConditionalRender, "glEndConditionalRender")
    set_proc_address(&impl_VertexAttribIPointer, "glVertexAttribIPointer")
    set_proc_address(&impl_GetVertexAttribIiv, "glGetVertexAttribIiv")
    set_proc_address(&impl_GetVertexAttribIuiv, "glGetVertexAttribIuiv")
    set_proc_address(&impl_VertexAttribI1i, "glVertexAttribI1i")
    set_proc_address(&impl_VertexAttribI2i, "glVertexAttribI2i")
    set_proc_address(&impl_VertexAttribI3i, "glVertexAttribI3i")
    set_proc_address(&impl_VertexAttribI4i, "glVertexAttribI4i")
    set_proc_address(&impl_VertexAttribI1ui, "glVertexAttribI1ui")
    set_proc_address(&impl_VertexAttribI2ui, "glVertexAttribI2ui")
    set_proc_address(&impl_VertexAttribI3ui, "glVertexAttribI3ui")
    set_proc_address(&impl_VertexAttribI4ui, "glVertexAttribI4ui")
    set_proc_address(&impl_VertexAttribI1iv, "glVertexAttribI1iv")
    set_proc_address(&impl_VertexAttribI2iv, "glVertexAttribI2iv")
    set_proc_address(&impl_VertexAttribI3iv, "glVertexAttribI3iv")
    set_proc_address(&impl_VertexAttribI4iv, "glVertexAttribI4iv")
    set_proc_address(&impl_VertexAttribI1uiv, "glVertexAttribI1uiv")
    set_proc_address(&impl_VertexAttribI2uiv, "glVertexAttribI2uiv")
    set_proc_address(&impl_VertexAttribI3uiv, "glVertexAttribI3uiv")
    set_proc_address(&impl_VertexAttribI4uiv, "glVertexAttribI4uiv")
    set_proc_address(&impl_VertexAttribI4bv, "glVertexAttribI4bv")
    set_proc_address(&impl_VertexAttribI4sv, "glVertexAttribI4sv")
    set_proc_address(&impl_VertexAttribI4ubv, "glVertexAttribI4ubv")
    set_proc_address(&impl_VertexAttribI4usv, "glVertexAttribI4usv")
    set_proc_address(&impl_GetUniformuiv, "glGetUniformuiv")
    set_proc_address(&impl_BindFragDataLocation, "glBindFragDataLocation")
    set_proc_address(&impl_GetFragDataLocation, "glGetFragDataLocation")
    set_proc_address(&impl_Uniform1ui, "glUniform1ui")
    set_proc_address(&impl_Uniform2ui, "glUniform2ui")
    set_proc_address(&impl_Uniform3ui, "glUniform3ui")
    set_proc_address(&impl_Uniform4ui, "glUniform4ui")
    set_proc_address(&impl_Uniform1uiv, "glUniform1uiv")
    set_proc_address(&impl_Uniform2uiv, "glUniform2uiv")
    set_proc_address(&impl_Uniform3uiv, "glUniform3uiv")
    set_proc_address(&impl_Uniform4uiv, "glUniform4uiv")
    set_proc_address(&impl_TexParameterIiv, "glTexParameterIiv")
    set_proc_address(&impl_TexParameterIuiv, "glTexParameterIuiv")
    set_proc_address(&impl_GetTexParameterIiv, "glGetTexParameterIiv")
    set_proc_address(&impl_GetTexParameterIuiv, "glGetTexParameterIuiv")
    set_proc_address(&impl_ClearBufferiv, "glClearBufferiv")
    set_proc_address(&impl_ClearBufferuiv, "glClearBufferuiv")
    set_proc_address(&impl_ClearBufferfv, "glClearBufferfv")
    set_proc_address(&impl_ClearBufferfi, "glClearBufferfi")
    set_proc_address(&impl_GetStringi, "glGetStringi")
    set_proc_address(&impl_IsRenderbuffer, "glIsRenderbuffer")
    set_proc_address(&impl_BindRenderbuffer, "glBindRenderbuffer")
    set_proc_address(&impl_DeleteRenderbuffers, "glDeleteRenderbuffers")
    set_proc_address(&impl_GenRenderbuffers, "glGenRenderbuffers")
    set_proc_address(&impl_RenderbufferStorage, "glRenderbufferStorage")
    set_proc_address(&impl_GetRenderbufferParameteriv, "glGetRenderbufferParameteriv")
    set_proc_address(&impl_IsFramebuffer, "glIsFramebuffer")
    set_proc_address(&impl_BindFramebuffer, "glBindFramebuffer")
    set_proc_address(&impl_DeleteFramebuffers, "glDeleteFramebuffers")
    set_proc_address(&impl_GenFramebuffers, "glGenFramebuffers")
    set_proc_address(&impl_CheckFramebufferStatus, "glCheckFramebufferStatus")
    set_proc_address(&impl_FramebufferTexture1D, "glFramebufferTexture1D")
    set_proc_address(&impl_FramebufferTexture2D, "glFramebufferTexture2D")
    set_proc_address(&impl_FramebufferTexture3D, "glFramebufferTexture3D")
    set_proc_address(&impl_FramebufferRenderbuffer, "glFramebufferRenderbuffer")
    set_proc_address(&impl_GetFramebufferAttachmentParameteriv, "glGetFramebufferAttachmentParameteriv")
    set_proc_address(&impl_GenerateMipmap, "glGenerateMipmap")
    set_proc_address(&impl_BlitFramebuffer, "glBlitFramebuffer")
    set_proc_address(&impl_RenderbufferStorageMultisample, "glRenderbufferStorageMultisample")
    set_proc_address(&impl_FramebufferTextureLayer, "glFramebufferTextureLayer")
    set_proc_address(&impl_MapBufferRange, "glMapBufferRange")
    set_proc_address(&impl_FlushMappedBufferRange, "glFlushMappedBufferRange")
    set_proc_address(&impl_BindVertexArray, "glBindVertexArray")
    set_proc_address(&impl_DeleteVertexArrays, "glDeleteVertexArrays")
    set_proc_address(&impl_GenVertexArrays, "glGenVertexArrays")
    set_proc_address(&impl_IsVertexArray, "glIsVertexArray")
    // GL_VERSION_3_1
    set_proc_address(&impl_DrawArraysInstanced, "glDrawArraysInstanced")
    set_proc_address(&impl_DrawElementsInstanced, "glDrawElementsInstanced")
    set_proc_address(&impl_TexBuffer, "glTexBuffer")
    set_proc_address(&impl_PrimitiveRestartIndex, "glPrimitiveRestartIndex")
    set_proc_address(&impl_CopyBufferSubData, "glCopyBufferSubData")
    set_proc_address(&impl_GetUniformIndices, "glGetUniformIndices")
    set_proc_address(&impl_GetActiveUniformsiv, "glGetActiveUniformsiv")
    set_proc_address(&impl_GetActiveUniformName, "glGetActiveUniformName")
    set_proc_address(&impl_GetUniformBlockIndex, "glGetUniformBlockIndex")
    set_proc_address(&impl_GetActiveUniformBlockiv, "glGetActiveUniformBlockiv")
    set_proc_address(&impl_GetActiveUniformBlockName, "glGetActiveUniformBlockName")
    set_proc_address(&impl_UniformBlockBinding, "glUniformBlockBinding")
    // GL_VERSION_3_2
    set_proc_address(&impl_DrawElementsBaseVertex, "glDrawElementsBaseVertex")
    set_proc_address(&impl_DrawRangeElementsBaseVertex, "glDrawRangeElementsBaseVertex")
    set_proc_address(&impl_DrawElementsInstancedBaseVertex, "glDrawElementsInstancedBaseVertex")
    set_proc_address(&impl_MultiDrawElementsBaseVertex, "glMultiDrawElementsBaseVertex")
    set_proc_address(&impl_ProvokingVertex, "glProvokingVertex")
    set_proc_address(&impl_FenceSync, "glFenceSync")
    set_proc_address(&impl_IsSync, "glIsSync")
    set_proc_address(&impl_DeleteSync, "glDeleteSync")
    set_proc_address(&impl_ClientWaitSync, "glClientWaitSync")
    set_proc_address(&impl_WaitSync, "glWaitSync")
    set_proc_address(&impl_GetInteger64v, "glGetInteger64v")
    set_proc_address(&impl_GetSynciv, "glGetSynciv")
    set_proc_address(&impl_GetInteger64i_v, "glGetInteger64i_v")
    set_proc_address(&impl_GetBufferParameteri64v, "glGetBufferParameteri64v")
    set_proc_address(&impl_FramebufferTexture, "glFramebufferTexture")
    set_proc_address(&impl_TexImage2DMultisample, "glTexImage2DMultisample")
    set_proc_address(&impl_TexImage3DMultisample, "glTexImage3DMultisample")
    set_proc_address(&impl_GetMultisamplefv, "glGetMultisamplefv")
    set_proc_address(&impl_SampleMaski, "glSampleMaski")
    // GL_VERSION_3_3
    set_proc_address(&impl_BindFragDataLocationIndexed, "glBindFragDataLocationIndexed")
    set_proc_address(&impl_GetFragDataIndex, "glGetFragDataIndex")
    set_proc_address(&impl_GenSamplers, "glGenSamplers")
    set_proc_address(&impl_DeleteSamplers, "glDeleteSamplers")
    set_proc_address(&impl_IsSampler, "glIsSampler")
    set_proc_address(&impl_BindSampler, "glBindSampler")
    set_proc_address(&impl_SamplerParameteri, "glSamplerParameteri")
    set_proc_address(&impl_SamplerParameteriv, "glSamplerParameteriv")
    set_proc_address(&impl_SamplerParameterf, "glSamplerParameterf")
    set_proc_address(&impl_SamplerParameterfv, "glSamplerParameterfv")
    set_proc_address(&impl_SamplerParameterIiv, "glSamplerParameterIiv")
    set_proc_address(&impl_SamplerParameterIuiv, "glSamplerParameterIuiv")
    set_proc_address(&impl_GetSamplerParameteriv, "glGetSamplerParameteriv")
    set_proc_address(&impl_GetSamplerParameterIiv, "glGetSamplerParameterIiv")
    set_proc_address(&impl_GetSamplerParameterfv, "glGetSamplerParameterfv")
    set_proc_address(&impl_GetSamplerParameterIuiv, "glGetSamplerParameterIuiv")
    set_proc_address(&impl_QueryCounter, "glQueryCounter")
    set_proc_address(&impl_GetQueryObjecti64v, "glGetQueryObjecti64v")
    set_proc_address(&impl_GetQueryObjectui64v, "glGetQueryObjectui64v")
    set_proc_address(&impl_VertexAttribDivisor, "glVertexAttribDivisor")
    set_proc_address(&impl_VertexAttribP1ui, "glVertexAttribP1ui")
    set_proc_address(&impl_VertexAttribP1uiv, "glVertexAttribP1uiv")
    set_proc_address(&impl_VertexAttribP2ui, "glVertexAttribP2ui")
    set_proc_address(&impl_VertexAttribP2uiv, "glVertexAttribP2uiv")
    set_proc_address(&impl_VertexAttribP3ui, "glVertexAttribP3ui")
    set_proc_address(&impl_VertexAttribP3uiv, "glVertexAttribP3uiv")
    set_proc_address(&impl_VertexAttribP4ui, "glVertexAttribP4ui")
    set_proc_address(&impl_VertexAttribP4uiv, "glVertexAttribP4uiv")
    // GL_VERSION_4_0
    set_proc_address(&impl_MinSampleShading, "glMinSampleShading")
    set_proc_address(&impl_BlendEquationi, "glBlendEquationi")
    set_proc_address(&impl_BlendEquationSeparatei, "glBlendEquationSeparatei")
    set_proc_address(&impl_BlendFunci, "glBlendFunci")
    set_proc_address(&impl_BlendFuncSeparatei, "glBlendFuncSeparatei")
    set_proc_address(&impl_DrawArraysIndirect, "glDrawArraysIndirect")
    set_proc_address(&impl_DrawElementsIndirect, "glDrawElementsIndirect")
    set_proc_address(&impl_Uniform1d, "glUniform1d")
    set_proc_address(&impl_Uniform2d, "glUniform2d")
    set_proc_address(&impl_Uniform3d, "glUniform3d")
    set_proc_address(&impl_Uniform4d, "glUniform4d")
    set_proc_address(&impl_Uniform1dv, "glUniform1dv")
    set_proc_address(&impl_Uniform2dv, "glUniform2dv")
    set_proc_address(&impl_Uniform3dv, "glUniform3dv")
    set_proc_address(&impl_Uniform4dv, "glUniform4dv")
    set_proc_address(&impl_UniformMatrix2dv, "glUniformMatrix2dv")
    set_proc_address(&impl_UniformMatrix3dv, "glUniformMatrix3dv")
    set_proc_address(&impl_UniformMatrix4dv, "glUniformMatrix4dv")
    set_proc_address(&impl_UniformMatrix2x3dv, "glUniformMatrix2x3dv")
    set_proc_address(&impl_UniformMatrix2x4dv, "glUniformMatrix2x4dv")
    set_proc_address(&impl_UniformMatrix3x2dv, "glUniformMatrix3x2dv")
    set_proc_address(&impl_UniformMatrix3x4dv, "glUniformMatrix3x4dv")
    set_proc_address(&impl_UniformMatrix4x2dv, "glUniformMatrix4x2dv")
    set_proc_address(&impl_UniformMatrix4x3dv, "glUniformMatrix4x3dv")
    set_proc_address(&impl_GetUniformdv, "glGetUniformdv")
    set_proc_address(&impl_GetSubroutineUniformLocation, "glGetSubroutineUniformLocation")
    set_proc_address(&impl_GetSubroutineIndex, "glGetSubroutineIndex")
    set_proc_address(&impl_GetActiveSubroutineUniformiv, "glGetActiveSubroutineUniformiv")
    set_proc_address(&impl_GetActiveSubroutineUniformName, "glGetActiveSubroutineUniformName")
    set_proc_address(&impl_GetActiveSubroutineName, "glGetActiveSubroutineName")
    set_proc_address(&impl_UniformSubroutinesuiv, "glUniformSubroutinesuiv")
    set_proc_address(&impl_GetUniformSubroutineuiv, "glGetUniformSubroutineuiv")
    set_proc_address(&impl_GetProgramStageiv, "glGetProgramStageiv")
    set_proc_address(&impl_PatchParameteri, "glPatchParameteri")
    set_proc_address(&impl_PatchParameterfv, "glPatchParameterfv")
    set_proc_address(&impl_BindTransformFeedback, "glBindTransformFeedback")
    set_proc_address(&impl_DeleteTransformFeedbacks, "glDeleteTransformFeedbacks")
    set_proc_address(&impl_GenTransformFeedbacks, "glGenTransformFeedbacks")
    set_proc_address(&impl_IsTransformFeedback, "glIsTransformFeedback")
    set_proc_address(&impl_PauseTransformFeedback, "glPauseTransformFeedback")
    set_proc_address(&impl_ResumeTransformFeedback, "glResumeTransformFeedback")
    set_proc_address(&impl_DrawTransformFeedback, "glDrawTransformFeedback")
    set_proc_address(&impl_DrawTransformFeedbackStream, "glDrawTransformFeedbackStream")
    set_proc_address(&impl_BeginQueryIndexed, "glBeginQueryIndexed")
    set_proc_address(&impl_EndQueryIndexed, "glEndQueryIndexed")
    set_proc_address(&impl_GetQueryIndexediv, "glGetQueryIndexediv")
    // GL_VERSION_4_1
    set_proc_address(&impl_ReleaseShaderCompiler, "glReleaseShaderCompiler")
    set_proc_address(&impl_ShaderBinary, "glShaderBinary")
    set_proc_address(&impl_GetShaderPrecisionFormat, "glGetShaderPrecisionFormat")
    set_proc_address(&impl_DepthRangef, "glDepthRangef")
    set_proc_address(&impl_ClearDepthf, "glClearDepthf")
    set_proc_address(&impl_GetProgramBinary, "glGetProgramBinary")
    set_proc_address(&impl_ProgramBinary, "glProgramBinary")
    set_proc_address(&impl_ProgramParameteri, "glProgramParameteri")
    set_proc_address(&impl_UseProgramStages, "glUseProgramStages")
    set_proc_address(&impl_ActiveShaderProgram, "glActiveShaderProgram")
    set_proc_address(&impl_CreateShaderProgramv, "glCreateShaderProgramv")
    set_proc_address(&impl_BindProgramPipeline, "glBindProgramPipeline")
    set_proc_address(&impl_DeleteProgramPipelines, "glDeleteProgramPipelines")
    set_proc_address(&impl_GenProgramPipelines, "glGenProgramPipelines")
    set_proc_address(&impl_IsProgramPipeline, "glIsProgramPipeline")
    set_proc_address(&impl_GetProgramPipelineiv, "glGetProgramPipelineiv")
    set_proc_address(&impl_ProgramUniform1i, "glProgramUniform1i")
    set_proc_address(&impl_ProgramUniform1iv, "glProgramUniform1iv")
    set_proc_address(&impl_ProgramUniform1f, "glProgramUniform1f")
    set_proc_address(&impl_ProgramUniform1fv, "glProgramUniform1fv")
    set_proc_address(&impl_ProgramUniform1d, "glProgramUniform1d")
    set_proc_address(&impl_ProgramUniform1dv, "glProgramUniform1dv")
    set_proc_address(&impl_ProgramUniform1ui, "glProgramUniform1ui")
    set_proc_address(&impl_ProgramUniform1uiv, "glProgramUniform1uiv")
    set_proc_address(&impl_ProgramUniform2i, "glProgramUniform2i")
    set_proc_address(&impl_ProgramUniform2iv, "glProgramUniform2iv")
    set_proc_address(&impl_ProgramUniform2f, "glProgramUniform2f")
    set_proc_address(&impl_ProgramUniform2fv, "glProgramUniform2fv")
    set_proc_address(&impl_ProgramUniform2d, "glProgramUniform2d")
    set_proc_address(&impl_ProgramUniform2dv, "glProgramUniform2dv")
    set_proc_address(&impl_ProgramUniform2ui, "glProgramUniform2ui")
    set_proc_address(&impl_ProgramUniform2uiv, "glProgramUniform2uiv")
    set_proc_address(&impl_ProgramUniform3i, "glProgramUniform3i")
    set_proc_address(&impl_ProgramUniform3iv, "glProgramUniform3iv")
    set_proc_address(&impl_ProgramUniform3f, "glProgramUniform3f")
    set_proc_address(&impl_ProgramUniform3fv, "glProgramUniform3fv")
    set_proc_address(&impl_ProgramUniform3d, "glProgramUniform3d")
    set_proc_address(&impl_ProgramUniform3dv, "glProgramUniform3dv")
    set_proc_address(&impl_ProgramUniform3ui, "glProgramUniform3ui")
    set_proc_address(&impl_ProgramUniform3uiv, "glProgramUniform3uiv")
    set_proc_address(&impl_ProgramUniform4i, "glProgramUniform4i")
    set_proc_address(&impl_ProgramUniform4iv, "glProgramUniform4iv")
    set_proc_address(&impl_ProgramUniform4f, "glProgramUniform4f")
    set_proc_address(&impl_ProgramUniform4fv, "glProgramUniform4fv")
    set_proc_address(&impl_ProgramUniform4d, "glProgramUniform4d")
    set_proc_address(&impl_ProgramUniform4dv, "glProgramUniform4dv")
    set_proc_address(&impl_ProgramUniform4ui, "glProgramUniform4ui")
    set_proc_address(&impl_ProgramUniform4uiv, "glProgramUniform4uiv")
    set_proc_address(&impl_ProgramUniformMatrix2fv, "glProgramUniformMatrix2fv")
    set_proc_address(&impl_ProgramUniformMatrix3fv, "glProgramUniformMatrix3fv")
    set_proc_address(&impl_ProgramUniformMatrix4fv, "glProgramUniformMatrix4fv")
    set_proc_address(&impl_ProgramUniformMatrix2dv, "glProgramUniformMatrix2dv")
    set_proc_address(&impl_ProgramUniformMatrix3dv, "glProgramUniformMatrix3dv")
    set_proc_address(&impl_ProgramUniformMatrix4dv, "glProgramUniformMatrix4dv")
    set_proc_address(&impl_ProgramUniformMatrix2x3fv, "glProgramUniformMatrix2x3fv")
    set_proc_address(&impl_ProgramUniformMatrix3x2fv, "glProgramUniformMatrix3x2fv")
    set_proc_address(&impl_ProgramUniformMatrix2x4fv, "glProgramUniformMatrix2x4fv")
    set_proc_address(&impl_ProgramUniformMatrix4x2fv, "glProgramUniformMatrix4x2fv")
    set_proc_address(&impl_ProgramUniformMatrix3x4fv, "glProgramUniformMatrix3x4fv")
    set_proc_address(&impl_ProgramUniformMatrix4x3fv, "glProgramUniformMatrix4x3fv")
    set_proc_address(&impl_ProgramUniformMatrix2x3dv, "glProgramUniformMatrix2x3dv")
    set_proc_address(&impl_ProgramUniformMatrix3x2dv, "glProgramUniformMatrix3x2dv")
    set_proc_address(&impl_ProgramUniformMatrix2x4dv, "glProgramUniformMatrix2x4dv")
    set_proc_address(&impl_ProgramUniformMatrix4x2dv, "glProgramUniformMatrix4x2dv")
    set_proc_address(&impl_ProgramUniformMatrix3x4dv, "glProgramUniformMatrix3x4dv")
    set_proc_address(&impl_ProgramUniformMatrix4x3dv, "glProgramUniformMatrix4x3dv")
    set_proc_address(&impl_ValidateProgramPipeline, "glValidateProgramPipeline")
    set_proc_address(&impl_GetProgramPipelineInfoLog, "glGetProgramPipelineInfoLog")
    set_proc_address(&impl_VertexAttribL1d, "glVertexAttribL1d")
    set_proc_address(&impl_VertexAttribL2d, "glVertexAttribL2d")
    set_proc_address(&impl_VertexAttribL3d, "glVertexAttribL3d")
    set_proc_address(&impl_VertexAttribL4d, "glVertexAttribL4d")
    set_proc_address(&impl_VertexAttribL1dv, "glVertexAttribL1dv")
    set_proc_address(&impl_VertexAttribL2dv, "glVertexAttribL2dv")
    set_proc_address(&impl_VertexAttribL3dv, "glVertexAttribL3dv")
    set_proc_address(&impl_VertexAttribL4dv, "glVertexAttribL4dv")
    set_proc_address(&impl_VertexAttribLPointer, "glVertexAttribLPointer")
    set_proc_address(&impl_GetVertexAttribLdv, "glGetVertexAttribLdv")
    set_proc_address(&impl_ViewportArrayv, "glViewportArrayv")
    set_proc_address(&impl_ViewportIndexedf, "glViewportIndexedf")
    set_proc_address(&impl_ViewportIndexedfv, "glViewportIndexedfv")
    set_proc_address(&impl_ScissorArrayv, "glScissorArrayv")
    set_proc_address(&impl_ScissorIndexed, "glScissorIndexed")
    set_proc_address(&impl_ScissorIndexedv, "glScissorIndexedv")
    set_proc_address(&impl_DepthRangeArrayv, "glDepthRangeArrayv")
    set_proc_address(&impl_DepthRangeIndexed, "glDepthRangeIndexed")
    set_proc_address(&impl_GetFloati_v, "glGetFloati_v")
    set_proc_address(&impl_GetDoublei_v, "glGetDoublei_v")
    // GL_VERSION_4_2
    set_proc_address(&impl_DrawArraysInstancedBaseInstance, "glDrawArraysInstancedBaseInstance")
    set_proc_address(&impl_DrawElementsInstancedBaseInstance, "glDrawElementsInstancedBaseInstance")
    set_proc_address(&impl_DrawElementsInstancedBaseVertexBaseInstance, "glDrawElementsInstancedBaseVertexBaseInstance")
    set_proc_address(&impl_GetInternalformativ, "glGetInternalformativ")
    set_proc_address(&impl_GetActiveAtomicCounterBufferiv, "glGetActiveAtomicCounterBufferiv")
    set_proc_address(&impl_BindImageTexture, "glBindImageTexture")
    set_proc_address(&impl_MemoryBarrier, "glMemoryBarrier")
    set_proc_address(&impl_TexStorage1D, "glTexStorage1D")
    set_proc_address(&impl_TexStorage2D, "glTexStorage2D")
    set_proc_address(&impl_TexStorage3D, "glTexStorage3D")
    set_proc_address(&impl_DrawTransformFeedbackInstanced, "glDrawTransformFeedbackInstanced")
    set_proc_address(&impl_DrawTransformFeedbackStreamInstanced, "glDrawTransformFeedbackStreamInstanced")
    // GL_VERSION_4_3
    set_proc_address(&impl_ClearBufferData, "glClearBufferData")
    set_proc_address(&impl_ClearBufferSubData, "glClearBufferSubData")
    set_proc_address(&impl_DispatchCompute, "glDispatchCompute")
    set_proc_address(&impl_DispatchComputeIndirect, "glDispatchComputeIndirect")
    set_proc_address(&impl_CopyImageSubData, "glCopyImageSubData")
    set_proc_address(&impl_FramebufferParameteri, "glFramebufferParameteri")
    set_proc_address(&impl_GetFramebufferParameteriv, "glGetFramebufferParameteriv")
    set_proc_address(&impl_GetInternalformati64v, "glGetInternalformati64v")
    set_proc_address(&impl_InvalidateTexSubImage, "glInvalidateTexSubImage")
    set_proc_address(&impl_InvalidateTexImage, "glInvalidateTexImage")
    set_proc_address(&impl_InvalidateBufferSubData, "glInvalidateBufferSubData")
    set_proc_address(&impl_InvalidateBufferData, "glInvalidateBufferData")
    set_proc_address(&impl_InvalidateFramebuffer, "glInvalidateFramebuffer")
    set_proc_address(&impl_InvalidateSubFramebuffer, "glInvalidateSubFramebuffer")
    set_proc_address(&impl_MultiDrawArraysIndirect, "glMultiDrawArraysIndirect")
    set_proc_address(&impl_MultiDrawElementsIndirect, "glMultiDrawElementsIndirect")
    set_proc_address(&impl_GetProgramInterfaceiv, "glGetProgramInterfaceiv")
    set_proc_address(&impl_GetProgramResourceIndex, "glGetProgramResourceIndex")
    set_proc_address(&impl_GetProgramResourceName, "glGetProgramResourceName")
    set_proc_address(&impl_GetProgramResourceiv, "glGetProgramResourceiv")
    set_proc_address(&impl_GetProgramResourceLocation, "glGetProgramResourceLocation")
    set_proc_address(&impl_GetProgramResourceLocationIndex, "glGetProgramResourceLocationIndex")
    set_proc_address(&impl_ShaderStorageBlockBinding, "glShaderStorageBlockBinding")
    set_proc_address(&impl_TexBufferRange, "glTexBufferRange")
    set_proc_address(&impl_TexStorage2DMultisample, "glTexStorage2DMultisample")
    set_proc_address(&impl_TexStorage3DMultisample, "glTexStorage3DMultisample")
    set_proc_address(&impl_TextureView, "glTextureView")
    set_proc_address(&impl_BindVertexBuffer, "glBindVertexBuffer")
    set_proc_address(&impl_VertexAttribFormat, "glVertexAttribFormat")
    set_proc_address(&impl_VertexAttribIFormat, "glVertexAttribIFormat")
    set_proc_address(&impl_VertexAttribLFormat, "glVertexAttribLFormat")
    set_proc_address(&impl_VertexAttribBinding, "glVertexAttribBinding")
    set_proc_address(&impl_VertexBindingDivisor, "glVertexBindingDivisor")
    set_proc_address(&impl_DebugMessageControl, "glDebugMessageControl")
    set_proc_address(&impl_DebugMessageInsert, "glDebugMessageInsert")
    set_proc_address(&impl_DebugMessageCallback, "glDebugMessageCallback")
    set_proc_address(&impl_GetDebugMessageLog, "glGetDebugMessageLog")
    set_proc_address(&impl_PushDebugGroup, "glPushDebugGroup")
    set_proc_address(&impl_PopDebugGroup, "glPopDebugGroup")
    set_proc_address(&impl_ObjectLabel, "glObjectLabel")
    set_proc_address(&impl_GetObjectLabel, "glGetObjectLabel")
    set_proc_address(&impl_ObjectPtrLabel, "glObjectPtrLabel")
    set_proc_address(&impl_GetObjectPtrLabel, "glGetObjectPtrLabel")
    set_proc_address(&impl_GetPointerv, "glGetPointerv")
    // GL_VERSION_4_4
    set_proc_address(&impl_BufferStorage, "glBufferStorage")
    set_proc_address(&impl_ClearTexImage, "glClearTexImage")
    set_proc_address(&impl_ClearTexSubImage, "glClearTexSubImage")
    set_proc_address(&impl_BindBuffersBase, "glBindBuffersBase")
    set_proc_address(&impl_BindBuffersRange, "glBindBuffersRange")
    set_proc_address(&impl_BindTextures, "glBindTextures")
    set_proc_address(&impl_BindSamplers, "glBindSamplers")
    set_proc_address(&impl_BindImageTextures, "glBindImageTextures")
    set_proc_address(&impl_BindVertexBuffers, "glBindVertexBuffers")
    // GL_VERSION_4_5
    set_proc_address(&impl_ClipControl, "glClipControl")
    set_proc_address(&impl_CreateTransformFeedbacks, "glCreateTransformFeedbacks")
    set_proc_address(&impl_TransformFeedbackBufferBase, "glTransformFeedbackBufferBase")
    set_proc_address(&impl_TransformFeedbackBufferRange, "glTransformFeedbackBufferRange")
    set_proc_address(&impl_GetTransformFeedbackiv, "glGetTransformFeedbackiv")
    set_proc_address(&impl_GetTransformFeedbacki_v, "glGetTransformFeedbacki_v")
    set_proc_address(&impl_GetTransformFeedbacki64_v, "glGetTransformFeedbacki64_v")
    set_proc_address(&impl_CreateBuffers, "glCreateBuffers")
    set_proc_address(&impl_NamedBufferStorage, "glNamedBufferStorage")
    set_proc_address(&impl_NamedBufferData, "glNamedBufferData")
    set_proc_address(&impl_NamedBufferSubData, "glNamedBufferSubData")
    set_proc_address(&impl_CopyNamedBufferSubData, "glCopyNamedBufferSubData")
    set_proc_address(&impl_ClearNamedBufferData, "glClearNamedBufferData")
    set_proc_address(&impl_ClearNamedBufferSubData, "glClearNamedBufferSubData")
    set_proc_address(&impl_MapNamedBuffer, "glMapNamedBuffer")
    set_proc_address(&impl_MapNamedBufferRange, "glMapNamedBufferRange")
    set_proc_address(&impl_UnmapNamedBuffer, "glUnmapNamedBuffer")
    set_proc_address(&impl_FlushMappedNamedBufferRange, "glFlushMappedNamedBufferRange")
    set_proc_address(&impl_GetNamedBufferParameteriv, "glGetNamedBufferParameteriv")
    set_proc_address(&impl_GetNamedBufferParameteri64v, "glGetNamedBufferParameteri64v")
    set_proc_address(&impl_GetNamedBufferPointerv, "glGetNamedBufferPointerv")
    set_proc_address(&impl_GetNamedBufferSubData, "glGetNamedBufferSubData")
    set_proc_address(&impl_CreateFramebuffers, "glCreateFramebuffers")
    set_proc_address(&impl_NamedFramebufferRenderbuffer, "glNamedFramebufferRenderbuffer")
    set_proc_address(&impl_NamedFramebufferParameteri, "glNamedFramebufferParameteri")
    set_proc_address(&impl_NamedFramebufferTexture, "glNamedFramebufferTexture")
    set_proc_address(&impl_NamedFramebufferTextureLayer, "glNamedFramebufferTextureLayer")
    set_proc_address(&impl_NamedFramebufferDrawBuffer, "glNamedFramebufferDrawBuffer")
    set_proc_address(&impl_NamedFramebufferDrawBuffers, "glNamedFramebufferDrawBuffers")
    set_proc_address(&impl_NamedFramebufferReadBuffer, "glNamedFramebufferReadBuffer")
    set_proc_address(&impl_InvalidateNamedFramebufferData, "glInvalidateNamedFramebufferData")
    set_proc_address(&impl_InvalidateNamedFramebufferSubData, "glInvalidateNamedFramebufferSubData")
    set_proc_address(&impl_ClearNamedFramebufferiv, "glClearNamedFramebufferiv")
    set_proc_address(&impl_ClearNamedFramebufferuiv, "glClearNamedFramebufferuiv")
    set_proc_address(&impl_ClearNamedFramebufferfv, "glClearNamedFramebufferfv")
    set_proc_address(&impl_ClearNamedFramebufferfi, "glClearNamedFramebufferfi")
    set_proc_address(&impl_BlitNamedFramebuffer, "glBlitNamedFramebuffer")
    set_proc_address(&impl_CheckNamedFramebufferStatus, "glCheckNamedFramebufferStatus")
    set_proc_address(&impl_GetNamedFramebufferParameteriv, "glGetNamedFramebufferParameteriv")
    set_proc_address(&impl_GetNamedFramebufferAttachmentParameteriv, "glGetNamedFramebufferAttachmentParameteriv")
    set_proc_address(&impl_CreateRenderbuffers, "glCreateRenderbuffers")
    set_proc_address(&impl_NamedRenderbufferStorage, "glNamedRenderbufferStorage")
    set_proc_address(&impl_NamedRenderbufferStorageMultisample, "glNamedRenderbufferStorageMultisample")
    set_proc_address(&impl_GetNamedRenderbufferParameteriv, "glGetNamedRenderbufferParameteriv")
    set_proc_address(&impl_CreateTextures, "glCreateTextures")
    set_proc_address(&impl_TextureBuffer, "glTextureBuffer")
    set_proc_address(&impl_TextureBufferRange, "glTextureBufferRange")
    set_proc_address(&impl_TextureStorage1D, "glTextureStorage1D")
    set_proc_address(&impl_TextureStorage2D, "glTextureStorage2D")
    set_proc_address(&impl_TextureStorage3D, "glTextureStorage3D")
    set_proc_address(&impl_TextureStorage2DMultisample, "glTextureStorage2DMultisample")
    set_proc_address(&impl_TextureStorage3DMultisample, "glTextureStorage3DMultisample")
    set_proc_address(&impl_TextureSubImage1D, "glTextureSubImage1D")
    set_proc_address(&impl_TextureSubImage2D, "glTextureSubImage2D")
    set_proc_address(&impl_TextureSubImage3D, "glTextureSubImage3D")
    set_proc_address(&impl_CompressedTextureSubImage1D, "glCompressedTextureSubImage1D")
    set_proc_address(&impl_CompressedTextureSubImage2D, "glCompressedTextureSubImage2D")
    set_proc_address(&impl_CompressedTextureSubImage3D, "glCompressedTextureSubImage3D")
    set_proc_address(&impl_CopyTextureSubImage1D, "glCopyTextureSubImage1D")
    set_proc_address(&impl_CopyTextureSubImage2D, "glCopyTextureSubImage2D")
    set_proc_address(&impl_CopyTextureSubImage3D, "glCopyTextureSubImage3D")
    set_proc_address(&impl_TextureParameterf, "glTextureParameterf")
    set_proc_address(&impl_TextureParameterfv, "glTextureParameterfv")
    set_proc_address(&impl_TextureParameteri, "glTextureParameteri")
    set_proc_address(&impl_TextureParameterIiv, "glTextureParameterIiv")
    set_proc_address(&impl_TextureParameterIuiv, "glTextureParameterIuiv")
    set_proc_address(&impl_TextureParameteriv, "glTextureParameteriv")
    set_proc_address(&impl_GenerateTextureMipmap, "glGenerateTextureMipmap")
    set_proc_address(&impl_BindTextureUnit, "glBindTextureUnit")
    set_proc_address(&impl_GetTextureImage, "glGetTextureImage")
    set_proc_address(&impl_GetCompressedTextureImage, "glGetCompressedTextureImage")
    set_proc_address(&impl_GetTextureLevelParameterfv, "glGetTextureLevelParameterfv")
    set_proc_address(&impl_GetTextureLevelParameteriv, "glGetTextureLevelParameteriv")
    set_proc_address(&impl_GetTextureParameterfv, "glGetTextureParameterfv")
    set_proc_address(&impl_GetTextureParameterIiv, "glGetTextureParameterIiv")
    set_proc_address(&impl_GetTextureParameterIuiv, "glGetTextureParameterIuiv")
    set_proc_address(&impl_GetTextureParameteriv, "glGetTextureParameteriv")
    set_proc_address(&impl_CreateVertexArrays, "glCreateVertexArrays")
    set_proc_address(&impl_DisableVertexArrayAttrib, "glDisableVertexArrayAttrib")
    set_proc_address(&impl_EnableVertexArrayAttrib, "glEnableVertexArrayAttrib")
    set_proc_address(&impl_VertexArrayElementBuffer, "glVertexArrayElementBuffer")
    set_proc_address(&impl_VertexArrayVertexBuffer, "glVertexArrayVertexBuffer")
    set_proc_address(&impl_VertexArrayVertexBuffers, "glVertexArrayVertexBuffers")
    set_proc_address(&impl_VertexArrayAttribBinding, "glVertexArrayAttribBinding")
    set_proc_address(&impl_VertexArrayAttribFormat, "glVertexArrayAttribFormat")
    set_proc_address(&impl_VertexArrayAttribIFormat, "glVertexArrayAttribIFormat")
    set_proc_address(&impl_VertexArrayAttribLFormat, "glVertexArrayAttribLFormat")
    set_proc_address(&impl_VertexArrayBindingDivisor, "glVertexArrayBindingDivisor")
    set_proc_address(&impl_GetVertexArrayiv, "glGetVertexArrayiv")
    set_proc_address(&impl_GetVertexArrayIndexediv, "glGetVertexArrayIndexediv")
    set_proc_address(&impl_GetVertexArrayIndexed64iv, "glGetVertexArrayIndexed64iv")
    set_proc_address(&impl_CreateSamplers, "glCreateSamplers")
    set_proc_address(&impl_CreateProgramPipelines, "glCreateProgramPipelines")
    set_proc_address(&impl_CreateQueries, "glCreateQueries")
    set_proc_address(&impl_GetQueryBufferObjecti64v, "glGetQueryBufferObjecti64v")
    set_proc_address(&impl_GetQueryBufferObjectiv, "glGetQueryBufferObjectiv")
    set_proc_address(&impl_GetQueryBufferObjectui64v, "glGetQueryBufferObjectui64v")
    set_proc_address(&impl_GetQueryBufferObjectuiv, "glGetQueryBufferObjectuiv")
    set_proc_address(&impl_MemoryBarrierByRegion, "glMemoryBarrierByRegion")
    set_proc_address(&impl_GetTextureSubImage, "glGetTextureSubImage")
    set_proc_address(&impl_GetCompressedTextureSubImage, "glGetCompressedTextureSubImage")
    set_proc_address(&impl_GetGraphicsResetStatus, "glGetGraphicsResetStatus")
    set_proc_address(&impl_GetnCompressedTexImage, "glGetnCompressedTexImage")
    set_proc_address(&impl_GetnTexImage, "glGetnTexImage")
    set_proc_address(&impl_GetnUniformdv, "glGetnUniformdv")
    set_proc_address(&impl_GetnUniformfv, "glGetnUniformfv")
    set_proc_address(&impl_GetnUniformiv, "glGetnUniformiv")
    set_proc_address(&impl_GetnUniformuiv, "glGetnUniformuiv")
    set_proc_address(&impl_ReadnPixels, "glReadnPixels")
    set_proc_address(&impl_TextureBarrier, "glTextureBarrier")
    // GL_VERSION_4_6
    set_proc_address(&impl_SpecializeShader, "glSpecializeShader")
    set_proc_address(&impl_MultiDrawArraysIndirectCount, "glMultiDrawArraysIndirectCount")
    set_proc_address(&impl_MultiDrawElementsIndirectCount, "glMultiDrawElementsIndirectCount")
    set_proc_address(&impl_PolygonOffsetClamp, "glPolygonOffsetClamp")

    ext_count: i32; impl_GetIntegerv(NUM_EXTENSIONS, &ext_count) // Todo: error handling 
    Extension_Load_Helper :: struct { name: cstring, loaded_ptr: ^bool, load_proc: proc(set_proc_address: Set_Proc_Address)}
    extensions_wanted := [?]Extension_Load_Helper {
        {"GL_KHR_parallel_shader_compile", &KHR_parallel_shader_compile, load_KHR_parallel_shader_compile},
    }
    for i in 0..<ext_count {
        name := impl_GetStringi(EXTENSIONS, cast(u32)i)
        for &e in extensions_wanted {
            if e.name == name {
                e.loaded_ptr^ = true
                e.load_proc(set_proc_address)
            }
        }
    }
}

